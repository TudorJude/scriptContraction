function checkCarDataValidity(c,k){if(void 0==c.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});for(var b=0,e=0;e<k.Catalog.length;e++)if(k.Catalog[e].ItemId==c.ItemId){var d=
JSON.parse(k.Catalog[e].CustomData),b=parseInt(d.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:b};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a})}catch(h){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:b}}return"OK"}function generateFailObjCustom(c,k){return{Result:"Failed",propName:k}}
function generateFailObj(c){return{Result:"Failed",Message:c}}function generateErrObj(c){return{Result:"Error",Message:c}}
function CheckMaintenanceAndVersion(c){var k=!1,a="A.0.0.1";void 0!=c&&(k=c.debug,a=c.cVersion);if(void 0==a)return"update";c=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var b=c.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(b=c.Data.MinimumGameVersionActual_IOS);if(void 0==b)return"maintenance";for(var e=!1,b=b.split("."),d=0;3>d;d++){var h=0;a.length>d+1&&(h=Number(a[d+1]));var f=0;b.length>d&&
(f=Number(b[d]));if(h!=f){h<f&&(e=!0);break}}return 1==e?"update":1==k?"OK":c.Data.Maintenance?"false"==c.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(c){return"maintenance"==c?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(c,k){return{Result:"OK",Message:c,InventoryChange:k}}
function publishToLiveFeed(c,k,a){var b=server.GetTitleData({Keys:["LiveFeedDictionary"]});if(void 0!=b.Data.LiveFeedDictionary){var e=JSON.parse(b.Data.LiveFeedDictionary),d=b=0,h=1,f=1,g=k,l=a,n=0,v=0,w=!1,u={};u.ts=(new Date).getTime();try{n=Number(e.MetaData.HealthDecayPerMinute),v=Number(e.MetaData.MaxFeedHistory)}catch(y){log.debug("invalid metadata");return}try{var b=b+Number(e.ActorData.Base.health),d=d+Number(e.ActorData.Base.damage),x=server.GetPlayerStatistics({PlayFabId:c,StatisticNames:["IAPValue",
"Trophies"]}).Statistics,C=Number(GetValueFromStatistics(x,"IAPValue",0)),D=Number(GetValueFromStatistics(x,"Trophies",0)),b=b+Number(e.ActorData.IAPValue.health)*C,d=d+Number(e.ActorData.IAPValue.damage)*C,b=b+Number(e.ActorData.Trophies.health)*D,d=d+Number(e.ActorData.Trophies.damage)*D}catch(y){log.debug("error at liveFeed actor: "+y);return}try{void 0!=e.ActionsData[k]&&(b+=Number(e.ActionsData[k].health),d+=Number(e.ActionsData[k].damage),g=e.ActionsData[k].id,"true"==e.ActionsData[k].isUnique&&
(w=!0),e.ActionsData[k].valMultiplier&&(h=Number(e.ActionsData[k].valMultiplier.health),f=Number(e.ActionsData[k].valMultiplier.damage)))}catch(y){log.debug("error at liveFeed action: "+y);return}try{1==isNaN(a)?void 0!=e.DirectObjectData[a]&&(b+=Number(e.DirectObjectData[a].health),d+=Number(e.DirectObjectData[a].damage),l=e.DirectObjectData[a].id):(b+=h*Number(a),d+=f*Number(a),l=a)}catch(y){log.debug("error at liveFeed object: "+y);return}k=server.GetPlayerCombinedInfo({PlayFabId:c,InfoRequestParameters:{GetUserAccountInfo:!0}});
var m;try{m=k.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}catch(y){log.debug("error at liveFeed nameget: "+y);return}log.debug("10");u.health=b;u.currentHealth=b;u.UserId=c;u.UserName=m;u.Action=g;u.Object=l;c=server.GetTitleInternalData({Keys:["LiveFeed"]});if(void 0!=c.Data.LiveFeed&&(c=JSON.parse(c.Data.LiveFeed),"OK"==ApplyDamageOverTimeToFeed(c,n))){var q;try{if(Number(v)<=Number(c.length)||1==w){q=Array(c.length);for(var n=!1,p=0;p<c.length;p++)if(c[p].Action==g&&1==w||c[p].currentHealth<
d&&0==w){n=!0;c.splice(p,1);break}0==n&&c.splice(q.length-1,1);for(p=0;p<c.length;p++)if(c[p].currentHealth<b){if(null==u)return;c.splice(p,0,u);q=c;break}}else for(q=Array(c.length+1),q[c.length]=u,p=0;p<c.length;p++)if(q[p]=c[p],c[p].currentHealth<b&&0==w||c[p].Action==g&&1==w){for(q[p]=u;p<c.length;p++)q[p+1]=c[p];break}}catch(y){log.debug("found error at feed replace/add: "+y);return}q=JSON.stringify(q);server.SetTitleInternalData({Key:"LiveFeed",Value:q})}}}
function ApplyDamageOverTimeToFeed(c,k){if(void 0==c.length)return"Error";for(var a=(new Date).getTime(),b=0,e=0;e<c.length;e++)try{b=Math.abs(Number(c[e].ts)-Number(a))*Number(k),b/=6E4,b=Math.floor(b),c[e].currentHealth=Math.max(Number(c[e].health)-Number(b),0)}catch(d){c.splice(e,1)}return"OK"}
function updateUserProfileInfo(c,k){var a={};a.CarData=k;log.debug("carInfo is: "+k);var b=[];b.push({Key:"UserProfileInfo",Value:JSON.stringify(a)});a=server.UpdateUserReadOnlyData({PlayFabId:c,Data:b,Permission:"Public"});log.debug("playerData is: "+a)}
function updateCurrencySpentStatistic(c,k){var a=[],b,e=0,d=Number(k);if(!(isNaN(d)||0>=d)&&("SC"==c&&(b="MoneySpent"),"HC"==c&&(b="GoldSpent"),void 0!=b)){var h=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:[b]});0<h.Statistics.length&&(e=Number(h.Statistics[0].Value));a.push({StatisticName:b,Version:"0",Value:e+d});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a})}}
function checkBalance(c,k,a,b){if("SC"==c){if(a<k)return generateFailObj("NotEnoughSC")}else if(b<k)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(c){var k=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==k.Data.LeagueSubdivisions||void 0==k.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(k.Data.LeagueSubdivisions).leagues,k=JSON.parse(k.Data.SubdivisionTrophyRanges).subdivisions,b=0;b<a.length;b++)if(!(Number(c)>Number(k[a[b]])))return b;return a.length-1}
function recalculateCarPr(c,k,a,b){var e=0,d;d=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<d.Catalog.length;a++)if(d.Catalog[a].ItemId==k){e=JSON.parse(d.Catalog[a].CustomData);e=parseInt(e.basePr)+getObjectValueFromLevel(e,"prPerLvl",c.CarLvl);break}b=void 0===b?server.GetCatalogItems({CatalogVersion:"PartCards"}):b;c={Exhaust:c.ExhaustLvl,Engine:c.EngineLvl,Gearbox:c.GearboxLvl,Suspension:c.SuspensionLvl,Tires:c.TiresLvl,Turbo:c.TurboLvl};for(a=0;a<b.Catalog.length;a++)k=
JSON.parse(b.Catalog[a].CustomData),e+=getObjectValueFromLevel(k,"prPerLvl",Number(c[b.Catalog[a].ItemId]));return e}
function GenerateBlackMarket(c){var k=1,a=server.GetPlayerStatistics({PlayFabId:c,StatisticNames:["League"]});0!=a.Statistics.length&&(k=a.Statistics[0].Value.toString());0>=Number(k)&&(k=1);for(var b=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:c,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),e=JSON.parse(a.Data.BlackMarketRarityBias),d,h=[],f=[],g=[],l=0;l<b.Catalog.length;l++){d=JSON.parse(b.Catalog[l].CustomData);if(void 0==d)return generateErrObj("Part card "+
b.Catalog[l].ItemId+" has no custom data.");0==d.rarity&&h.push(b.Catalog[l].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy);1==d.rarity&&f.push(b.Catalog[l].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy);2==d.rarity&&g.push(b.Catalog[l].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy)}b={};b.BMTime=(new Date).getTime();l=Math.floor(Math.random()*h.length);b.BMItem0=h[l];2<=h.length&&h.splice(l,1);Math.floor(100*Math.random())<Number(e.parts[2])?
h=g:(l=Number(e.parts[0])+Number(e.parts[1]),Math.floor(Math.random()*l)>=Number(e.parts[0])&&(h=f));b.BMItem1=h[Math.floor(Math.random()*h.length)];d=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var n,h=[],f=[],g=[],l=0;l<d.Catalog.length;l++){n=JSON.parse(d.Catalog[l].CustomData);if(void 0==n)return generateErrObj("Car card "+d.Catalog[l].ItemId+" has no custom data.");Number(n.unlockedAtRank)>=Number(k)+1||("0"==n.rarity&&h.push(d.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+
"_0_"+n.BMpriceIncrPerBuy),"1"==n.rarity&&f.push(d.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy),"2"==n.rarity&&g.push(d.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy))}k=Math.floor(Math.random()*h.length);b.BMItem2=h[k];2<=h.length&&h.splice(k,1);0>=f.length&&(0>=g.length?g=f=h:f=g);0>=g.length&&(g=f);Math.floor(100*Math.random())<Number(e.cars[2])?h=g:(l=Number(e.cars[0])+Number(e.cars[1]),Math.floor(Math.random()*l)>=Number(e.cars[0])&&
(h=f));k=Math.floor(Math.random()*h.length);b.BMItem3=h[k];server.UpdateUserInternalData({PlayFabId:c,Data:b});b.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return b}function GetCurrentBlackMarket(c,k){var a={},b=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:c,Keys:e});a.BMTime=60*parseInt(e.Data.BlackMarketResetMinutes)-Math.floor((b.getTime()-k.Data.BMTime.Value)/1E3);for(b=0;4>b;b++)a["BMItem"+b]=k.Data["BMItem"+b].Value;return a}
function GetValueFromStatistics(c,k,a){for(var b,e=0;e<c.length;e++)c[e].StatisticName===k&&(b=c[e]);return void 0===b?void 0!==a?a:0:Number(b.Value)}function GetVersionFromStatistics(c,k,a){for(var b,e=0;e<c.length;e++)c[e].StatisticName===k&&(b=c[e]);return void 0===b?void 0!==a?a:0:Number(b.Version)}function getCatalogItem(c,k){for(var a=server.GetCatalogItems({CatalogVersion:c}),b=0;b<a.Catalog.length;b++)if(a.Catalog[b].ItemId===k)return a.Catalog[b]}
function getObjectValueFromLevel(c,k,a,b){b||(b=0);if(!c[k]||!c[k].length)return b;var e=Number(c[k].length);a>=e&&(a=e-1);return Number(c[k][a])||b}function GiveUserPart(c,k,a,b){GiveUserCard(c,"PartsCards",k,a,b)}function GiveUserCarCard(c,k,a,b){GiveUserCard(c,"CarCards",k,a,b)}
function GiveUserCard(c,k,a,b,e){a=Number(a)<Number(b)?Number(a)+Math.floor(Math.random()*(Number(b)-Number(a))):Number(a);log.debug("cardsAmount: "+a);var d,h;for(b=0;b<e.Inventory.length;b++)if(e.Inventory[b].ItemId==c&&e.Inventory[b].CatalogVersion==k){d=e.Inventory[b].ItemInstanceId;h=void 0==e.Inventory[b].CustomData?a:void 0==e.Inventory[b].CustomData.Amount?a:isNaN(Number(e.Inventory[b].CustomData.Amount))?a:Number(e.Inventory[b].CustomData.Amount)+Number(h);break}if(void 0==d&&(h=a,d=[],d.push(c),
d=server.GrantItemsToUser({CatalogVersion:k,PlayFabId:e.PlayFabId,ItemIds:d}).ItemGrantResults[0].ItemInstanceId,void 0===d))return generateErrObj("grantRequest denied");a={Amount:h};log.debug("new amount is: "+h);server.UpdateUserInventoryItemCustomData({PlayFabId:e.PlayFabId,ItemInstanceId:d,Data:a});return{ItemId:c,CatalogVersion:k,CustomData:a}}function GetRandomCard(c,k){return void 0==c||void 0==c.length||0>=c.length?"ERROR":c[Math.floor(Math.random()*c.length)]}
function AddCardToListOfStacks(c,k,a,b){if(void 0==k)return k=[{ItemId:a,CatalogVersion:c,CustomData:{Amount:1}}];for(var e=0;e<k.length;e++)if(k[e].ItemId==a)return k[e].CustomData.Amount=Number(k[e].CustomData.Amount)+1,k;1==b?k.push({ItemId:a,CatalogVersion:c,CustomData:{Amount:1}}):k[Math.floor(Math.random()*k.length)].CustomData.Amount=Number(k[Math.floor(Math.random()*k.length)].CustomData.Amount)+1;return k}
function WeightedRandom(c,k){try{for(var a=0;a<c.length;a++);for(var b=Math.floor(Math.random()*k),a=0;a<c.length;a++){if(b<=Number(c[a]))return a;b-=Number(c[a])}return 0}catch(e){return log.debug(e),0}}
handlers.buyChest=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(c.curr,c.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<c.cost){a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.curr,Amount:c.cost});updateCurrencySpentStatistic(c.curr,c.cost);var b={};b[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",
{VirtualCurrency:b})}return generateInventoryChange("ChestBought",{})};
handlers.buyPremiumChest=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]}),b=0;0!=a.Statistics.length&&(b=a.Statistics[0].Value);for(var b=Number(b),a=Number(calculateLeague(b)),b=server.GetCatalogItems({CatalogVersion:"Chests"}),e,d,h=0;h<b.Catalog.length;h++)if(b.Catalog[h].ItemId==c.chestId){e=JSON.parse(b.Catalog[h].CustomData);d=b.Catalog[h].VirtualCurrencyPrices.HC;
if(void 0==d)return generateErrObj("Chest has INVALID PRICE TAG");break}if(void 0==e)return generateErrObj("Could not find chest with id: "+c.chestId+" in the Chests catalog, or this chest's custom data is undefined");b=server.GetUserInventory({PlayFabId:currentPlayerId});if(Number(d)>Number(b.VirtualCurrency.HC))return generateErrObj("Not enough HC.");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:Number(d)});updateCurrencySpentStatistic("HC",d);e=GenerateChestBounty(currentPlayerId,
c.chestId,a,e);d=server.GetUserInventory({PlayFabId:currentPlayerId});a=UpdateExperience("Chests",c.chestId,"xpGain",0,!0);d.Experience=a;e={Result:"OK",ChestBounty:e,InventoryChange:d};publishToLiveFeed(currentPlayerId,"unlockedChest",c.chestId);return e};
handlers.claimDailyMission=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a=Number(c.mIdx),b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==b.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e=JSON.parse(e.Data.DailyMissionData),d=e.missionData[a].split("_"),b=JSON.parse(b.Data.DailyMissionStatus.Value),
h=b.dailyMissionClaimStatus;if(a>=h.length)return generateErrObj("Unlock index is out of bounds of playerData claim mission status array");if(1==h[a])return generateFailObj("Mission already claimed");h[a]=1;b={DailyMissionStatus:JSON.stringify({DailyStatus:b.DailyStatus,dailyMissionClaimStatus:h,timeStamp:b.timeStamp})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});if(a>=e.missionData.length)return generateErrObj("Unlock index is out of bounds of titleData claim mission reward array");
a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:d[1],Amount:Number(d[2])});e={};e[a.VirtualCurrency]=a.Balance;return generateInventoryChange("MissionClaimed",{VirtualCurrency:e})};
handlers.endDaily=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==a.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e;tParsed=JSON.parse(b.Data.DailyMissionData);e=Number(tParsed.minutesToRefresh);for(var d=JSON.parse(a.Data.DailyMissionStatus.Value),
a=d.dailyMissionClaimStatus,h,b=-1,f=0;f<tParsed.missionData.length;f++)h=tParsed.missionData[f].split("_"),4>h.length&&generateErrObj("Title data is invalid!"),"OFF"==h[3]&&(a[f]=-1);for(f=0;f<d.dailyMissionClaimStatus.length;f++)if(-1!=a[f]&&0==a[f])return generateErrObj("Not all missions were claimed!");a=[0,0,0,0,0,0,0,0];f=new Date;f.getTime()-Number(d.timeStamp)>6E4*Number(e)?(h=2,e=f.getTime()):(h=0,b=60*Number(e)-Math.floor((f.getTime()-Number(d.timeStamp))/1E3),e=d.timeStamp);e={DailyMissionStatus:JSON.stringify({DailyStatus:h,
dailyMissionClaimStatus:a,timeStamp:e})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:e});e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});f=0;0!=e.Statistics.length&&(f=e.Statistics[0].Value);f=Number(f);e=Number(calculateLeague(f));for(var d=server.GetCatalogItems({CatalogVersion:"Chests"}),g,f=0;f<d.Catalog.length;f++)if("DailyMissionChest"==d.Catalog[f].ItemId){g=JSON.parse(d.Catalog[f].CustomData);break}if(void 0==g)return generateErrObj("Could not find chest with id: DailyMissionChest in the Chests catalog, or this chest's custom data is undefined");
g=GenerateChestBounty(currentPlayerId,"DailyMissionChest",e,g);e=server.GetUserInventory({PlayFabId:currentPlayerId});return{Result:"OK",Message:"DailyCompleted",ChestBounty:g,InventoryChange:e,DailyStatus:{status:h,claimStatus:a,timeRemaining:b}}};
handlers.endGame=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges","RecUploadLock"]}),a=0,e,d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=d.Statistics.length&&(a=d.Statistics[0].Value,1==c.debug&&log.debug("getting trophy count "+d.Statistics[0].Value));e=a=Number(a);var h=server.GetUserInternalData({PlayFabId:currentPlayerId,
Keys:["trophyLose","trophyWin","LastGameOutcome","LatestStreak"]}),d=void 0==h.Data.trophyLose||void 0==h.Data.trophyWin?45:Number(h.Data.trophyLose.Value)+Number(h.Data.trophyWin.Value),f=0,g="Loss";void 0!=h.Data.LatestStreak&&(f=Number(h.Data.LatestStreak.Value));1==isNaN(f)&&(f=0);void 0!=h.Data.LatestStreak&&(g=h.Data.LastGameOutcome.Value);void 0==g&&(g="Loss");h={quitLastGame:"false",LastGameOutcome:"Loss"};"rWin"==c.outcome&&(a+=d,h.LastGameOutcome="Win","Loss"==g?f=1:f++,ldata=server.GetLeaderboard({StatisticName:"TrophyCount",
StartPosition:0,MaxResultsCount:1}),null!=ldata.Leaderboard&&(1==c.debug&&log.debug("leaderboardData: "+ldata.Leaderboard[0]),ldata.Leaderboard[0].PlayFabId==currentPlayerId?1==c.debug&&log.debug("ALREADY IN FIRST PLACE IN LEADERBOARD"):(1==c.debug&&log.debug("WASN'T FIRST PLACE"),Number(ldata.Leaderboard[0].StatValue)<a&&(1==c.debug&&log.debug("BUT HE IS NOW!"),publishToLiveFeed(currentPlayerId,"topPlayer",a)),1==c.debug&&log.debug("DIFF: "+Number(ldata.Leaderboard[0].StatValue)+" vs "+a))));h.LatestStreak=
f;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:h});var g=JSON.parse(c.recordingHeader),l=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:"Wins TotalGamesCompleted LongestWinStreak BestDriftScore HighestLeagueReached TotalGames".split(" ")}).Statistics,d=calculateLeague(a),h=GetValueFromStatistics(l,"TotalGamesCompleted",0),n=!1,v=GetValueFromStatistics(l,"TotalGames",0);1>=Number(v)&&(n=!0);h=Number(h)+1;v=GetValueFromStatistics(l,"Wins",0);"rWin"==c.outcome&&
(v=Number(v)+1);var w=GetValueFromStatistics(l,"LongestWinStreak",0);GetVersionFromStatistics(l,"LongestWinStreak",0);Number(w)<f&&(w=f,2<d&&(10==Number(w)&&publishToLiveFeed(currentPlayerId,"winStreak",10),15==Number(w)&&publishToLiveFeed(currentPlayerId,"winStreak",15),20==Number(w)&&publishToLiveFeed(currentPlayerId,"winStreak",20)));f=GetValueFromStatistics(l,"BestDriftScore",0);Number(g.Score)>f&&(f=Number(g.Score));l=GetValueFromStatistics(l,"HighestLeagueReached",1);Number(d)>Number(l)&&(l=
d,2<l&&publishToLiveFeed(currentPlayerId,"arenaUnlocked",Number(d)));var u=[];u.push({StatisticName:"TrophyCount",Value:a});u.push({StatisticName:"League",Value:d});u.push({StatisticName:"Wins",Value:v});u.push({StatisticName:"TotalGamesCompleted",Value:h});u.push({StatisticName:"LongestWinStreak",Value:w});u.push({StatisticName:"BestDriftScore",Value:f});u.push({StatisticName:"HighestLeagueReached",Value:l});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:u});"rWin"==c.outcome&&
0==n&&(4<Number(h)?grantUserChest(currentPlayerId,"endGameNormal"):grantUserChest(currentPlayerId,"endGameFreeWin"));var h=!1,x;void 0!=b.Data.RecUploadLock&&(x=JSON.parse(b.Data.RecUploadLock));if(void 0!=x)for(f=0;f<x.length;f++)if(c.cVersion==x[f]){h=!0;break}if(100>=Number(g.Score)||1==h)return 1==c.debug&&log.debug("this recording will not be stored, but endgame stats still apply. clientVersion: "+c.cVersion+". upload lock:  "+h),a={TrophyCount:a,League:d},{Result:a};b=JSON.parse(b.Data.SubdivisionTrophyRanges);
x=43;for(f=0;f<b.subdivisions.length;f++)if(e<b.subdivisions[f]){x=f;break}e=[];e.push({Key:c.envIndex+"_"+c.courseIndex+"_RecPos",Value:c.recordingPos});e.push({Key:c.envIndex+"_"+c.courseIndex+"_RecRot",Value:c.recordingRot});e.push({Key:c.envIndex+"_"+c.courseIndex+"_RecHeader",Value:c.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e});e=server.GetTitleInternalData({Key:"RecSubDivision"+x}).Data["RecSubDivision"+x];if(void 0==e)e=[],b={e:c.envIndex,c:c.courseIndex,
uId:currentPlayerId},e.push(b);else{e=JSON.parse(e);b={e:c.envIndex,c:c.courseIndex,uId:currentPlayerId};g=!1;for(f=h=0;f<e.length;f++)e[f].uId==currentPlayerId&&h++;if(2<h)return a={TrophyCount:a,League:d},{Result:a};for(f=0;f<e.length;f++)e[f].e==c.envIndex&&e[f].c==c.courseIndex&&(g=!0,e[f]=b);0==g&&e.push(b)}e=JSON.stringify(e);server.SetTitleInternalData({Key:"RecSubDivision"+x,Value:e});a={TrophyCount:a,League:d};return{Result:a}};
handlers.endSeason=function(c,k){var a=server.GetTitleData({Keys:["EndGameObject"]}),b,e;try{b=JSON.parse(a.Data.EndGameObject),log.debug("endGameDataParsed: "+b),e=b.endGameRewards}catch(h){log.debug("err: "+h);return}var d;0<Number(e.length)&&(d=server.GetLeaderboard({StatisticName:"TrophyCount",StartPosition:0,MaxResultsCount:Number(e.length)}));if(void 0!=d)for(a=Array(d.Leaderboard.length),b=0;b<d.Leaderboard.length;b++)a[b]=d.Leaderboard[b],server.UpdateUserReadOnlyData({PlayFabId:a[b].PlayFabId,
Data:{EndSeasonChest:e[b]}})};
handlers.endSeasonUser=function(c,k){var a={didClaim:!0,scReceived:0,hcReceived:0,previousTrophies:0,currentTrophies:0},b=server.GetTitleData({Keys:["EndGameObject","SubdivisionTrophyRanges"]});try{var e=JSON.parse(b.Data.EndGameObject),d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]}).Statistics,h=Number(d[0].Value),f=JSON.parse(b.Data.SubdivisionTrophyRanges).subdivisions,g=f[f.length-1],g=Number(g)+1,l=Math.floor(Number(e.scConversionRate)*(h-g)),n=Math.floor(Number(e.hcConversionRate)*
(h-g)),a={didClaim:!1,scReceived:l,hcReceived:n,previousTrophies:h,currentTrophies:g};server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"TrophyCount",Value:g}]});0<l&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:l});0<n&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:n})}catch(v){log.debug("err: "+v)}server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{EndSeasonReward:JSON.stringify(a)}})};
handlers.claimEndSeasonReward=function(c,k){try{var a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["EndSeasonReward","EndSeasonChest"]});if(void 0==a.Data.EndSeasonReward)return generateFailObj("Nothing to claim");var b=JSON.parse(a.Data.EndSeasonReward);b.didClaim=!0;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{EndSeasonReward:JSON.stringify(b)}});if(void 0==a.Data.EndSeasonChest)return{Result:"OK",Message:"noChest"};var e=JSON.parse(a.Data.EndSeasonChest);if(null==
e)return{Result:"OK",Message:"noChest"};for(var d=server.GetCatalogItems({CatalogVersion:"Chests"}),h,a=0;a<d.Catalog.length;a++)if(d.Catalog[a].ItemId==e){h=JSON.parse(d.Catalog[a].CustomData);break}if(void 0==h)return generateErrObj("Could not find chest with id: "+e+" in the Chests catalog, or this chest's custom data is undefined");GenerateChestBounty(currentPlayerId,e,10,h);server.GetUserInventory({PlayFabId:currentPlayerId});return r}catch(f){return log.debug("err: "+f),generateErrObj("something went wrong: "+
f)}};
function UpdateExperience(c,k,a,b,e,d){c=JSON.parse(getCatalogItem(c,k).CustomData)[a];k=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;k=k[k.length-1];d=d||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;d=GetValueFromStatistics(d,"Experience",0);if(d>=k)return k;if(isNaN(Number(c)))a=Number(c.length),b>=a&&(b=a-1),b=Number(c[b]);else if(b=Number(c),0===b)return d;d=Math.min(d+b,k);if(!e)return d;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",
Version:"0",Value:d}]});return d}
handlers.generateDaily=function(c,k){var a,b=new Date;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var e=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(e.DailyStatus);if(0==a){var b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),d;tParsed=JSON.parse(b.Data.DailyMissionData);d=Number(tParsed.minutesToRefresh);b=new Date;b.getTime()-Number(e.timeStamp)>6E4*Number(d)&&(a=1)}if(1!=a)return generateErrObj("DailyStatus is: "+
a+". Should be 1")}a=2;b=b.getTime();a={DailyMissionStatus:JSON.stringify({DailyStatus:a,dailyMissionClaimStatus:[0,0,0,0,0,0,0,0],timeStamp:b})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK"}};
handlers.getChestSlotsStatus=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["ChestFreeStatus","ChestSlotsStatus"]}),b;if(void 0==a.Data.ChestFreeStatus){for(var e=server.GetCatalogItems({CatalogVersion:"Chests"}),d=0;d<e.Catalog.length;d++)if("FreeChest"==e.Catalog[d].ItemId){b=JSON.parse(e.Catalog[d].CustomData);break}if(void 0==b)return generateErrObj("Chest catalog has no freechestinfo");
b=Number(b.hoursToOpen.split(",")[0]);if(isNaN(b))return generateErrObj("FreeChest open time info is invalid");e=Math.floor(Number((new Date).getTime())/1E3);b=[{status:0,TimeUntilArrival:Math.floor(e+3600*b)},{status:1,TimeUntilArrival:0}];b=JSON.stringify(b);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestFreeStatus:b}})}else b=a.Data.ChestFreeStatus.Value;void 0==a.Data.ChestSlotsStatus?(a=[{chestId:null,chestLeague:0,status:"Empty",orderTimeStamp:0,arrivalTimeStamp:0},{chestId:null,
chestLeague:0,status:"Empty",orderTimeStamp:0,arrivalTimeStamp:0},{chestId:null,chestLeague:0,status:"Empty",orderTimeStamp:0,arrivalTimeStamp:0},{chestId:null,chestLeague:0,status:"Empty",orderTimeStamp:0,arrivalTimeStamp:0}],d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["ChestsOpened","TrophyCount"]}).Statistics,e=GetValueFromStatistics(d,"ChestsOpened",0),d=GetValueFromStatistics(d,"TrophyCount",0),d=calculateLeague(d),15<Number(e)&&(a[0].chestId="GoldChest",a[0].chestLeague=
d,a[0].status="Arrived",a[0].arrivalTimeStamp=0,a[0].orderTimeStamp=1),a=JSON.stringify(a),server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestSlotsStatus:a}})):a=a.Data.ChestSlotsStatus.Value;return{Result:"OK",ChestSlotInfo:JSON.parse(a),FreeSlotsInfo:JSON.parse(b)}};
handlers.getDailyMissionStatus=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b,a=[0,0,0,0,0,0,0,0],e=-1;b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=b.Data.DailyMissionStatus){var d=JSON.parse(b.Data.DailyMissionStatus.Value);b=Number(d.DailyStatus);var h=a.length;h>d.dailyMissionClaimStatus.length&&(h=d.dailyMissionClaimStatus.length);for(var f=0;f<h;f++)a[f]=d.dailyMissionClaimStatus[f];
0==b&&(h=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),tParsed=JSON.parse(h.Data.DailyMissionData),h=Number(tParsed.minutesToRefresh),f=new Date,f.getTime()-Number(d.timeStamp)>6E4*Number(h)?(b=2,a=[0,0,0,0,0,0,0,0],d=f.getTime(),d={DailyStatus:b,dailyMissionClaimStatus:a,timeStamp:d},d=JSON.stringify(d),d={DailyMissionStatus:d},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d})):e=60*Number(h)-Math.floor((f.getTime()-Number(d.timeStamp))/1E3))}else b=2,
f=new Date,d=f.getTime(),d={DailyStatus:b,dailyMissionClaimStatus:a,timeStamp:d},d=JSON.stringify(d),d={DailyMissionStatus:d},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});return{Result:"OK",Message:" ",DailyStatus:{status:b,claimStatus:a,timeRemaining:e}}};
handlers.getLiveFeed=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetTitleInternalData({Keys:"LiveFeed"});return void 0==a||void 0==a.Data.LiveFeed?generateErrObj("No LivefeedFound"):{Result:"OK",Feed:JSON.parse(a.Data.LiveFeed)}};handlers.getServerTime=function(c,k){return{time:new Date}};
handlers.iapMade=function(c,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["IAPValue"]}).Statistics,b=Number(GetValueFromStatistics(a,"IAPValue",0));switch(c.bundle){case "co.tamatem.downshiftdrift.gold01":b+=99;break;case "co.tamatem.downshiftdrift.gold02":b+=499;break;case "co.tamatem.downshiftdrift.gold03":b+=2499;break;case "co.tamatem.downshiftdrift.gold04":b+=2499;break;case "co.tamatem.downshiftdrift.gold05":b+=4999;break;case "co.tamatem.downshiftdrift.gold06":b+=
9999;break;case "co.tamatem.downshiftdrift.bundle01":var b=b+599,e=server.GetUserInventory({PlayFabId:currentPlayerId}),d=server.GetCatalogItems({CatalogVersion:"BMBundleInfo"}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["HighestLeagueReached"]}).Statistics,a=Number(GetValueFromStatistics(a,"HighestLeagueReached",1)),h="bundle01league",h=10>a?h+"0"+a:h+a;1==c.debug&&log.debug("consuming: "+h);for(var f,a=0;a<d.Catalog.length;a++)if(d.Catalog[a].ItemId==h){f=JSON.parse(d.Catalog[a].CustomData);
break}if(void 0==f)return generateErrObj("Catalog item: "+h+" not found");for(a=0;a<e.Inventory.length;a++)if(e.Inventory[a].ItemId==c.bundle){try{server.ConsumeItem({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[a].ItemInstanceId,ConsumeCount:1})}catch(n){return generateErrObj("err: "+n)}var g;g=[];var l={};if(void 0!=f.HCRange){1==c.debug&&log.debug("found HCRange: "+f.HCRange);d=f.HCRange.split(",");if(2<=d.length)d=Number(d[0])<Number(d[1])?Number(d[0])+Math.floor(Math.random()*(Number(d[1])-
Number(d[0]))):Number(d[0]);else return generateErrObj("Catalog data corrupt");0<d&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:d}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.SCRange){1==c.debug&&log.debug("found SCRange: "+f.SCRange);d=f.SCRange.split(",");if(2<=d.length)d=Number(d[0])<Number(d[1])?Number(d[0])+Math.floor(Math.random()*(Number(d[1])-Number(d[0]))):Number(d[0]);else return generateErrObj("Catalog data corrupt");
0<d&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:d}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.Engine)if(1==c.debug&&log.debug("found Engine: "+f.Engine),d=f.Engine.split(","),2<=d.length)d=GiveUserPart("Engine",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Exhaust)if(1==c.debug&&log.debug("found Exhaust: "+f.Exhaust),d=f.Exhaust.split(","),2<=d.length)d=
GiveUserPart("Exhaust",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Gearbox)if(1==c.debug&&log.debug("found Gearbox: "+f.Gearbox),d=f.Gearbox.split(","),2<=d.length)d=GiveUserPart("Gearbox",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Suspension)if(1==c.debug&&log.debug("found Suspension: "+f.Suspension),d=f.Suspension.split(","),2<=d.length)d=GiveUserPart("Suspension",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");
if(void 0!=f.Tires)if(1==c.debug&&log.debug("found Tires: "+f.Tires),d=f.Tires.split(","),2<=d.length)d=GiveUserPart("Tires",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Turbo)if(1==c.debug&&log.debug("found Turbo: "+f.Turbo),d=f.Turbo.split(","),2<=d.length)d=GiveUserPart("Turbo",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.CarCard&&(1==c.debug&&log.debug("found CarCard: "+f.CarCard),void 0!=f.CarCardAmount))if(1==
c.debug&&log.debug("found CarCardAmount: "+f.CarCardAmount),d=f.CarCardAmount.split(","),2<=d.length)d=GiveUserCarCard(f.CarCard,d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");void 0!=f.ChestModel&&1==c.debug&&log.debug("found ChestModel: "+f.ChestModel)}e=[];b={StatisticName:"IAPValue",Value:b};e.push(b);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});g={Inventory:g,VirtualCurrency:l};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:g};
default:1==c.debug&&log.debug("InvalidPurchaseParameter")}e=[];b={StatisticName:"IAPValue",Value:b};e.push(b);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});publishToLiveFeed(currentPlayerId,"boughtIAP",c.bundle)};
handlers.initServerData=function(c){c=[];var k={StatisticName:"TrophyCount",Version:"0",Value:"0"};c.push(k);k={StatisticName:"League",Version:"0",Value:"0"};c.push(k);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});c=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var k={0:"Owned"},a=0;a<c.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[a].ItemInstanceId,Data:k});c=[];c.push("FordFocus");c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c});k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k});k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k});k={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k});k=[];k.push("Engine");k=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});k={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k})};
handlers.levelUp=function(c,k){var a=c.level,b=0,e=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),d={LastLevelReward:0};void 0==e.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:d}):b=e.Data.LastLevelReward.Value;var e=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,h=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics,f=GetValueFromStatistics(h,"Experience",
0);0==f&&(h=[],h.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:h}));for(var h=e.length,g=0;g<e.length;g++)if(!(f>=e[g])){h=g;break}if(Number(a)<=Number(b))return generateFailObj("already got reward for level: "+b);if(Number(a)<=Number(h))b=Number(a),d.LastLevelReward=b,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:d}),a=""+b,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",
PlayFabId:currentPlayerId,ItemIds:a}),2<Number(h)&&publishToLiveFeed(currentPlayerId,"levelUp",Number(h));else return generateFailObj("You haven't reached this level yet");a=server.GetUserInventory({PlayFabId:currentPlayerId});return generateInventoryChange("InventoryUpdated",a)};
handlers.openChest=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<c.levelUpRewardIndex){var b=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),e={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}):b=a.Data.LastLevelReward.Value;var d=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,h=GetValueFromStatistics(a,"Experience",0);0==h&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var f=d.length,a=0;a<d.length;a++)if(!(h>=d[a])){f=a;break}if(Number(c.levelUpRewardIndex)<=Number(b))return generateFailObj("already got reward for level: "+b);if(Number(c.levelUpRewardIndex)<=Number(f))b=Number(c.levelUpRewardIndex),e.LastLevelReward=b,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:e}),a=""+b,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",PlayFabId:currentPlayerId,ItemIds:a}),2<Number(f)&&publishToLiveFeed(currentPlayerId,"levelUp",Number(f));else return generateFailObj("You haven't reached this level yet")}b=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<c.currCost){if("OK"!=checkBalance(c.currType,c.currCost,b.VirtualCurrency.SC,b.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:c.currType,Amount:c.currCost});updateCurrencySpentStatistic(c.currType,c.currCost)}for(var g in c.currencyReq)0<c.currencyReq[g]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g,Amount:c.currencyReq[g]});for(g in c.carCardsRequest)if(c.carCardsRequest.hasOwnProperty(g)){e=!1;for(a=0;a<b.Inventory.length;a++)if(b.Inventory[a].ItemId==g&&"CarCards"==b.Inventory[a].CatalogVersion){e=void 0==b.Inventory[a].CustomData?Number(c.carCardsRequest[g]):void 0==b.Inventory[a].CustomData.Amount?
Number(c.carCardsRequest[g]):isNaN(Number(b.Inventory[a].CustomData.Amount))?Number(c.carCardsRequest[g]):Number(b.Inventory[a].CustomData.Amount)+Number(c.carCardsRequest[g]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[g],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:c.carCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}for(g in c.partCardsRequest)if(c.partCardsRequest.hasOwnProperty(g)){e=!1;for(a=0;a<b.Inventory.length;a++)if(b.Inventory[a].ItemId==g&&"PartCards"==b.Inventory[a].CatalogVersion){e=void 0==b.Inventory[a].CustomData?Number(c.partCardsRequest[g]):void 0==b.Inventory[a].CustomData.Amount?Number(c.partCardsRequest[g]):isNaN(Number(b.Inventory[a].CustomData.Amount))?Number(c.partCardsRequest[g]):Number(b.Inventory[a].CustomData.Amount)+Number(c.partCardsRequest[g]);
e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[g],a=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:c.partCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}g=server.GetUserInventory({PlayFabId:currentPlayerId});c.chestId&&0>=c.levelUpRewardIndex&&
(b=UpdateExperience("Chests",c.chestId,"xpGain",0,!0),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["ChestsOpened"]}).Statistics,e=Number(GetValueFromStatistics(a,"ChestsOpened",0)),e++,a=[],a.push({StatisticName:"ChestsOpened",Value:e}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}),g.Experience=b);"DiamondChest"!=c.chestId&&"BigGoldChest"!=c.chestId&&"BigSilverChest"!=c.chestId||publishToLiveFeed(currentPlayerId,"unlockedChest",c.chestId);return generateInventoryChange("InventoryUpdated",
g)};
handlers.openFreeChest=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["ChestFreeStatus"]});if(void 0==b.Data.ChestFreeStatus)return generateErrObj("No Chest Data found!");for(var a=JSON.parse(b.Data.ChestFreeStatus.Value),e=-1,d=a.length-1;0<=d;d--)if(1==a[d].status||Number(a[d].TimeUntilArrival)<=Math.floor((new Date).getTime()/1E3)){log.debug("we found a free chest");e=d;break}if(-1==
e)return generateFailObjCustom("FreeSlotsInfo",JSON.parse(b.Data.ChestFreeStatus.Value));b=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});d=0;0!=b.Statistics.length&&(d=b.Statistics[0].Value);for(var d=Number(d),b=Number(calculateLeague(d)),h=server.GetCatalogItems({CatalogVersion:"Chests"}),f,d=0;d<h.Catalog.length;d++)if("FreeChest"==h.Catalog[d].ItemId){f=JSON.parse(h.Catalog[d].CustomData);break}if(void 0==f)return generateErrObj("Could not find chest with id: FreeChest in the Chests catalog, or this chest's custom data is undefined");
d=Number(f.hoursToOpen.split(",")[0]);if(isNaN(d))return generateErrObj("FreeChest open time info is invalid");h=Math.floor(Number((new Date).getTime())/1E3);d=Math.floor(h+3600*d);a[e].status=0;a[e].TimeUntilArrival=d;e=JSON.stringify(a);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestFreeStatus:e}});f=GenerateChestBounty(currentPlayerId,"FreeChest",b,f);e=server.GetUserInventory({PlayFabId:currentPlayerId});return{Result:"OK",ChestBounty:f,FreeSlotsInfo:a,InventoryChange:e}};
handlers.purchaseBMItem=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>c.itemId||3<c.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+c.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),b=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+c.itemId].Value.split("_"),e=b.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var d;d=2>c.itemId?"PartCards":"CarCards";var h=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),e=checkBalance(a[1],h,e,e);if("OK"!=e)return e;for(var f,g,e=0;e<b.Inventory.length;e++)if(b.Inventory[e].ItemId==a[0]&&b.Inventory[e].CatalogVersion==d){f=b.Inventory[e].ItemInstanceId;void 0===b.Inventory[e].CustomData?g={Amount:1}:void 0===b.Inventory[e].CustomData.Amount?g={Amount:1}:(g=Number(b.Inventory[e].CustomData.Amount)+1,isNaN(g)&&(g=1),g={Amount:g});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:f,Data:g});break}void 0===f&&(f=[],f.push(a[0]),f=server.GrantItemsToUser({CatalogVersion:d,PlayFabId:currentPlayerId,ItemIds:f}).ItemGrantResults[0].ItemInstanceId,void 0===f?generateErrObj("grantRequest denied"):(g={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:g})));f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:h});updateCurrencySpentStatistic(a[1],h);h=a[0]+"_"+a[1]+"_"+a[2]+"_"+
(parseInt(a[3])+1)+"_"+a[4];b={};b["BMItem"+c.itemId]=h;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});g=[{ItemId:a[0],CatalogVersion:d,CustomData:g}];d={};d[f.VirtualCurrency]=f.Balance;a=c.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];e={Inventory:g,VirtualCurrency:d};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:e,BMItemChange:a}};
handlers.purchaseItems=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=server.GetUserInventory({PlayFabId:currentPlayerId}),e=b.VirtualCurrency.SC,d=b.VirtualCurrency.HC;switch(c.purchaseType){case "carUpgrade":return upgradeCar(c,k,b,e,d);case "partUpgrade":return upgradePart(c,k,b,e,d);case "custPurchase":for(var h=server.GetCatalogItems({CatalogVersion:"Customization"}),f,g=0,a="SC",l=0;l<h.Catalog.length;l++)if(h.Catalog[l].ItemId==c.custId){f=
h.Catalog[l];cardInfo=JSON.parse(h.Catalog[l].CustomData);g=c.custVal+",Cost";a=cardInfo[c.custVal+",Curr"];g=cardInfo[g];d=checkBalance(a,g,e,d);if("OK"!=d)return d;break}if(void 0==f)return generateErrObj("Customization does not exist in catalog.");for(var n,v,l=0;l<b.Inventory.length;l++)if(b.Inventory[l].ItemId==c.custId){n=b.Inventory[l];v=b.Inventory[l].ItemInstanceId;if(void 0!=n.CustomData&&String(c.custVal)in n.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
n){log.info("user doesn't have customization category. Granting ... ");d=[];d.push(c.custId);d=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:d});if(0==d.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");v=d.ItemGrantResults[0].ItemInstanceId}d={};d[String(c.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:v,Data:d});v=[{ItemId:c.custId,
CatalogVersion:"Customization",CustomData:d}];0<g?(d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:g}),updateCurrencySpentStatistic(a,g),a={},a[d.VirtualCurrency]=d.Balance,l={Inventory:v,VirtualCurrency:a}):l={Inventory:v};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":g=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});v=!1;for(l=a=0;l<g.Catalog.length;l++)if(g.Catalog[l].ItemId==c.packId){a=g.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(g.Catalog[l].CustomData);v=!0;break}if(0==v)return generateErrObj("pack with ID: "+c.packId+" not found in catalog.");if(0>=a)return generateErrObj("pack with ID: "+c.packId+" shouldn't have negative cost.");if(a>d)return generateFailObj("Not enough HC.");d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:a});updateCurrencySpentStatistic("HC",a);g=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});
a={};a[g.VirtualCurrency]=g.Balance;a[d.VirtualCurrency]=d.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:a});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(c){c=CheckMaintenanceAndVersion(c);return"OK"!=c?generateMaintenanceOrUpdateObj(c):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(c){c=server.GetUserInventory({PlayFabId:currentPlayerId});var k=Number(c.VirtualCurrency.SC);if(isNaN(k)||0>k)k=0;var a=Number(c.VirtualCurrency.HC);if(isNaN(a)||0>a)a=0;var b=[];b.push({StatisticName:"CurrentMoney",Version:"0",Value:k});b.push({StatisticName:"CurrentGold",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});for(var k=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),
b=!1,e=0;e<c.Inventory.length;e++)if("CarsProgress"==c.Inventory[e].CatalogVersion){var b=!0,d=checkCarDataValidity(c.Inventory[e],k);if("PlayFabError"==d||void 0===d)return generateErrObj("PlayfabError");"OK"==d?log.debug("Data for "+c.Inventory[e].ItemId+" OK"):c.Inventory[e].CustomData=d;c.Inventory[e].CustomData.Pr=recalculateCarPr(c.Inventory[e].CustomData,c.Inventory[e].ItemId,k,a);d={};d.Pr=c.Inventory[e].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[e].ItemInstanceId,
Data:d})}return!1===b?(c=[],c.push("FordFocus"),c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c}),k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k}),k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,
Data:k}),k={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k}),generateErrObj("UserHasNoCars ... reiniting")):c};
handlers.retrieveBlackMarket=function(c,k){var a=CheckMaintenanceAndVersion(c);if(!0===c.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=[];b.push("BMTime");for(var e=0;4>e;e++)b.push("BMItem"+e);e=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:b});if(void 0===e.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var b=new Date,d=[];d.push("BlackMarketResetMinutes");d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:d});if(!0===c.reset){a="HC";e=200;b=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==b.Data.BlackMarketResetCost&&(e=b.Data.BlackMarketResetCost.split("_"),a=e[0],e=Number(e[1]));if(0<e){b=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,e,b.VirtualCurrency.SC,b.VirtualCurrency.HC))return generateFailObj("not enough money");b=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:e});updateCurrencySpentStatistic(a,e);a=GenerateBlackMarket(currentPlayerId);e={};e[b.VirtualCurrency]=b.Balance;e={VirtualCurrency:e};
a.InventoryChange=e;return a}return GenerateBlackMarket(currentPlayerId)}return b.getTime()-parseInt(e.Data.BMTime.Value)>6E4*parseInt(d.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,e),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,e)};
handlers.rewardUsers=function(c,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,b=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),e=0;0>=b&&(a=Number(a)/3E3,e=Number(Math.floor(800*a)));b=Number(b)+e;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:b}]});return b};
handlers.setMainCar=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var a=server.GetUserInventory({PlayFabId:currentPlayerId}),b={},e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==c.carId&&"CarsProgress"==a.Inventory[e].CatalogVersion){b.carId=a.Inventory[e].ItemId;b.carData=a.Inventory[e].CustomData;updateUserProfileInfo(currentPlayerId,b);break}};
function updateProfileCar(c,k,a){a=server.GetUserReadOnlyData({PlayFabId:a,Keys:["UserProfileInfo"]});void 0!=a.Data&&void 0!=a.Data.UserProfileInfo&&void 0!=a.Data.UserProfileInfo.Value&&JSON.parse(a.Data.UserProfileInfo.Value).CarData.carId==c.carId&&handlers.setMainCar(c,k)}
handlers.skipTutorial=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]}),a=0;0!=b.Statistics.length&&(a=b.Statistics[0].Value);a=Number(a);0>=a&&(a=1);b=[];b.push({StatisticName:"TrophyCount",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});return{trophies:a}};
handlers.slotChestOperation=function(c,k){var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["ChestSlotsStatus"]});if(void 0==a.Data.ChestSlotsStatus)return generateErrObj("No Chest Data found!");var b=JSON.parse(a.Data.ChestSlotsStatus.Value);if(Number(c.slotIndex)>=b.length||0>Number(c.slotIndex))return generateErrObj("Invalid slot index");var e=c.operation;if("Empty"==b[Number(c.slotIndex)].status)return generateFailObjCustom("ChestSlotInfo",JSON.parse(a.Data.ChestSlotsStatus.Value));
var d=server.GetCatalogItems({CatalogVersion:"Chests"});switch(e){case "order":for(e=0;e<b.length;e++)if("Incoming"==b[e].status&&b[e].arrivalTimeStamp>Math.floor((new Date).getTime()/1E3))return generateFailObjCustom("ChestSlotInfo",JSON.parse(a.Data.ChestSlotsStatus.Value));if("Occupied"!=b[Number(c.slotIndex)].status)return generateFailObjCustom("ChestSlotInfo",JSON.parse(a.Data.ChestSlotsStatus.Value));b[Number(c.slotIndex)].status="Incoming";a=new Date;b[Number(c.slotIndex)].orderTimeStamp=Math.floor(Number(a.getTime())/
1E3);for(var h,f,e=0;e<d.Catalog.length;e++)d.Catalog[e].ItemId==b[Number(c.slotIndex)].chestId&&(f=JSON.parse(d.Catalog[e].CustomData),a=f.hoursToOpen.split(","),h="0"==b[Number(c.slotIndex)].chestLeague?Number(a[0]):Number(a[Math.min(Number(b[Number(c.slotIndex)].chestLeague)-1,a.length-1)]));log.debug("hoursToOpen: "+h);b[Number(c.slotIndex)].arrivalTimeStamp=Number(b[Number(c.slotIndex)].orderTimeStamp)+Math.floor(3600*h);if(void 0==f)return generateErrObj("Could not find chest with id: "+b[Number(c.slotIndex)].chestId+
" in the Chests catalog, or this chest's custom data is undefined");d=JSON.stringify(b);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestSlotsStatus:d}});return f={Result:"OK",ChestSlotInfo:b};case "rush":if("Arrived"==b[Number(c.slotIndex)].status)return generateFailObjCustom("ChestSlotInfo",JSON.parse(a.Data.ChestSlotsStatus.Value));for(var g,e=0;e<d.Catalog.length;e++)d.Catalog[e].ItemId==b[Number(c.slotIndex)].chestId&&(f=JSON.parse(d.Catalog[e].CustomData),g=Number(f.priceToUnlock),
a=f.hoursToOpen.split(","),h=0==b[Number(c.slotIndex)].chestLeague?Number(a[0]):Number(a[Math.min(Number(b[Number(c.slotIndex)].chestLeague),a.length-1)]));a=new Date;d="Occupied"==b[Number(c.slotIndex)].status?1:(Number(b[Number(c.slotIndex)].arrivalTimeStamp)-Math.floor(Number(a.getTime())/1E3))/(3600*h);log.debug("interpolator: "+d);if(0>=d)b[Number(c.slotIndex)].status="Arrived",b[Number(c.slotIndex)].arrivalTimeStamp=0,f={Result:"OK",ChestSlotInfo:b};else{d=Math.floor(1+d*(g-1));log.debug("rushPrice: "+
d);f=server.GetUserInventory({PlayFabId:currentPlayerId});if(d>f.VirtualCurrency.HC)return generateErrObj("Not enough HC.");b[Number(c.slotIndex)].status="Arrived";b[Number(c.slotIndex)].arrivalTimeStamp=0;b[Number(c.slotIndex)].orderTimeStamp=1;f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:d});updateCurrencySpentStatistic("HC",d);d={};d[f.VirtualCurrency]=f.Balance;e={VirtualCurrency:d};f={Result:"OK",InventoryChange:e,ChestSlotInfo:b}}d=JSON.stringify(b);
server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestSlotsStatus:d}});return f;case "open":g=Number(c.slotIndex);for(e=0;e<d.Catalog.length;e++)if(d.Catalog[e].ItemId==b[Number(c.slotIndex)].chestId){f=JSON.parse(d.Catalog[e].CustomData);break}if(void 0==f)return generateErrObj("Could not find chest with id: "+b[Number(c.slotIndex)].chestId+" in the Chests catalog, or this chest's custom data is undefined");if("Empty"==b[g].status||"Occupied"==b[g].status||"Incoming"==b[g].status&&
b[g].arrivalTimeStamp>Math.floor((new Date).getTime()/1E3))return generateFailObjCustom("ChestSlotInfo",JSON.parse(a.Data.ChestSlotsStatus.Value));d=GenerateChestBounty(currentPlayerId,b[g].chestId,b[g].chestLeague,f);f=server.GetUserInventory({PlayFabId:currentPlayerId});a=UpdateExperience("Chests",b[g].chestId,"xpGain",0,!0);f.Experience=a;f={Result:"OK",InventoryChange:f,ChestBounty:d};b[g].chestId=null;b[g].chestLeague=0;b[g].status="Empty";b[g].orderTimeStamp=0;b[g].arrivalTimeStamp=0;d=JSON.stringify(b);
server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestSlotsStatus:d}});return f}};
function GenerateChestBounty(c,k,a,b){var e=Number(a)+Number(b.arenasAdvance),d=0,h=Number(b.maxCardStacks);k={};var f;f=b.guaranteedSC.split(",");switch(f.length){case 1:f=Number(f[0]);break;case 2:f=Number(f[0])+Math.floor(Math.random()*Math.abs(Number(f[1])-Number(f[0])));break;default:f=0}0<f&&(k.SC=f,d++);f=b.guaranteedHC.split(",");switch(f.length){case 1:f=Number(f[0]);break;case 2:f=Number(f[0])+Math.floor(Math.random()*Math.abs(Number(f[1])-Number(f[0])));break;default:f=0}0<f&&(k.HC=f,d++);
var g=server.GetCatalogItems({CatalogVersion:"CarCards"}),l=server.GetCatalogItems({CatalogVersion:"PartCards"}),n,v=[],w=[],u=[];for(f=0;f<g.Catalog.length;f++)if(n=JSON.parse(g.Catalog[f].CustomData),void 0!=n&&void 0!=n.unlockedAtRank&&!(Number(n.unlockedAtRank)>Number(e))&&void 0!=n.rarity)switch(Number(n.rarity)){case 0:v.push(g.Catalog[f].ItemId);break;case 1:w.push(g.Catalog[f].ItemId);break;case 2:u.push(g.Catalog[f].ItemId);break;default:u.push(g.Catalog[f].ItemId)}var x;n=[];var C=[],D=
[];for(f=0;f<l.Catalog.length;f++)if(x=JSON.parse(l.Catalog[f].CustomData),void 0!=x.rarity)switch(Number(x.rarity)){case 0:n.push(l.Catalog[f].ItemId);break;case 1:C.push(g.Catalog[f].ItemId);break;case 2:D.push(g.Catalog[f].ItemId);break;default:D.push(g.Catalog[f].ItemId)}g=!1;l=0;x=b.guaranteedCarsPerRarity.split(",");for(f=0;f<x.length;f++)l+=Number(x[f]);0<Number(l)&&(g=!0);var m,q,p,y,z,B;if(1==g){var A=Number(Math.floor(.55*(h-d)));0>=A&&(A=1);for(var t=0;3>t;t++)if(!(0>=Number(x[t]))){var H=
Math.floor(Number(x[t])/l*A);0>=H&&(H=1);for(f=0;f<Number(x[t]);f++){var G;switch(t){case 0:g=void 0==m?0:Number(m.length);void 0==g&&(g=0);g=g<H;G=GetRandomCard(v,e);"ERROR"!=G&&(m=AddCardToListOfStacks("CarCards",m,G,g));break;case 1:g=void 0==q?0:Number(q.length);void 0==g&&(g=0);g=g<H;G=GetRandomCard(w,e);"ERROR"!=G&&(q=AddCardToListOfStacks("CarCards",q,G,g));break;case 2:g=void 0==p?0:Number(p.length),void 0==g&&(g=0),g=g<H,G=GetRandomCard(u,e),"ERROR"!=G&&(p=AddCardToListOfStacks("CarCards",
p,G,g))}}}}void 0!=m&&(d+=m.length);void 0!=q&&(d+=q.length);void 0!=p&&(d+=p.length);l=b.partRarityDroprates.split(",");for(f=0;f<l.length;f++);x=b.carRarityDroprates.split(",");for(f=0;f<x.length;f++);for(f=0;f<Number(b.randomCardsReward);f++)if(g=d<h,70>Math.floor(100*Math.random()))switch(A=WeightedRandom(l),A){case 0:A=GetRandomCard(n,e);"ERROR"!=A&&(t=void 0==y?0:y.length,void 0==t&&(t=0),y=AddCardToListOfStacks("PartCards",y,A,g),y.length>t&&d++);break;case 1:A=GetRandomCard(C,e);"ERROR"!=
A&&(t=void 0==z?0:z.length,void 0==t&&(t=0),z=AddCardToListOfStacks("PartCards",z,A,g),z.length>t&&d++);break;case 2:A=GetRandomCard(D,e),"ERROR"!=A&&(t=void 0==B?0:B.length,void 0==t&&(t=0),B=AddCardToListOfStacks("PartCards",B,A,g),B.length>t&&d++)}else switch(A=WeightedRandom(x),A){case 0:A=GetRandomCard(v,e);"ERROR"!=A&&(t=void 0==m?0:m.length,void 0==t&&(t=0),m=AddCardToListOfStacks("CarCards",m,A,g),m.length>t&&d++);break;case 1:A=GetRandomCard(w,e);"ERROR"!=A&&(t=void 0==q?0:q.length,void 0==
t&&(t=0),q=AddCardToListOfStacks("CarCards",q,A,g),q.length>t&&d++);break;case 2:A=GetRandomCard(u,e),"ERROR"!=A&&(t=void 0==p?0:p.length,void 0==t&&(t=0),p=AddCardToListOfStacks("CarCards",p,A,g),p.length>t&&d++)}b=[];void 0!=m&&(b=b.concat(m));void 0!=q&&(b=b.concat(q));void 0!=p&&(b=b.concat(p));void 0!=y&&(b=b.concat(y));void 0!=z&&(b=b.concat(z));void 0!=B&&(b=b.concat(B));f=server.GetCatalogItems({CatalogVersion:"Balancing"});f=JSON.parse(f.Catalog[0].CustomData);a=Number(f.ArenaBonuses[Math.max(Number(a),
10)]);if(0<a)for(f=0;f<b.length;f++)b[f].CustomData.Amount=Math.floor(Number(b[f].CustomData.Amount)+a/100*Number(b[f].CustomData.Amount));void 0!=k.HC&&0<Number(k.HC)&&server.AddUserVirtualCurrency({PlayFabId:c,VirtualCurrency:"HC",Amount:Number(k.HC)});void 0!=k.SC&&0<Number(k.SC)&&server.AddUserVirtualCurrency({PlayFabId:c,VirtualCurrency:"SC",Amount:Number(k.SC)});a=server.GetUserInventory({PlayFabId:c});m=!1;for(f=0;f<b.length;f++){for(p=0;p<a.Inventory.length;p++)if(m=!1,a.Inventory[p].ItemId==
b[f].ItemId&&a.Inventory[p].CatalogVersion==b[f].CatalogVersion){m=void 0==a.Inventory[p].CustomData?Number(b[f].CustomData.Amount):void 0==a.Inventory[p].CustomData.Amount?Number(b[f].CustomData.Amount):isNaN(Number(a.Inventory[p].CustomData.Amount))?Number(b[f].CustomData.Amount):Number(a.Inventory[p].CustomData.Amount)+Number(b[f].CustomData.Amount);q={Amount:m};server.UpdateUserInventoryItemCustomData({PlayFabId:c,ItemInstanceId:a.Inventory[p].ItemInstanceId,Data:q});m=!0;break}0==m&&(p=server.GrantItemsToUser({CatalogVersion:b[f].CatalogVersion,
PlayFabId:c,ItemIds:[b[f].ItemId]}),q={Amount:b[f].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:c,ItemInstanceId:p.ItemGrantResults[0].ItemInstanceId,Data:q}))}return{Inventory:b,VirtualCurrency:k}}
function grantUserChest(c,k){var a=server.GetCatalogItems({CatalogVersion:"Chests"}),b=server.GetUserInternalData({PlayFabId:c,Keys:["ChestSlotsStatus"]});if(void 0==b.Data.ChestSlotsStatus)return generateErrObj("No Chest Data found!");for(var b=JSON.parse(b.Data.ChestSlotsStatus.Value),e=-1,d=0;d<b.length;d++)if("Empty"==b[d].status){e=d;break}if(!(0>e)){log.debug("emptySlotFound: "+e);var d=server.GetPlayerStatistics({PlayFabId:c,StatisticNames:["TrophyCount"]}),h=0;0!=d.Statistics.length&&(h=d.Statistics[0].Value);
h=Number(h);h=Number(calculateLeague(h));switch(k){case "endGameNormal":for(var f,g=0,l=0,n=[],d=0;d<a.Catalog.length;d++)f=JSON.parse(a.Catalog[d].CustomData),0>=Number(f.dropChance)||(g+=10*Number(f.dropChance),f=l,l=g,n.push({chestId:a.Catalog[d].ItemId,leftRange:f,rightRange:l}));if(0>=n.length)b[e].chestId="SilverChest";else{a=Math.floor(Math.random()*g);g="SilverChest";for(d=0;d<n.length;d++)if(!(Number(n[d].rightRange)<=Number(a)||Number(n[d].leftRange)>Number(a))){g=n[d].chestId;break}b[e].chestId=
g}b[e].chestLeague=h;b[e].status="Occupied";b[e].orderTimeStamp=0;b[e].arrivalTimeStamp=0;break;case "endGameFreeWin":b[e].chestId="QuickChest";b[e].chestLeague=h;b[e].status="Occupied";b[e].orderTimeStamp=0;b[e].arrivalTimeStamp=0;break;case "tutorial":b[e].chestId="QuickChest";b[e].chestLeague=1;b[e].status="Occupied";b[e].orderTimeStamp=0;b[e].arrivalTimeStamp=0;break;default:log.debug("unexpected source, returning from grantChest");return}b=JSON.stringify(b);log.debug("updating ChestSlotsStatus: "+
b);server.UpdateUserInternalData({PlayFabId:c,Data:{ChestSlotsStatus:b}})}}
handlers.startGame=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=server.GetTitleData({Key:"LeagueSubdivisions SubdivisionTrophyRanges TrophyGainRange TrophyLoseRange SubdivisionPrRanges TrophyDifferenceLimit".split(" ")}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TotalGames"]}).Statistics,a=GetValueFromStatistics(a,"TotalGames",0),a=Number(a)+1;1==c.debug&&log.debug("totalGamesStartedIs: "+a);var e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]}),d=0;0!=e.Statistics.length&&(d=e.Statistics[0].Value);for(var d=Number(d),h=JSON.parse(b.Data.SubdivisionTrophyRanges),f=JSON.parse(b.Data.LeagueSubdivisions),g=JSON.parse(b.Data.SubdivisionPrRanges),e=JSON.parse(b.Data.TrophyDifferenceLimit),l=Number(e.trophyReadjustRange),n=Number(e.maxDifference),v=e.subDivisionsToExclude,w=43,u=43,x,C=b.Data.TrophyGainRange.split("_"),D=b.Data.TrophyLoseRange.split("_"),e=Number(C[0]),b=Number(C[1]),C=Number(D[0]),D=Number(D[1]),
m=0;m<h.subdivisions.length;m++)if(d<Number(h.subdivisions[m])){w=m;m<h.subdivisions.length-1&&(u=m+1);break}x=Number(h.subdivisions[u])-Number(h.subdivisions[w]);0>=x&&(x=400);var q=server.GetTitleInternalData({Keys:"RecSubDivision"+w}).Data["RecSubDivision"+w],p=!1;void 0==q&&(p=!0);var y,z,B,A="noop",t="noop",m=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp","quitLastGame"]});z="false;";void 0!=m.Data.quitLastGame&&(z=m.Data.quitLastGame.Value);u=!1;void 0==z&&(z="false");
"true"==z&&(u=!0);if(void 0==m.Data||void 0==m.Data.lastOpp)t=A="noop";else for(z=m.Data.lastOpp.Value.split(","),m=0;m<z.length;m++)0==m&&(A=z[m]),1==m&&(t=z[m]);y=0==p?JSON.parse(q):[];var H=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];25>y.length&&(p=!0);var G=Array(y.length),I=0,q=Array(y.length);z=0;B=Array(y.length);for(var J=0,m=0;m<y.length;m++)1==p&&(H[5*Number(y[m].e)+Number(y[m].c)]=1),y[m].uId!=currentPlayerId&&(G[I]=y[m],I++,y[m].uId!=A&&(q[z]=y[m],z++,y[m].uId!=t&&(B[J]=y[m],
J++)));if(1==p){p=[];for(m=0;m<H.length;m++)0==H[m]&&p.push(m);p=p[Math.floor(Math.random()*p.length)];m=Math.floor(p/5);p%=5;t=server.GetTitleData({Keys:"MasterUser"});if(void 0!=t.Data.MasterUser&&(t=server.GetUserReadOnlyData({PlayFabId:t.Data.MasterUser,Keys:[m+"_"+p+"_RecPos",m+"_"+p+"_RecRot",m+"_"+p+"_RecHeader"]}),void 0!=t.Data&&void 0!=t.Data[m+"_"+p+"_RecPos"]&&void 0!=t.Data[m+"_"+p+"_RecRot"]&&void 0!=t.Data[m+"_"+p+"_RecHeader"])){f=!0;0==d?(grantUserChest(currentPlayerId,"tutorial"),
d=b,f=!1):d-=C;1>=d&&(d=1);var E=[],d={StatisticName:"TrophyCount",Value:d};E.push(d);d={StatisticName:"League",Value:F};E.push(d);d={StatisticName:"TotalGames",Value:a};E.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:E});a={trophyWin:Math.floor((Number(b)+Number(e))/2),trophyLose:Math.floor((Number(D)+Number(C))/2),quitLastGame:"true"};0==f&&(a.trophyWin=0,a.trophyLose=0);1==u&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});
return{Result:"OK",RecType:"TheStig",PosData:t.Data[m+"_"+p+"_RecPos"].Value,RotData:t.Data[m+"_"+p+"_RecRot"].Value,HeaderData:t.Data[m+"_"+p+"_RecHeader"].Value,TrophyLose:C,TrophyWin:b,Opp:"TheStig"}}}if(0==I)return generateErrObj("no valid recording found for this subdivision");F=G;0<z&&(I=z,F=q);0<J&&(I=J,F=B);q=Math.floor(Math.random()*I);q>=I&&(q=I-1);z=Math.min(I,3);B=Array(z);for(m=0;m<z;m++)B[m]=0>=q?F[m]:q>=I-1?F[I-1-m]:F[q-Math.floor(z/2)+m];F=Math.floor(Math.random()*z);z=B[F].uId;q=
B[F].e;B=B[F].c;J=server.GetUserReadOnlyData({PlayFabId:z,Keys:[q+"_"+B+"_RecPos",q+"_"+B+"_RecRot",q+"_"+B+"_RecHeader"]});if(void 0==J)return generateErrObj("Did not find recording for this user: "+z);var I=server.GetPlayerCombinedInfo({PlayFabId:z,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),p=d,F=Number(calculateLeague(d)),
G="UserGenerated",t=0<F?Number(h.subdivisions[f.leagues[F-1]]):0,H=F>=f.leagues.length-1?2*t:Number(h.subdivisions[f.leagues[F]]);1==c.debug&&log.debug("I bet it will crash after this");h=JSON.parse(J.Data[q+"_"+B+"_RecHeader"].Value);1==c.debug&&log.debug("or not");void 0!=h&&(E=h.Trophies);E=Number(E);y=!0;1==c.debug&&log.debug("Adjusting trophies");if(void 0!=v)for(1==c.debug&&log.debug("excludedSubdivisionsFromTrophyAdjustment: "+v),m=0;m<v.length;m++)if(w==Number(v[m])){1==c.debug&&log.debug("in excluded subdivision: "+
w);y=!1;break}1==y&&Number(Math.abs(p-E))>=n&&(1==c.debug&&log.debug("generating new trophies. Reason: user trophies: "+p+" vs opponent trophies: "+E),E=p-l+Math.floor(Math.random()*l*2),h.Trophies=E,1==c.debug&&log.debug("performing stringify on recordingData header"),J.Data[q+"_"+B+"_RecHeader"].Value=JSON.stringify(h));0>=H-t?(l=D,n=e):Number(Math.abs(p-E))>Number(x)?(l=Math.floor((C+D)/2)-1+Math.floor(3*Math.random()),n=Math.floor((b+e)/2)-1+Math.floor(3*Math.random())):(l=C+Math.floor((D-C)/
2*((p-E)/(H-t)+1)),n=e+Math.floor((b-e)/2*((E-p)/(H-t)+1)));1==c.debug&&log.debug("Opponent's PR is TOO DAMN HIGH! "+h.Pr+" vs "+Number(g.subdivisions[Number(f.leagues[F-1])+1])+". You are in subdivision: "+Number(f.leagues[F-1]+1));h.Pr>Number(g.subdivisions[Number(f.leagues[F-1])+1])&&(l=Math.floor((C+D)/2)-1+Math.floor(3*Math.random()),n=Math.floor((b+e)/2)-1+Math.floor(3*Math.random()),G="MobyDick");e=!0;0==d?(grantUserChest(currentPlayerId,"tutorial"),e=!1,d=b):(d-=Number(l),1>=d&&(d=1));E=[];
d={StatisticName:"TrophyCount",Value:d};E.push(d);d={StatisticName:"League",Value:F};E.push(d);d={StatisticName:"TotalGames",Value:a};E.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:E});a={trophyWin:n,trophyLose:l,lastOpp:z+","+A,quitLastGame:"true"};0==e&&(a.trophyWin=0,a.trophyLose=0);1==u&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:G,PosData:J.Data[q+"_"+B+"_RecPos"].Value,RotData:J.Data[q+
"_"+B+"_RecRot"].Value,HeaderData:J.Data[q+"_"+B+"_RecHeader"].Value,TrophyLose:l,TrophyWin:n,Opp:I.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var b=server.GetUserInventory({PlayFabId:currentPlayerId}),e=[],d="-1",h={},f={PaintJobs:{itemOwned:"no",itemCustData:c.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:c.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:c.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:c.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:c.wsId,carItemId:"WindshieldId"}},a=0;a<b.Inventory.length;a++)b.Inventory[a].ItemId==c.carId&&"CarsProgress"==b.Inventory[a].CatalogVersion&&(d=b.Inventory[a].ItemInstanceId),b.Inventory[a].ItemId in f&&(f[b.Inventory[a].ItemId].itemOwned="yes",f[b.Inventory[a].ItemId].itemCustData in b.Inventory[a].CustomData?h[f[b.Inventory[a].ItemId].carItemId]=f[b.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+b.Inventory[a].ItemId+" "+f[b.Inventory[a].ItemId].itemCustData));if("-1"==
d)return generateFailObj("User does not own car with id: "+c.carId);for(var g in f)f.hasOwnProperty(g)&&"no"==f[g].itemOwned&&e.push(g);if(h=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d,Data:h});updateProfileCar(c,k,currentPlayerId);g=[{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:h}];if(0<e.length)for(e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,
ItemIds:e}),b={0:"Owned"},a=0;a<e.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[a].ItemInstanceId,Data:b});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:g}}};
function upgradeCar(c,k,a,b,e){for(var d=server.GetCatalogItems({CatalogVersion:"CarCards"}),h=!1,f,g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==c.carId&&"CarsProgress"==a.Inventory[g].CatalogVersion){h=!0;f=a.Inventory[g];break}for(var l,g=0;g<d.Catalog.length;g++)if(d.Catalog[g].ItemId==c.carId){l=JSON.parse(d.Catalog[g].CustomData);break}if(void 0===l)return generateErrObj("CardNotFoundForCarwithID: "+c.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===h){var n=parseInt(f.CustomData.CarLvl)+1;if(n>=Number(l.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var v=getObjectValueFromLevel(l,"currCostPerLvl",n),g=checkBalance(l.currType,v,b,e);if("OK"!=g)return g;b=getObjectValueFromLevel(l,"cardCostPerLvl",n);f.CustomData.CarLvl=n;for(var h=!1,w,g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==c.carId&&"CarCards"==a.Inventory[g].CatalogVersion){h=!0;try{if(void 0===a.Inventory[g].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===a.Inventory[g].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(a.Inventory[g].CustomData.Amount)>=b)a.Inventory[g].CustomData.Amount-=b,w={Amount:a.Inventory[g].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[g].ItemInstanceId,Data:w});else return generateFailObj("Insufficient cards for real: "+a.Inventory[g].CustomData.Amount+" vs "+b)}catch(x){return generateFailObj("Insufficient cards")}break}if(!1===
h)return generateFailObj("No cards found");a=recalculateCarPr(f.CustomData,f.ItemId,d,void 0);g={CarLvl:n,Pr:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemInstanceId,Data:g});updateProfileCar(c,k,currentPlayerId);var u;0<v&&(u=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:l.currType,Amount:v}),updateCurrencySpentStatistic(l.currType,v));w=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:w},{ItemId:c.carId,CatalogVersion:"CarsProgress",
CustomData:g}];a={};g={Inventory:w};void 0!=u&&(a[u.VirtualCurrency]=u.Balance,g.VirtualCurrency=a);g.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+l.rarity,n,!0);return generateInventoryChange("InventoryUpdate",g)}h=!1;for(g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==c.carId&&"CarCards"==a.Inventory[g].CatalogVersion){h=!0;try{if(void 0===a.Inventory[g].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===a.Inventory[g].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(a.Inventory[g].CustomData.Amount)>=Number(l.cardCostPerLvl[1]))v=a.Inventory[g].ItemInstanceId,a.Inventory[g].CustomData.Amount-=l.cardCostPerLvl[1],w={Amount:a.Inventory[g].CustomData.Amount};else return generateFailObj("Insufficient cards: "+a.Inventory[g].CustomData.Amount+" vs "+l.cardCostPerLvl[1]+".")}catch(x){return generateFailObj("Insufficient cards: "+x)}break}if(0==h)return generateFailObj("No cards found");g=checkBalance(l.currType,l.currCostPerLvl[1],b,e);if("OK"!=g)return g;
f=[];f.push(c.carId);f=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:f});if(!1===f.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:v,Data:w});0<l.currCostPerLvl[1]&&(u=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:l.currType,Amount:l.currCostPerLvl[1]}),updateCurrencySpentStatistic(l.currType,l.currCostPerLvl[1]));g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:g});g={TiresLvl:"0",TurboLvl:"0",PaintId:l.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,
Data:g});g={PlatesId:"0",WindshieldId:"0",Pr:Number(l.basePr)+l.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:g});d=f=!1;for(g=0;g<a.Inventory.length;g++)if("PaintJobs"==a.Inventory[g].ItemId){d=!0;void 0!=a.Inventory[g].CustomData?l.defaultPaintID in a.Inventory[g].CustomData?f=!0:(n={},n[l.defaultPaintID]="Owned"):(n={},n[l.defaultPaintID]="Owned");void 0!=n&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.Inventory[g].ItemInstanceId,Data:n});break}0==d&&(paintToGive=[],paintToGive.push("PaintJobs"),a=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),n={},n[l.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:n}));g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:l.defaultPaintID,
DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:Number(l.basePr)+l.prPerLvl[1]};w=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:w},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:g}];0==f&&(a={},a[l.defaultPaintID]="Owned",w.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:a}));a={};g={Inventory:w};void 0!=u&&(a[u.VirtualCurrency]=u.Balance,g.VirtualCurrency=a);updateProfileCar(c,k,currentPlayerId);g.Experience=UpdateExperience("Balancing","BalancingItem",
"Car_"+l.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",g)}
function upgradePart(c,k,a,b,e){for(var d=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),h=!1,f=0;f<d.Catalog.length;f++)if(d.Catalog[f].ItemId==c.carId){h=!0;break}if(!1===h)return generateErrObj("car with ID: "+c.carId+" not found in catalog.");for(var d=server.GetCatalogItems({CatalogVersion:"PartCards"}),h=!1,g,f=0;f<d.Catalog.length;f++)if(d.Catalog[f].ItemId==c.partId){g=JSON.parse(d.Catalog[f].CustomData);h=!0;break}if(0==h)return generateErrObj("part with ID: "+c.partId+" not found in catalog.");
for(var h=!1,l,f=0;f<a.Inventory.length;f++)if(a.Inventory[f].ItemId==c.carId&&"CarsProgress"==a.Inventory[f].CatalogVersion){h=!0;l=a.Inventory[f];break}if(!1===h)return generateFailObj("car with ID: "+c.carId+" not found in user inventory.");for(var n=!1,h=0,v={},f=0;f<a.Inventory.length;f++)if(a.Inventory[f].ItemId==c.partId&&"PartCards"==a.Inventory[f].CatalogVersion){var n=!0,w={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},
h=parseInt(l.CustomData[w[c.partId]])+1;if(h>=Number(g.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var u=getObjectValueFromLevel(g,"cardCostPerLvl",h),x=getObjectValueFromLevel(g,"currCostPerLvl",h);v[w[c.partId]]=h;l.CustomData[w[c.partId]]=h;var C;b=checkBalance(g.currType,x,b,e);if("OK"!=b)return b;try{if(void 0!==a.Inventory[f].CustomData&&void 0!==a.Inventory[f].CustomData.Amount&&a.Inventory[f].CustomData.Amount>=u)a.Inventory[f].CustomData.Amount-=u,C={Amount:a.Inventory[f].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[f].ItemInstanceId,Data:C});else return generateFailObj("Insufficient cards")}catch(m){return generateFailObj("Insufficient cards")}break}if(0==n)return generateFailObj("Part not found");var D;0<x&&(D=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g.currType,Amount:x}),updateCurrencySpentStatistic(g.currType,x));f=recalculateCarPr(l.CustomData,l.ItemId,void 0,d);v.Pr=f;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:l.ItemInstanceId,Data:v});l={};f={Inventory:[{ItemId:c.partId,CatalogVersion:"PartCards",CustomData:C},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:v}]};void 0!==D&&(l[D.VirtualCurrency]=D.Balance,f.VirtualCurrency=l);updateProfileCar(c,k,currentPlayerId);f.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+g.rarity,h,!0);return generateInventoryChange("InventoryUpdatePart",f)};
