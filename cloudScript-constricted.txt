function checkCarDataValidity(c,h){if(void 0==c.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});for(var b=0,e=0;e<h.Catalog.length;e++)if(h.Catalog[e].ItemId==c.ItemId){var d=
JSON.parse(h.Catalog[e].CustomData),b=parseInt(d.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:b};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a})}catch(k){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:b}}return"OK"}function generateFailObjCustom(c,h){return{Result:"Failed",propName:h}}
function generateFailObj(c){return{Result:"Failed",Message:c}}function generateErrObj(c){return{Result:"Error",Message:c}}
function CheckMaintenanceAndVersion(c){var h=!1,a="A.0.0.1";void 0!=c&&(h=c.debug,a=c.cVersion);if(void 0==a)return"update";c=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var b=c.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(b=c.Data.MinimumGameVersionActual_IOS);if(void 0==b)return"maintenance";for(var e=!1,b=b.split("."),d=0;3>d;d++){var k=0;a.length>d+1&&(k=Number(a[d+1]));var f=0;b.length>d&&
(f=Number(b[d]));if(k!=f){k<f&&(e=!0);break}}return 1==e?"update":1==h?"OK":c.Data.Maintenance?"false"==c.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(c){return"maintenance"==c?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(c,h){return{Result:"OK",Message:c,InventoryChange:h}}
function publishToLiveFeed(c,h,a){var b=server.GetTitleData({Keys:["LiveFeedDictionary"]});if(void 0!=b.Data.LiveFeedDictionary){var e=JSON.parse(b.Data.LiveFeedDictionary),d=b=0,k=1,f=1,g=h,l=a,n=0,w=0,v=!1,u={};u.ts=(new Date).getTime();try{n=Number(e.MetaData.HealthDecayPerMinute),w=Number(e.MetaData.MaxFeedHistory)}catch(t){log.debug("invalid metadata");return}try{var b=b+Number(e.ActorData.Base.health),d=d+Number(e.ActorData.Base.damage),x=server.GetPlayerStatistics({PlayFabId:c,StatisticNames:["IAPValue",
"Trophies"]}).Statistics,B=Number(GetValueFromStatistics(x,"IAPValue",0)),C=Number(GetValueFromStatistics(x,"Trophies",0)),b=b+Number(e.ActorData.IAPValue.health)*B,d=d+Number(e.ActorData.IAPValue.damage)*B,b=b+Number(e.ActorData.Trophies.health)*C,d=d+Number(e.ActorData.Trophies.damage)*C}catch(t){log.debug("error at liveFeed actor: "+t);return}try{void 0!=e.ActionsData[h]&&(b+=Number(e.ActionsData[h].health),d+=Number(e.ActionsData[h].damage),g=e.ActionsData[h].id,"true"==e.ActionsData[h].isUnique&&
(v=!0),e.ActionsData[h].valMultiplier&&(k=Number(e.ActionsData[h].valMultiplier.health),f=Number(e.ActionsData[h].valMultiplier.damage)))}catch(t){log.debug("error at liveFeed action: "+t);return}try{1==isNaN(a)?void 0!=e.DirectObjectData[a]&&(b+=Number(e.DirectObjectData[a].health),d+=Number(e.DirectObjectData[a].damage),l=e.DirectObjectData[a].id):(b+=k*Number(a),d+=f*Number(a),l=a)}catch(t){log.debug("error at liveFeed object: "+t);return}h=server.GetPlayerCombinedInfo({PlayFabId:c,InfoRequestParameters:{GetUserAccountInfo:!0}});
var m;try{m=h.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}catch(t){log.debug("error at liveFeed nameget: "+t);return}log.debug("10");u.health=b;u.currentHealth=b;u.UserId=c;u.UserName=m;u.Action=g;u.Object=l;c=server.GetTitleInternalData({Keys:["LiveFeed"]});log.debug("11");if(void 0!=c.Data.LiveFeed&&(log.debug("12"),c=JSON.parse(c.Data.LiveFeed),"OK"==ApplyDamageOverTimeToFeed(c,n))){var q;try{if(Number(w)<=Number(c.length)||1==v){log.debug("13");q=Array(c.length);for(var n=!1,p=0;p<c.length;p++)if(c[p].Action==
g&&1==v||c[p].currentHealth<d&&0==v){n=!0;c.splice(p,1);break}0==n&&c.splice(q.length-1,1);for(p=0;p<c.length;p++)if(c[p].currentHealth<b){c.splice(p,0,u);q=c;break}}else for(q=Array(c.length+1),q[c.length]=u,p=0;p<c.length;p++)if(q[p]=c[p],c[p].currentHealth<b&&0==v||c[p].Action==g&&1==v){for(q[p]=u;p<c.length;p++)q[p+1]=c[p];break}}catch(t){log.debug("found error at feed replace/add: "+t);return}q=JSON.stringify(q);server.SetTitleInternalData({Key:"LiveFeed",Value:q})}}}
function ApplyDamageOverTimeToFeed(c,h){if(void 0==c.length)return"Error";for(var a=(new Date).getTime(),b=0,e=0;e<c.length;e++)try{b=Math.abs(Number(c[e].ts)-Number(a))*Number(h),b/=6E4,b=Math.floor(b),c[e].currentHealth=Math.max(Number(c[e].health)-Number(b),0)}catch(d){c.splice(e,1)}return"OK"}
function updateUserProfileInfo(c,h){var a={};a.CarData=h;log.debug("carInfo is: "+h);var b=[];b.push({Key:"UserProfileInfo",Value:JSON.stringify(a)});a=server.UpdateUserReadOnlyData({PlayFabId:c,Data:b,Permission:"Public"});log.debug("playerData is: "+a)}
function updateCurrencySpentStatistic(c,h){var a=[],b,e=0,d=Number(h);if(!(isNaN(d)||0>=d)&&("SC"==c&&(b="MoneySpent"),"HC"==c&&(b="GoldSpent"),void 0!=b)){var k=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:[b]});0<k.Statistics.length&&(e=Number(k.Statistics[0].Value));a.push({StatisticName:b,Version:"0",Value:e+d});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a})}}
function checkBalance(c,h,a,b){if("SC"==c){if(a<h)return generateFailObj("NotEnoughSC")}else if(b<h)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(c){var h=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==h.Data.LeagueSubdivisions||void 0==h.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(h.Data.LeagueSubdivisions).leagues,h=JSON.parse(h.Data.SubdivisionTrophyRanges).subdivisions,b=0;b<a.length;b++)if(!(Number(c)>Number(h[a[b]])))return b;return a.length-1}
function recalculateCarPr(c,h,a,b){var e=0,d;d=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<d.Catalog.length;a++)if(d.Catalog[a].ItemId==h){e=JSON.parse(d.Catalog[a].CustomData);e=parseInt(e.basePr)+getObjectValueFromLevel(e,"prPerLvl",c.CarLvl);break}b=void 0===b?server.GetCatalogItems({CatalogVersion:"PartCards"}):b;c={Exhaust:c.ExhaustLvl,Engine:c.EngineLvl,Gearbox:c.GearboxLvl,Suspension:c.SuspensionLvl,Tires:c.TiresLvl,Turbo:c.TurboLvl};for(a=0;a<b.Catalog.length;a++)h=
JSON.parse(b.Catalog[a].CustomData),e+=getObjectValueFromLevel(h,"prPerLvl",Number(c[b.Catalog[a].ItemId]));return e}
function GenerateBlackMarket(c){var h=1,a=server.GetPlayerStatistics({PlayFabId:c,StatisticNames:["League"]});0!=a.Statistics.length&&(h=a.Statistics[0].Value.toString());0>=Number(h)&&(h=1);for(var b=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:c,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),e=JSON.parse(a.Data.BlackMarketRarityBias),d,k=[],f=[],g=[],l=0;l<b.Catalog.length;l++){d=JSON.parse(b.Catalog[l].CustomData);if(void 0==d)return generateErrObj("Part card "+
b.Catalog[l].ItemId+" has no custom data.");0==d.rarity&&k.push(b.Catalog[l].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy);1==d.rarity&&f.push(b.Catalog[l].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy);2==d.rarity&&g.push(b.Catalog[l].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy)}b={};b.BMTime=(new Date).getTime();l=Math.floor(Math.random()*k.length);b.BMItem0=k[l];2<=k.length&&k.splice(l,1);Math.floor(100*Math.random())<Number(e.parts[2])?
k=g:(l=Number(e.parts[0])+Number(e.parts[1]),Math.floor(Math.random()*l)>=Number(e.parts[0])&&(k=f));b.BMItem1=k[Math.floor(Math.random()*k.length)];d=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var n,k=[],f=[],g=[],l=0;l<d.Catalog.length;l++){n=JSON.parse(d.Catalog[l].CustomData);if(void 0==n)return generateErrObj("Car card "+d.Catalog[l].ItemId+" has no custom data.");Number(n.unlockedAtRank)>=Number(h)+1||("0"==n.rarity&&k.push(d.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+
"_0_"+n.BMpriceIncrPerBuy),"1"==n.rarity&&f.push(d.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy),"2"==n.rarity&&g.push(d.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy))}h=Math.floor(Math.random()*k.length);b.BMItem2=k[h];2<=k.length&&k.splice(h,1);0>=f.length&&(0>=g.length?g=f=k:f=g);0>=g.length&&(g=f);Math.floor(100*Math.random())<Number(e.cars[2])?k=g:(l=Number(e.cars[0])+Number(e.cars[1]),Math.floor(Math.random()*l)>=Number(e.cars[0])&&
(k=f));h=Math.floor(Math.random()*k.length);b.BMItem3=k[h];server.UpdateUserInternalData({PlayFabId:c,Data:b});b.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return b}function GetCurrentBlackMarket(c,h){var a={},b=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:c,Keys:e});a.BMTime=60*parseInt(e.Data.BlackMarketResetMinutes)-Math.floor((b.getTime()-h.Data.BMTime.Value)/1E3);for(b=0;4>b;b++)a["BMItem"+b]=h.Data["BMItem"+b].Value;return a}
function GetValueFromStatistics(c,h,a){for(var b,e=0;e<c.length;e++)c[e].StatisticName===h&&(b=c[e]);return void 0===b?void 0!==a?a:0:Number(b.Value)}function GetVersionFromStatistics(c,h,a){for(var b,e=0;e<c.length;e++)c[e].StatisticName===h&&(b=c[e]);return void 0===b?void 0!==a?a:0:Number(b.Version)}function getCatalogItem(c,h){for(var a=server.GetCatalogItems({CatalogVersion:c}),b=0;b<a.Catalog.length;b++)if(a.Catalog[b].ItemId===h)return a.Catalog[b]}
function getObjectValueFromLevel(c,h,a,b){b||(b=0);if(!c[h]||!c[h].length)return b;var e=Number(c[h].length);a>=e&&(a=e-1);return Number(c[h][a])||b}function GiveUserPart(c,h,a,b){GiveUserCard(c,"PartsCards",h,a,b)}function GiveUserCarCard(c,h,a,b){GiveUserCard(c,"CarCards",h,a,b)}
function GiveUserCard(c,h,a,b,e){a=Number(a)<Number(b)?Number(a)+Math.floor(Math.random()*(Number(b)-Number(a))):Number(a);log.debug("cardsAmount: "+a);var d,k;for(b=0;b<e.Inventory.length;b++)if(e.Inventory[b].ItemId==c&&e.Inventory[b].CatalogVersion==h){d=e.Inventory[b].ItemInstanceId;k=void 0==e.Inventory[b].CustomData?a:void 0==e.Inventory[b].CustomData.Amount?a:isNaN(Number(e.Inventory[b].CustomData.Amount))?a:Number(e.Inventory[b].CustomData.Amount)+Number(k);break}if(void 0==d&&(k=a,d=[],d.push(c),
d=server.GrantItemsToUser({CatalogVersion:h,PlayFabId:e.PlayFabId,ItemIds:d}).ItemGrantResults[0].ItemInstanceId,void 0===d))return generateErrObj("grantRequest denied");a={Amount:k};log.debug("new amount is: "+k);server.UpdateUserInventoryItemCustomData({PlayFabId:e.PlayFabId,ItemInstanceId:d,Data:a});return{ItemId:c,CatalogVersion:h,CustomData:a}}function GetRandomCard(c,h){return void 0==c.length||0>=c.length?"ERROR":c[Math.floor(Math.random()*c.length)]}
function AddCardToListOfStacks(c,h,a,b){if(void 0==h)return h=[{ItemId:a,CatalogVersion:c,CustomData:{Amount:1}}];for(var e=0;e<h.length;e++)if(h[e].ItemId==a)return h.CustomData.Amount=Number(h.CustomData.Amount)+1,h;1==b?h.push({ItemId:a,CatalogVersion:c,CustomData:{Amount:1}}):h[Math.floor(Math.random()*h.length)].CustomData.Amount=Number(h[Math.floor(Math.random()*h.length)].CustomData.Amount)+1;return h}
function WeightedRandom(c,h){try{for(var a=0;a<c.length;a++);for(var b=Math.floor(Math.random()*h),a=0;a<c.length;a++){if(b<=Number(c[a]))return a;b-=Number(c[a])}return 0}catch(e){return log.debug(e),0}}
handlers.buyChest=function(c,h){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(c.curr,c.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<c.cost){a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.curr,Amount:c.cost});updateCurrencySpentStatistic(c.curr,c.cost);var b={};b[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",
{VirtualCurrency:b})}return generateInventoryChange("ChestBought",{})};
handlers.buyPremiumChest=function(c,h){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]}),b=0;0!=a.Statistics.length&&(b=a.Statistics[0].Value);for(var b=Number(b),a=Number(calculateLeague(b)),b=server.GetCatalogItems({CatalogVersion:"Chests"}),e,d,k=0;k<b.Catalog.length;k++)if(b.Catalog[k].ItemId==c.chestId){e=JSON.parse(b.Catalog[k].CustomData);d=b.Catalog[k].VirtualCurrencyPrices.HC;if(void 0==d)return generateErrObj("Chest has INVALID PRICE TAG");break}if(void 0==
e)return generateErrObj("Could not find chest with id: "+c.chestId+" in the Chests catalog, or this chest's custom data is undefined");b=server.GetUserInventory({PlayFabId:currentPlayerId});if(Number(d)>Number(b.VirtualCurrency.HC))return generateErrObj("Not enough HC.");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:Number(d)});updateCurrencySpentStatistic("HC",d);e=GenerateChestBounty(currentPlayerId,c.chestId,a,e);d=server.GetUserInventory({PlayFabId:currentPlayerId});
a=UpdateExperience("Chests",c.chestId,"xpGain",0,!0);d.Experience=a;return{Result:"OK",ChestBounty:e,InventoryChange:d}};
handlers.claimDailyMission=function(c,h){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a=Number(c.mIdx),b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==b.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e=JSON.parse(e.Data.DailyMissionData),d=e.missionData[a].split("_"),b=JSON.parse(b.Data.DailyMissionStatus.Value),
k=b.dailyMissionClaimStatus;if(a>=k.length)return generateErrObj("Unlock index is out of bounds of playerData claim mission status array");if(1==k[a])return generateFailObj("Mission already claimed");k[a]=1;b={DailyMissionStatus:JSON.stringify({DailyStatus:b.DailyStatus,dailyMissionClaimStatus:k,timeStamp:b.timeStamp})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});if(a>=e.missionData.length)return generateErrObj("Unlock index is out of bounds of titleData claim mission reward array");
a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:d[1],Amount:Number(d[2])});e={};e[a.VirtualCurrency]=a.Balance;return generateInventoryChange("MissionClaimed",{VirtualCurrency:e})};
handlers.endDaily=function(c,h){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==a.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e;tParsed=JSON.parse(b.Data.DailyMissionData);e=Number(tParsed.minutesToRefresh);for(var d=JSON.parse(a.Data.DailyMissionStatus.Value),
a=d.dailyMissionClaimStatus,k,b=-1,f=0;f<tParsed.missionData.length;f++)k=tParsed.missionData[f].split("_"),4>k.length&&generateErrObj("Title data is invalid!"),"OFF"==k[3]&&(a[f]=-1);for(f=0;f<d.dailyMissionClaimStatus.length;f++)if(-1!=a[f]&&0==a[f])return generateErrObj("Not all missions were claimed!");a=[0,0,0,0,0,0,0,0];f=new Date;f.getTime()-Number(d.timeStamp)>6E4*Number(e)?(k=2,e=f.getTime()):(k=0,b=60*Number(e)-Math.floor((f.getTime()-Number(d.timeStamp))/1E3),e=d.timeStamp);e={DailyMissionStatus:JSON.stringify({DailyStatus:k,
dailyMissionClaimStatus:a,timeStamp:e})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:e});e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});f=0;0!=e.Statistics.length&&(f=e.Statistics[0].Value);f=Number(f);e=Number(calculateLeague(f));for(var d=server.GetCatalogItems({CatalogVersion:"Chests"}),g,f=0;f<d.Catalog.length;f++)if("DailyMissionChest"==d.Catalog[f].ItemId){g=JSON.parse(d.Catalog[f].CustomData);break}if(void 0==g)return generateErrObj("Could not find chest with id: DailyMissionChest in the Chests catalog, or this chest's custom data is undefined");
g=GenerateChestBounty(currentPlayerId,"DailyMissionChest",e,g);e=server.GetUserInventory({PlayFabId:currentPlayerId});return{Result:"OK",Message:"DailyCompleted",ChestBounty:g,InventoryChange:e,DailyStatus:{status:k,claimStatus:a,timeRemaining:b}}};
handlers.endGame=function(c,h){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges","RecUploadLock"]}),a=0,e,d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=d.Statistics.length&&(a=d.Statistics[0].Value,1==c.debug&&log.debug("getting trophy count "+d.Statistics[0].Value));e=a=Number(a);var k=server.GetUserInternalData({PlayFabId:currentPlayerId,
Keys:["trophyLose","trophyWin","LastGameOutcome","LatestStreak"]}),d=void 0==k.Data.trophyLose||void 0==k.Data.trophyWin?45:Number(k.Data.trophyLose.Value)+Number(k.Data.trophyWin.Value),f=0,g="Loss";void 0!=k.Data.LatestStreak&&(f=Number(k.Data.LatestStreak.Value));1==isNaN(f)&&(f=0);void 0!=k.Data.LatestStreak&&(g=k.Data.LastGameOutcome.Value);void 0==g&&(g="Loss");k={quitLastGame:"false",LastGameOutcome:"Loss"};"rWin"==c.outcome&&(a+=d,k.LastGameOutcome="Win","Loss"==g?f=1:f++,ldata=server.GetLeaderboard({StatisticName:"TrophyCount",
StartPosition:0,MaxResultsCount:1}),null!=ldata.Leaderboard&&(1==c.debug&&log.debug("leaderboardData: "+ldata.Leaderboard[0]),ldata.Leaderboard[0].PlayFabId==currentPlayerId?1==c.debug&&log.debug("ALREADY IN FIRST PLACE IN LEADERBOARD"):(1==c.debug&&log.debug("WASN'T FIRST PLACE"),Number(ldata.Leaderboard[0].StatValue)<a&&(1==c.debug&&log.debug("BUT HE IS NOW!"),publishToLiveFeed(currentPlayerId,"topPlayer",a)),1==c.debug&&log.debug("DIFF: "+Number(ldata.Leaderboard[0].StatValue)+" vs "+a))));k.LatestStreak=
f;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:k});var g=JSON.parse(c.recordingHeader),l=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:"Wins TotalGamesCompleted LongestWinStreak BestDriftScore HighestLeagueReached TotalGames".split(" ")}).Statistics,d=calculateLeague(a),k=GetValueFromStatistics(l,"TotalGamesCompleted",0),n=!1,w=GetValueFromStatistics(l,"TotalGames",0);1>=Number(w)&&(n=!0);k=Number(k)+1;w=GetValueFromStatistics(l,"Wins",0);"rWin"==c.outcome&&
(w=Number(w)+1);var v=GetValueFromStatistics(l,"LongestWinStreak",0);GetVersionFromStatistics(l,"LongestWinStreak",0);Number(v)<f&&(v=f,2<d&&(10==Number(v)&&publishToLiveFeed(currentPlayerId,"winStreak",10),15==Number(v)&&publishToLiveFeed(currentPlayerId,"winStreak",15),20==Number(v)&&publishToLiveFeed(currentPlayerId,"winStreak",20)));f=GetValueFromStatistics(l,"BestDriftScore",0);Number(g.Score)>f&&(f=Number(g.Score));l=GetValueFromStatistics(l,"HighestLeagueReached",1);Number(d)>Number(l)&&(l=
d,2<l&&publishToLiveFeed(currentPlayerId,"arenaUnlocked",Number(d)));var u=[];u.push({StatisticName:"TrophyCount",Value:a});u.push({StatisticName:"League",Value:d});u.push({StatisticName:"Wins",Value:w});u.push({StatisticName:"TotalGamesCompleted",Value:k});u.push({StatisticName:"LongestWinStreak",Value:v});u.push({StatisticName:"BestDriftScore",Value:f});u.push({StatisticName:"HighestLeagueReached",Value:l});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:u});"rWin"==c.outcome&&
0==n&&(4<Number(k)?grantUserChest(currentPlayerId,"endGameNormal"):grantUserChest(currentPlayerId,"endGameFreeWin"));var k=!1,x;void 0!=b.Data.RecUploadLock&&(x=JSON.parse(b.Data.RecUploadLock));if(void 0!=x)for(f=0;f<x.length;f++)if(c.cVersion==x[f]){k=!0;break}if(100>=Number(g.Score)||1==k)return 1==c.debug&&log.debug("this recording will not be stored, but endgame stats still apply. clientVersion: "+c.cVersion+". upload lock:  "+k),a={TrophyCount:a,League:d},{Result:a};b=JSON.parse(b.Data.SubdivisionTrophyRanges);
x=43;for(f=0;f<b.subdivisions.length;f++)if(e<b.subdivisions[f]){x=f;break}e=[];e.push({Key:c.envIndex+"_"+c.courseIndex+"_RecPos",Value:c.recordingPos});e.push({Key:c.envIndex+"_"+c.courseIndex+"_RecRot",Value:c.recordingRot});e.push({Key:c.envIndex+"_"+c.courseIndex+"_RecHeader",Value:c.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e});e=server.GetTitleInternalData({Key:"RecSubDivision"+x}).Data["RecSubDivision"+x];if(void 0==e)e=[],b={e:c.envIndex,c:c.courseIndex,
uId:currentPlayerId},e.push(b);else{e=JSON.parse(e);b={e:c.envIndex,c:c.courseIndex,uId:currentPlayerId};g=!1;for(f=k=0;f<e.length;f++)e[f].uId==currentPlayerId&&k++;if(2<k)return a={TrophyCount:a,League:d},{Result:a};for(f=0;f<e.length;f++)e[f].e==c.envIndex&&e[f].c==c.courseIndex&&(g=!0,e[f]=b);0==g&&e.push(b)}e=JSON.stringify(e);server.SetTitleInternalData({Key:"RecSubDivision"+x,Value:e});a={TrophyCount:a,League:d};return{Result:a}};
function UpdateExperience(c,h,a,b,e,d){c=JSON.parse(getCatalogItem(c,h).CustomData)[a];h=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;h=h[h.length-1];d=d||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;d=GetValueFromStatistics(d,"Experience",0);if(d>=h)return h;if(isNaN(Number(c)))a=Number(c.length),b>=a&&(b=a-1),b=Number(c[b]);else if(b=Number(c),0===b)return d;d=Math.min(d+b,h);if(!e)return d;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:d}]});return d}
handlers.generateDaily=function(c,h){var a,b=new Date;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var e=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(e.DailyStatus);if(0==a){var b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),d;tParsed=JSON.parse(b.Data.DailyMissionData);d=Number(tParsed.minutesToRefresh);b=new Date;b.getTime()-Number(e.timeStamp)>6E4*Number(d)&&(a=1)}if(1!=a)return generateErrObj("DailyStatus is: "+
a+". Should be 1")}a=2;b=b.getTime();a={DailyMissionStatus:JSON.stringify({DailyStatus:a,dailyMissionClaimStatus:[0,0,0,0,0,0,0,0],timeStamp:b})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK"}};
handlers.getChestSlotsStatus=function(c,h){var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["ChestFreeStatus","ChestSlotsStatus"]}),b;if(void 0==a.Data.ChestFreeStatus){b=server.GetCatalogItems({CatalogVersion:"Chests"});for(var e,d=0;d<b.Catalog.length;d++)if("FreeChest"==b.Catalog[d].ItemId){e=JSON.parse(b.Catalog[d].CustomData);break}if(void 0==e)return generateErrObj("Chest catalog has no freechestinfo");b=Number(e.hoursToOpen.split(",")[0]);if(isNaN(b))return generateErrObj("FreeChest open time info is invalid");
e=Math.floor(Number((new Date).getTime())/1E3);b=[{status:0,TimeUntilArrival:Math.floor(e+3600*b)},{status:1,TimeUntilArrival:0}];b=JSON.stringify(b);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestFreeStatus:b}})}else b=a.Data.ChestFreeStatus.Value;void 0==a.Data.ChestSlotsStatus?(a=[{chestId:null,chestLeague:0,status:"Empty",orderTimeStamp:0,arrivalTimeStamp:0},{chestId:null,chestLeague:0,status:"Empty",orderTimeStamp:0,arrivalTimeStamp:0},{chestId:null,chestLeague:0,status:"Empty",
orderTimeStamp:0,arrivalTimeStamp:0},{chestId:null,chestLeague:0,status:"Empty",orderTimeStamp:0,arrivalTimeStamp:0}],a=JSON.stringify(a),server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestSlotsStatus:a}})):a=a.Data.ChestSlotsStatus.Value;return{Result:"OK",ChestSlotInfo:JSON.parse(a),FreeSlotsInfo:JSON.parse(b)}};
handlers.getDailyMissionStatus=function(c,h){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b,a=[0,0,0,0,0,0,0,0],e=-1;b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=b.Data.DailyMissionStatus){var d=JSON.parse(b.Data.DailyMissionStatus.Value);b=Number(d.DailyStatus);var k=a.length;k>d.dailyMissionClaimStatus.length&&(k=d.dailyMissionClaimStatus.length);for(var f=0;f<k;f++)a[f]=d.dailyMissionClaimStatus[f];
0==b&&(k=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),tParsed=JSON.parse(k.Data.DailyMissionData),k=Number(tParsed.minutesToRefresh),f=new Date,f.getTime()-Number(d.timeStamp)>6E4*Number(k)?(b=2,a=[0,0,0,0,0,0,0,0],d=f.getTime(),d={DailyStatus:b,dailyMissionClaimStatus:a,timeStamp:d},d=JSON.stringify(d),d={DailyMissionStatus:d},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d})):e=60*Number(k)-Math.floor((f.getTime()-Number(d.timeStamp))/1E3))}else b=2,
f=new Date,d=f.getTime(),d={DailyStatus:b,dailyMissionClaimStatus:a,timeStamp:d},d=JSON.stringify(d),d={DailyMissionStatus:d},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});return{Result:"OK",Message:" ",DailyStatus:{status:b,claimStatus:a,timeRemaining:e}}};
handlers.getLiveFeed=function(c,h){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetTitleInternalData({Keys:"LiveFeed"});return void 0==a||void 0==a.Data.LiveFeed?generateErrObj("No LivefeedFound"):{Result:"OK",Feed:JSON.parse(a.Data.LiveFeed)}};handlers.getServerTime=function(c,h){return{time:new Date}};
handlers.iapMade=function(c,h){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["IAPValue"]}).Statistics,b=Number(GetValueFromStatistics(a,"IAPValue",0));switch(c.bundle){case "co.tamatem.downshiftdrift.gold01":b+=99;break;case "co.tamatem.downshiftdrift.gold02":b+=499;break;case "co.tamatem.downshiftdrift.gold03":b+=2499;break;case "co.tamatem.downshiftdrift.gold04":b+=2499;break;case "co.tamatem.downshiftdrift.gold05":b+=4999;break;case "co.tamatem.downshiftdrift.gold06":b+=
9999;break;case "co.tamatem.downshiftdrift.bundle01":var b=b+599,e=server.GetUserInventory({PlayFabId:currentPlayerId}),d=server.GetCatalogItems({CatalogVersion:"BMBundleInfo"}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["HighestLeagueReached"]}).Statistics,a=Number(GetValueFromStatistics(a,"HighestLeagueReached",1)),k="bundle01league",k=10>a?k+"0"+a:k+a;1==c.debug&&log.debug("consuming: "+k);for(var f,a=0;a<d.Catalog.length;a++)if(d.Catalog[a].ItemId==k){f=JSON.parse(d.Catalog[a].CustomData);
break}if(void 0==f)return generateErrObj("Catalog item: "+k+" not found");for(a=0;a<e.Inventory.length;a++)if(e.Inventory[a].ItemId==c.bundle){try{server.ConsumeItem({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[a].ItemInstanceId,ConsumeCount:1})}catch(n){return generateErrObj("err: "+n)}var g;g=[];var l={};if(void 0!=f.HCRange){1==c.debug&&log.debug("found HCRange: "+f.HCRange);d=f.HCRange.split(",");if(2<=d.length)d=Number(d[0])<Number(d[1])?Number(d[0])+Math.floor(Math.random()*(Number(d[1])-
Number(d[0]))):Number(d[0]);else return generateErrObj("Catalog data corrupt");0<d&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:d}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.SCRange){1==c.debug&&log.debug("found SCRange: "+f.SCRange);d=f.SCRange.split(",");if(2<=d.length)d=Number(d[0])<Number(d[1])?Number(d[0])+Math.floor(Math.random()*(Number(d[1])-Number(d[0]))):Number(d[0]);else return generateErrObj("Catalog data corrupt");
0<d&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:d}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.Engine)if(1==c.debug&&log.debug("found Engine: "+f.Engine),d=f.Engine.split(","),2<=d.length)d=GiveUserPart("Engine",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Exhaust)if(1==c.debug&&log.debug("found Exhaust: "+f.Exhaust),d=f.Exhaust.split(","),2<=d.length)d=
GiveUserPart("Exhaust",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Gearbox)if(1==c.debug&&log.debug("found Gearbox: "+f.Gearbox),d=f.Gearbox.split(","),2<=d.length)d=GiveUserPart("Gearbox",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Suspension)if(1==c.debug&&log.debug("found Suspension: "+f.Suspension),d=f.Suspension.split(","),2<=d.length)d=GiveUserPart("Suspension",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");
if(void 0!=f.Tires)if(1==c.debug&&log.debug("found Tires: "+f.Tires),d=f.Tires.split(","),2<=d.length)d=GiveUserPart("Tires",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Turbo)if(1==c.debug&&log.debug("found Turbo: "+f.Turbo),d=f.Turbo.split(","),2<=d.length)d=GiveUserPart("Turbo",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.CarCard&&(1==c.debug&&log.debug("found CarCard: "+f.CarCard),void 0!=f.CarCardAmount))if(1==
c.debug&&log.debug("found CarCardAmount: "+f.CarCardAmount),d=f.CarCardAmount.split(","),2<=d.length)d=GiveUserCarCard(f.CarCard,d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");void 0!=f.ChestModel&&1==c.debug&&log.debug("found ChestModel: "+f.ChestModel)}e=[];b={StatisticName:"IAPValue",Value:b};e.push(b);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});g={Inventory:g,VirtualCurrency:l};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:g};
default:1==c.debug&&log.debug("InvalidPurchaseParameter")}e=[];b={StatisticName:"IAPValue",Value:b};e.push(b);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});publishToLiveFeed(currentPlayerId,"boughtIAP",c.bundle)};
handlers.initServerData=function(c){c=[];var h={StatisticName:"TrophyCount",Version:"0",Value:"0"};c.push(h);h={StatisticName:"League",Version:"0",Value:"0"};c.push(h);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});c=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var h={0:"Owned"},a=0;a<c.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[a].ItemInstanceId,Data:h});c=[];c.push("FordFocus");c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c});h={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:h});h={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:h});h={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:h});h=[];h.push("Engine");h=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:h});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});h={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:h})};
handlers.levelUp=function(c,h){var a=c.level,b=0,e=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),d={LastLevelReward:0};void 0==e.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:d}):b=e.Data.LastLevelReward.Value;var e=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,k=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics,f=GetValueFromStatistics(k,"Experience",
0);0==f&&(k=[],k.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:k}));for(var k=e.length,g=0;g<e.length;g++)if(!(f>=e[g])){k=g;break}if(Number(a)<=Number(b))return generateFailObj("already got reward for level: "+b);if(Number(a)<=Number(k))b=Number(a),d.LastLevelReward=b,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:d}),a=""+b,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",
PlayFabId:currentPlayerId,ItemIds:a}),2<Number(k)&&publishToLiveFeed(currentPlayerId,"levelUp",Number(k));else return generateFailObj("You haven't reached this level yet");a=server.GetUserInventory({PlayFabId:currentPlayerId});return generateInventoryChange("InventoryUpdated",a)};
handlers.openChest=function(c,h){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<c.levelUpRewardIndex){var b=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),e={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}):b=a.Data.LastLevelReward.Value;var d=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,k=GetValueFromStatistics(a,"Experience",0);0==k&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var f=d.length,a=0;a<d.length;a++)if(!(k>=d[a])){f=a;break}if(Number(c.levelUpRewardIndex)<=Number(b))return generateFailObj("already got reward for level: "+b);if(Number(c.levelUpRewardIndex)<=Number(f))b=Number(c.levelUpRewardIndex),e.LastLevelReward=b,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:e}),a=""+b,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",PlayFabId:currentPlayerId,ItemIds:a}),2<Number(f)&&publishToLiveFeed(currentPlayerId,"levelUp",Number(f));else return generateFailObj("You haven't reached this level yet")}b=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<c.currCost){if("OK"!=checkBalance(c.currType,c.currCost,b.VirtualCurrency.SC,b.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:c.currType,Amount:c.currCost});updateCurrencySpentStatistic(c.currType,c.currCost)}for(var g in c.currencyReq)0<c.currencyReq[g]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g,Amount:c.currencyReq[g]});for(g in c.carCardsRequest)if(c.carCardsRequest.hasOwnProperty(g)){e=!1;for(a=0;a<b.Inventory.length;a++)if(b.Inventory[a].ItemId==g&&"CarCards"==b.Inventory[a].CatalogVersion){e=void 0==b.Inventory[a].CustomData?Number(c.carCardsRequest[g]):void 0==b.Inventory[a].CustomData.Amount?
Number(c.carCardsRequest[g]):isNaN(Number(b.Inventory[a].CustomData.Amount))?Number(c.carCardsRequest[g]):Number(b.Inventory[a].CustomData.Amount)+Number(c.carCardsRequest[g]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[g],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:c.carCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}for(g in c.partCardsRequest)if(c.partCardsRequest.hasOwnProperty(g)){e=!1;for(a=0;a<b.Inventory.length;a++)if(b.Inventory[a].ItemId==g&&"PartCards"==b.Inventory[a].CatalogVersion){e=void 0==b.Inventory[a].CustomData?Number(c.partCardsRequest[g]):void 0==b.Inventory[a].CustomData.Amount?Number(c.partCardsRequest[g]):isNaN(Number(b.Inventory[a].CustomData.Amount))?Number(c.partCardsRequest[g]):Number(b.Inventory[a].CustomData.Amount)+Number(c.partCardsRequest[g]);
e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[g],a=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:c.partCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}g=server.GetUserInventory({PlayFabId:currentPlayerId});c.chestId&&0>=c.levelUpRewardIndex&&
(b=UpdateExperience("Chests",c.chestId,"xpGain",0,!0),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["ChestsOpened"]}).Statistics,e=Number(GetValueFromStatistics(a,"ChestsOpened",0)),e++,a=[],a.push({StatisticName:"ChestsOpened",Value:e}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}),g.Experience=b);"DiamondChest"!=c.chestId&&"BigGoldChest"!=c.chestId&&"BigSilverChest"!=c.chestId||publishToLiveFeed(currentPlayerId,"unlockedChest",c.chestId);return generateInventoryChange("InventoryUpdated",
g)};
handlers.openFreeChest=function(c,h){var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["ChestFreeStatus"]});if(void 0==a.Data.ChestFreeStatus)return generateErrObj("No Chest Data found!");for(var b=JSON.parse(a.Data.ChestFreeStatus.Value),e=-1,d=b.length-1;0<=d;d--)if(1==b[d].status||Number(b[d].TimeUntilArrival)<=Math.floor((new Date).getTime()/1E3)){log.debug("we found a free chest");e=d;break}if(-1==e)return generateFailObjCustom("FreeSlotsInfo",JSON.parse(a.Data.ChestFreeStatus.Value));a=
server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});d=0;0!=a.Statistics.length&&(d=a.Statistics[0].Value);for(var d=Number(d),a=Number(calculateLeague(d)),k=server.GetCatalogItems({CatalogVersion:"Chests"}),f,d=0;d<k.Catalog.length;d++)if("FreeChest"==k.Catalog[d].ItemId){f=JSON.parse(k.Catalog[d].CustomData);break}if(void 0==f)return generateErrObj("Could not find chest with id: FreeChest in the Chests catalog, or this chest's custom data is undefined");d=Number(f.hoursToOpen.split(",")[0]);
if(isNaN(d))return generateErrObj("FreeChest open time info is invalid");k=Math.floor(Number((new Date).getTime())/1E3);d=Math.floor(k+3600*d);b[e].status=0;b[e].TimeUntilArrival=d;e=JSON.stringify(b);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestFreeStatus:e}});f=GenerateChestBounty(currentPlayerId,"FreeChest",a,f);e=server.GetUserInventory({PlayFabId:currentPlayerId});return{Result:"OK",ChestBounty:f,FreeSlotsInfo:b,InventoryChange:e}};
handlers.purchaseBMItem=function(c,h){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>c.itemId||3<c.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+c.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),b=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+c.itemId].Value.split("_"),e=b.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var d;d=2>c.itemId?"PartCards":"CarCards";var k=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),e=checkBalance(a[1],k,e,e);if("OK"!=e)return e;for(var f,g,e=0;e<b.Inventory.length;e++)if(b.Inventory[e].ItemId==a[0]&&b.Inventory[e].CatalogVersion==d){f=b.Inventory[e].ItemInstanceId;void 0===b.Inventory[e].CustomData?g={Amount:1}:void 0===b.Inventory[e].CustomData.Amount?g={Amount:1}:(g=Number(b.Inventory[e].CustomData.Amount)+1,isNaN(g)&&(g=1),g={Amount:g});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:f,Data:g});break}void 0===f&&(f=[],f.push(a[0]),f=server.GrantItemsToUser({CatalogVersion:d,PlayFabId:currentPlayerId,ItemIds:f}).ItemGrantResults[0].ItemInstanceId,void 0===f?generateErrObj("grantRequest denied"):(g={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:g})));f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:k});updateCurrencySpentStatistic(a[1],k);k=a[0]+"_"+a[1]+"_"+a[2]+"_"+
(parseInt(a[3])+1)+"_"+a[4];b={};b["BMItem"+c.itemId]=k;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});g=[{ItemId:a[0],CatalogVersion:d,CustomData:g}];d={};d[f.VirtualCurrency]=f.Balance;a=c.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];e={Inventory:g,VirtualCurrency:d};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:e,BMItemChange:a}};
handlers.purchaseItems=function(c,h){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=server.GetUserInventory({PlayFabId:currentPlayerId}),e=b.VirtualCurrency.SC,d=b.VirtualCurrency.HC;switch(c.purchaseType){case "carUpgrade":return upgradeCar(c,h,b,e,d);case "partUpgrade":return upgradePart(c,h,b,e,d);case "custPurchase":for(var k=server.GetCatalogItems({CatalogVersion:"Customization"}),f,g=0,a="SC",l=0;l<k.Catalog.length;l++)if(k.Catalog[l].ItemId==c.custId){f=
k.Catalog[l];cardInfo=JSON.parse(k.Catalog[l].CustomData);g=c.custVal+",Cost";a=cardInfo[c.custVal+",Curr"];g=cardInfo[g];d=checkBalance(a,g,e,d);if("OK"!=d)return d;break}if(void 0==f)return generateErrObj("Customization does not exist in catalog.");for(var n,w,l=0;l<b.Inventory.length;l++)if(b.Inventory[l].ItemId==c.custId){n=b.Inventory[l];w=b.Inventory[l].ItemInstanceId;if(void 0!=n.CustomData&&String(c.custVal)in n.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
n){log.info("user doesn't have customization category. Granting ... ");d=[];d.push(c.custId);d=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:d});if(0==d.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");w=d.ItemGrantResults[0].ItemInstanceId}d={};d[String(c.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:w,Data:d});w=[{ItemId:c.custId,
CatalogVersion:"Customization",CustomData:d}];0<g?(d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:g}),updateCurrencySpentStatistic(a,g),a={},a[d.VirtualCurrency]=d.Balance,l={Inventory:w,VirtualCurrency:a}):l={Inventory:w};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":g=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});w=!1;for(l=a=0;l<g.Catalog.length;l++)if(g.Catalog[l].ItemId==c.packId){a=g.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(g.Catalog[l].CustomData);w=!0;break}if(0==w)return generateErrObj("pack with ID: "+c.packId+" not found in catalog.");if(0>=a)return generateErrObj("pack with ID: "+c.packId+" shouldn't have negative cost.");if(a>d)return generateFailObj("Not enough HC.");d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:a});updateCurrencySpentStatistic("HC",a);g=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});
a={};a[g.VirtualCurrency]=g.Balance;a[d.VirtualCurrency]=d.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:a});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(c){c=CheckMaintenanceAndVersion(c);return"OK"!=c?generateMaintenanceOrUpdateObj(c):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(c){c=server.GetUserInventory({PlayFabId:currentPlayerId});var h=Number(c.VirtualCurrency.SC);if(isNaN(h)||0>h)h=0;var a=Number(c.VirtualCurrency.HC);if(isNaN(a)||0>a)a=0;var b=[];b.push({StatisticName:"CurrentMoney",Version:"0",Value:h});b.push({StatisticName:"CurrentGold",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});for(var h=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),
b=!1,e=0;e<c.Inventory.length;e++)if("CarsProgress"==c.Inventory[e].CatalogVersion){var b=!0,d=checkCarDataValidity(c.Inventory[e],h);if("PlayFabError"==d||void 0===d)return generateErrObj("PlayfabError");"OK"==d?log.debug("Data for "+c.Inventory[e].ItemId+" OK"):c.Inventory[e].CustomData=d;c.Inventory[e].CustomData.Pr=recalculateCarPr(c.Inventory[e].CustomData,c.Inventory[e].ItemId,h,a);d={};d.Pr=c.Inventory[e].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[e].ItemInstanceId,
Data:d})}return!1===b?(c=[],c.push("FordFocus"),c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c}),h={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:h}),h={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,
Data:h}),h={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:h}),generateErrObj("UserHasNoCars ... reiniting")):c};
handlers.retrieveBlackMarket=function(c,h){var a=CheckMaintenanceAndVersion(c);if(!0===c.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=[];b.push("BMTime");for(var e=0;4>e;e++)b.push("BMItem"+e);e=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:b});if(void 0===e.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var b=new Date,d=[];d.push("BlackMarketResetMinutes");d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:d});if(!0===c.reset){a="HC";e=200;b=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==b.Data.BlackMarketResetCost&&(e=b.Data.BlackMarketResetCost.split("_"),a=e[0],e=Number(e[1]));if(0<e){b=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,e,b.VirtualCurrency.SC,b.VirtualCurrency.HC))return generateFailObj("not enough money");b=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:e});updateCurrencySpentStatistic(a,e);a=GenerateBlackMarket(currentPlayerId);e={};e[b.VirtualCurrency]=b.Balance;e={VirtualCurrency:e};
a.InventoryChange=e;return a}return GenerateBlackMarket(currentPlayerId)}return b.getTime()-parseInt(e.Data.BMTime.Value)>6E4*parseInt(d.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,e),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,e)};
handlers.rewardUsers=function(c,h){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,b=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),e=0;0>=b&&(a=Number(a)/3E3,e=Number(Math.floor(800*a)));b=Number(b)+e;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:b}]});return b};
handlers.setMainCar=function(c,h){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var a=server.GetUserInventory({PlayFabId:currentPlayerId}),b={},e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==c.carId&&"CarsProgress"==a.Inventory[e].CatalogVersion){b.carId=a.Inventory[e].ItemId;b.carData=a.Inventory[e].CustomData;updateUserProfileInfo(currentPlayerId,b);break}};
function updateProfileCar(c,h,a){a=server.GetUserReadOnlyData({PlayFabId:a,Keys:["UserProfileInfo"]});void 0!=a.Data&&void 0!=a.Data.UserProfileInfo&&void 0!=a.Data.UserProfileInfo.Value&&JSON.parse(a.Data.UserProfileInfo.Value).CarData.carId==c.carId&&handlers.setMainCar(c,h)}
handlers.skipTutorial=function(c,h){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]}),a=0;0!=b.Statistics.length&&(a=b.Statistics[0].Value);a=Number(a);0>=a&&(a=1);b=[];b.push({StatisticName:"TrophyCount",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});return{trophies:a}};
handlers.slotChestOperation=function(c,h){var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["ChestSlotsStatus"]});if(void 0==a.Data.ChestSlotsStatus)return generateErrObj("No Chest Data found!");var b=JSON.parse(a.Data.ChestSlotsStatus.Value);if(Number(c.slotIndex)>=b.length||0>Number(c.slotIndex))return generateErrObj("Invalid slot index");var e=c.operation;if("Empty"==b[Number(c.slotIndex)].status)return generateFailObjCustom("ChestSlotInfo",JSON.parse(a.Data.ChestSlotsStatus.Value));
var d=server.GetCatalogItems({CatalogVersion:"Chests"});switch(e){case "order":for(e=0;e<b.length;e++)if("Incoming"==b[e].status&&b[e].arrivalTimeStamp>Math.floor((new Date).getTime()/1E3))return generateFailObjCustom("ChestSlotInfo",JSON.parse(a.Data.ChestSlotsStatus.Value));if("Occupied"!=b[Number(c.slotIndex)].status)return generateFailObjCustom("ChestSlotInfo",JSON.parse(a.Data.ChestSlotsStatus.Value));b[Number(c.slotIndex)].status="Incoming";a=new Date;b[Number(c.slotIndex)].orderTimeStamp=Math.floor(Number(a.getTime())/
1E3);for(var k,f,e=0;e<d.Catalog.length;e++)d.Catalog[e].ItemId==b[Number(c.slotIndex)].chestId&&(f=JSON.parse(d.Catalog[e].CustomData),a=f.hoursToOpen.split(","),k="0"==b[Number(c.slotIndex)].chestLeague?Number(a[0]):Number(a[Math.min(Number(b[Number(c.slotIndex)].chestLeague)-1,a.length-1)]));log.debug("hoursToOpen: "+k);b[Number(c.slotIndex)].arrivalTimeStamp=Number(b[Number(c.slotIndex)].orderTimeStamp)+Math.floor(3600*k);if(void 0==f)return generateErrObj("Could not find chest with id: "+b[Number(c.slotIndex)].chestId+
" in the Chests catalog, or this chest's custom data is undefined");d=JSON.stringify(b);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestSlotsStatus:d}});return f={Result:"OK",ChestSlotInfo:b};case "rush":if("Arrived"==b[Number(c.slotIndex)].status)return generateFailObjCustom("ChestSlotInfo",JSON.parse(a.Data.ChestSlotsStatus.Value));for(var g,e=0;e<d.Catalog.length;e++)d.Catalog[e].ItemId==b[Number(c.slotIndex)].chestId&&(f=JSON.parse(d.Catalog[e].CustomData),g=Number(f.priceToUnlock),
a=f.hoursToOpen.split(","),k=0==b[Number(c.slotIndex)].chestLeague?Number(a[0]):Number(a[Math.min(Number(b[Number(c.slotIndex)].chestLeague),a.length-1)]));a=new Date;d="Occupied"==b[Number(c.slotIndex)].status?1:(Number(b[Number(c.slotIndex)].arrivalTimeStamp)-Math.floor(Number(a.getTime())/1E3))/(3600*k);log.debug("interpolator: "+d);if(0>=d)b[Number(c.slotIndex)].status="Arrived",b[Number(c.slotIndex)].arrivalTimeStamp=0,f={Result:"OK",ChestSlotInfo:b};else{d=Math.floor(1+d*(g-1));log.debug("rushPrice: "+
d);f=server.GetUserInventory({PlayFabId:currentPlayerId});if(d>f.VirtualCurrency.HC)return generateErrObj("Not enough HC.");b[Number(c.slotIndex)].status="Arrived";b[Number(c.slotIndex)].arrivalTimeStamp=0;b[Number(c.slotIndex)].orderTimeStamp=1;f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:d});updateCurrencySpentStatistic("HC",d);d={};d[f.VirtualCurrency]=f.Balance;e={VirtualCurrency:d};f={Result:"OK",InventoryChange:e,ChestSlotInfo:b}}d=JSON.stringify(b);
server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestSlotsStatus:d}});return f;case "open":g=Number(c.slotIndex);for(e=0;e<d.Catalog.length;e++)if(d.Catalog[e].ItemId==b[Number(c.slotIndex)].chestId){f=JSON.parse(d.Catalog[e].CustomData);break}if(void 0==f)return generateErrObj("Could not find chest with id: "+b[Number(c.slotIndex)].chestId+" in the Chests catalog, or this chest's custom data is undefined");if("Empty"==b[g].status||"Occupied"==b[g].status||"Incoming"==b[g].status&&
b[g].arrivalTimeStamp>Math.floor((new Date).getTime()/1E3))return generateFailObjCustom("ChestSlotInfo",JSON.parse(a.Data.ChestSlotsStatus.Value));d=GenerateChestBounty(currentPlayerId,b[g].chestId,b[g].chestLeague,f);f=server.GetUserInventory({PlayFabId:currentPlayerId});a=UpdateExperience("Chests",b[g].chestId,"xpGain",0,!0);f.Experience=a;f={Result:"OK",InventoryChange:f,ChestBounty:d};b[g].chestId=null;b[g].chestLeague=0;b[g].status="Empty";b[g].orderTimeStamp=0;b[g].arrivalTimeStamp=0;d=JSON.stringify(b);
server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestSlotsStatus:d}});return f}};
function GenerateChestBounty(c,h,a,b){a=Number(a)+Number(h.arenasAdvance);var e=0,d=Number(h.maxCardStacks),k;h=b.guaranteedSC.split(",");switch(h.length){case 1:k=Number(h[0]);break;case 2:k=Number(h[0])+Math.floor(Math.random()*Math.abs(Number(h[1])-Number(h[0])));break;default:k=0}0<k&&e++;var f;h=b.guaranteedHC.split(",");switch(h.length){case 1:f=Number(h[0]);break;case 2:f=Number(h[0])+Math.floor(Math.random()*Math.abs(Number(h[1])-Number(h[0])));break;default:f=0}0<f&&e++;var g=server.GetCatalogItems({CatalogVersion:"CarCards"}),
l=server.GetCatalogItems({CatalogVersion:"PartCards"}),n,w=[],v=[],u=[];for(h=0;h<g.Catalog.length;h++)if(n=JSON.parse(g.Catalog[h].CustomData),void 0!=n&&void 0!=n.unlockedAtRank&&!(Number(n.unlockedAtRank)>a)&&void 0!=n.rarity)switch(Number(n.rarity)){case 0:w.push(g.Catalog[h].ItemId);break;case 1:v.push(g.Catalog[h].ItemId);break;case 2:u.push(g.Catalog[h].ItemId);break;default:u.push(g.Catalog[h].ItemId)}var x;n=[];var B=[],C=[];for(h=0;h<l.Catalog.length;h++)if(x=JSON.parse(l.Catalog[h].CustomData),
void 0!=x.rarity)switch(Number(x.rarity)){case 0:n.push(l.Catalog[h].ItemId);break;case 1:B.push(g.Catalog[h].ItemId);break;case 2:C.push(g.Catalog[h].ItemId);break;default:C.push(g.Catalog[h].ItemId)}g=!1;l=0;x=b.guaranteedCarsPerRarity.split(",");for(h=0;h<x.length;h++)l+=Number(x[h]);0<Number(l)&&(g=!0);var m,q,p,t,y,A;if(1==g){var z=Number(Math.floor(.55*(d-e)));0>=z&&(z=1);for(var r=0;3>r;r++)if(!(0>=Number(x[r]))){var G=Math.floor(Number(x[r])/l*z);0>=G&&(G=1);for(h=0;h<Number(x[r]);h++){var F;
switch(r){case 0:g=m.length;void 0==g&&(g=0);g=g<G;F=GetRandomCard(w,a);if("ERROR"==F)return"Error";m=AddCardToListOfStacks("CarCards",m,F,g);break;case 1:g=q.length;void 0==g&&(g=0);g=g<G;F=GetRandomCard(v,a);if("ERROR"==F)return"Error";q=AddCardToListOfStacks("CarCards",q,F,g);break;case 2:g=p.length;void 0==g&&(g=0);g=g<G;F=GetRandomCard(u,a);if("ERROR"==F)return"Error";p=AddCardToListOfStacks("CarCards",p,F,g);break;default:F="ERROR"}if("ERROR"==F)return"Error"}}}void 0!=m&&(e+=m.length);void 0!=
q&&(e+=q.length);void 0!=p&&(e+=p.length);l=b.partRarityDroprates.split(",");for(h=0;h<l.length;h++);x=b.carRarityDroprates.split(",");for(h=0;h<x.length;h++);for(h=0;h<Number(b.randomCardsReward);h++)if(g=e<d,70>Math.floor(100*Math.random()))switch(z=WeightedRandom(l),z){case 0:z=GetRandomCard(n,a);if("ERROR"==z)return"Error";r=t.length;void 0==r&&(r=0);t=AddCardToListOfStacks("PartCards",t,z,g);t.length>r&&e++;break;case 1:z=GetRandomCard(B,a);if("ERROR"==z)return"Error";r=y.length;void 0==r&&(r=
0);y=AddCardToListOfStacks("PartCards",y,z,g);y.length>r&&e++;break;case 2:z=GetRandomCard(C,a);if("ERROR"==z)return"Error";r=A.length;void 0==r&&(r=0);A=AddCardToListOfStacks("PartCards",A,z,g);A.length>r&&e++}else switch(z=WeightedRandom(x),z){case 0:z=GetRandomCard(w,a);if("ERROR"==z)return"Error";r=m.length;void 0==r&&(r=0);m=AddCardToListOfStacks("CarCards",m,z,g);m.length>r&&e++;break;case 1:z=GetRandomCard(v,a);if("ERROR"==z)return"Error";r=q.length;void 0==r&&(r=0);q=AddCardToListOfStacks("CarCards",
q,z,g);q.length>r&&e++;break;case 2:z=GetRandomCard(u,a);if("ERROR"==z)return"Error";r=p.length;void 0==r&&(r=0);p=AddCardToListOfStacks("CarCards",p,z,g);p.length>r&&e++}b=[];void 0!=m&&(b=b.concat(m));void 0!=q&&(b=b.concat(q));void 0!=p&&(b=b.concat(p));void 0!=t&&(b=b.concat(t));void 0!=y&&(b=b.concat(y));void 0!=A&&(b=b.concat(A));currencyUpdated={HC:f,SC:k};void 0!=currencyUpdated.HC&&0<Number(currencyUpdated.HC)&&server.AddUserVirtualCurrency({PlayFabId:c,VirtualCurrency:"HC",Amount:Number(currencyUpdated.HC)});
void 0!=currencyUpdated.SC&&0<Number(currencyUpdated.SC)&&server.AddUserVirtualCurrency({PlayFabId:c,VirtualCurrency:"SC",Amount:Number(currencyUpdated.SC)});m=server.GetUserInventory({PlayFabId:c});q=!1;for(h=0;h<b.length;h++){for(t=0;t<m.Inventory.length;t++)if(q=!1,m.Inventory[t].ItemId==b[h].ItemId&&m.Inventory[t].CatalogVersion==b[h].CatalogVersion){log.debug("found: "+b[h].ItemId);q=void 0==m.Inventory[t].CustomData?Number(b[h].CustomData.Amount):void 0==m.Inventory[t].CustomData.Amount?Number(b[h].CustomData.Amount):
isNaN(Number(m.Inventory[t].CustomData.Amount))?Number(b[h].CustomData.Amount):Number(m.Inventory[t].CustomData.Amount)+Number(b[h].CustomData.Amount);p={Amount:q};server.UpdateUserInventoryItemCustomData({PlayFabId:c,ItemInstanceId:m.Inventory[t].ItemInstanceId,Data:p});q=!0;break}0==q&&(log.debug("not found: "+b[h].ItemId+" granting..."),t=server.GrantItemsToUser({CatalogVersion:b[h].CatalogVersion,PlayFabId:c,ItemIds:[b[h].ItemId]}),p={Amount:b[h].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:c,
ItemInstanceId:t.ItemGrantResults[0].ItemInstanceId,Data:p}))}return{Inventory:b,VirtualCurrency:currencyUpdated}}
function grantUserChest(c,h){var a=server.GetCatalogItems({CatalogVersion:"Chests"}),b=server.GetUserInternalData({PlayFabId:c,Keys:["ChestSlotsStatus"]});if(void 0==b.Data.ChestSlotsStatus)return generateErrObj("No Chest Data found!");for(var b=JSON.parse(b.Data.ChestSlotsStatus.Value),e=-1,d=0;d<b.length;d++)if("Empty"==b[d].status){e=d;break}if(!(0>e)){log.debug("emptySlotFound: "+e);var d=server.GetPlayerStatistics({PlayFabId:c,StatisticNames:["TrophyCount"]}),k=0;0!=d.Statistics.length&&(k=d.Statistics[0].Value);
k=Number(k);k=Number(calculateLeague(k));log.debug("cLeague: "+k);log.debug("source: "+h);switch(h){case "endGameNormal":for(var f,g=0,l=0,n=[],d=0;d<a.Catalog.length;d++)f=JSON.parse(a.Catalog[d].CustomData),0>=Number(f.dropChance)||(g+=10*Number(f.dropChance),f=l,l=g,log.debug("chest id with drop chance found: "+a.Catalog[d].ItemId),n.push({chestId:a.Catalog[d].ItemId,leftRange:f,rightRange:l}));if(0>=n.length)b[e].chestId="SilverChest",log.debug("0 chestWeightsArrayLn");else{log.debug("chestWeightsArray: "+
JSON.stringify(n));log.debug("sumOfWeights: "+g);a=Math.floor(Math.random()*g);log.debug("randVal: "+a);g="SilverChest";for(d=0;d<n.length;d++)if(!(Number(n[d].rightRange)<=Number(a)||Number(n[d].leftRange)>Number(a))){g=n[d].chestId;log.debug("chestFoundAfterWeights: "+g);break}b[e].chestId=g;log.debug("finalCHest: "+g)}b[e].chestLeague=k;b[e].status="Occupied";b[e].orderTimeStamp=0;b[e].arrivalTimeStamp=0;break;case "endGameFreeWin":b[e].chestId="QuickChest";b[e].chestLeague=k;b[e].status="Occupied";
b[e].orderTimeStamp=0;b[e].arrivalTimeStamp=0;break;case "tutorial":b[e].chestId="QuickChest";b[e].chestLeague=1;b[e].status="Occupied";b[e].orderTimeStamp=0;b[e].arrivalTimeStamp=0;break;default:log.debug("unexpected source, returning from grantChest");return}b=JSON.stringify(b);log.debug("updating ChestSlotsStatus: "+b);server.UpdateUserInternalData({PlayFabId:c,Data:{ChestSlotsStatus:b}})}}
handlers.startGame=function(c,h){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=server.GetTitleData({Key:"LeagueSubdivisions SubdivisionTrophyRanges TrophyGainRange TrophyLoseRange SubdivisionPrRanges TrophyDifferenceLimit".split(" ")}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TotalGames"]}).Statistics,a=GetValueFromStatistics(a,"TotalGames",0),a=Number(a)+1;1==c.debug&&log.debug("totalGamesStartedIs: "+a);var e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]}),d=0;0!=e.Statistics.length&&(d=e.Statistics[0].Value);for(var d=Number(d),k=JSON.parse(b.Data.SubdivisionTrophyRanges),f=JSON.parse(b.Data.LeagueSubdivisions),g=JSON.parse(b.Data.SubdivisionPrRanges),e=JSON.parse(b.Data.TrophyDifferenceLimit),l=Number(e.trophyReadjustRange),n=Number(e.maxDifference),w=e.subDivisionsToExclude,v=43,u=43,x,B=b.Data.TrophyGainRange.split("_"),C=b.Data.TrophyLoseRange.split("_"),e=Number(B[0]),b=Number(B[1]),B=Number(C[0]),C=Number(C[1]),
m=0;m<k.subdivisions.length;m++)if(d<Number(k.subdivisions[m])){v=m;m<k.subdivisions.length-1&&(u=m+1);break}x=Number(k.subdivisions[u])-Number(k.subdivisions[v]);0>=x&&(x=400);var q=server.GetTitleInternalData({Keys:"RecSubDivision"+v}).Data["RecSubDivision"+v],p=!1;void 0==q&&(p=!0);var t,y,A,z="noop",r="noop",m=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp","quitLastGame"]});y="false;";void 0!=m.Data.quitLastGame&&(y=m.Data.quitLastGame.Value);u=!1;void 0==y&&(y="false");
"true"==y&&(u=!0);if(void 0==m.Data||void 0==m.Data.lastOpp)r=z="noop";else for(y=m.Data.lastOpp.Value.split(","),m=0;m<y.length;m++)0==m&&(z=y[m]),1==m&&(r=y[m]);t=0==p?JSON.parse(q):[];var G=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];25>t.length&&(p=!0);var F=Array(t.length),H=0,q=Array(t.length);y=0;A=Array(t.length);for(var I=0,m=0;m<t.length;m++)1==p&&(G[5*Number(t[m].e)+Number(t[m].c)]=1),t[m].uId!=currentPlayerId&&(F[H]=t[m],H++,t[m].uId!=z&&(q[y]=t[m],y++,t[m].uId!=r&&(A[I]=t[m],
I++)));if(1==p){p=[];for(m=0;m<G.length;m++)0==G[m]&&p.push(m);p=p[Math.floor(Math.random()*p.length)];m=Math.floor(p/5);p%=5;r=server.GetTitleData({Keys:"MasterUser"});if(void 0!=r.Data.MasterUser&&(r=server.GetUserReadOnlyData({PlayFabId:r.Data.MasterUser,Keys:[m+"_"+p+"_RecPos",m+"_"+p+"_RecRot",m+"_"+p+"_RecHeader"]}),void 0!=r.Data&&void 0!=r.Data[m+"_"+p+"_RecPos"]&&void 0!=r.Data[m+"_"+p+"_RecRot"]&&void 0!=r.Data[m+"_"+p+"_RecHeader"])){f=!0;0==d?(grantUserChest(currentPlayerId,"tutorial"),
d=b,f=!1):d-=B;1>=d&&(d=1);var D=[],d={StatisticName:"TrophyCount",Value:d};D.push(d);d={StatisticName:"League",Value:E};D.push(d);d={StatisticName:"TotalGames",Value:a};D.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:D});a={trophyWin:Math.floor((Number(b)+Number(e))/2),trophyLose:Math.floor((Number(C)+Number(B))/2),quitLastGame:"true"};0==f&&(a.trophyWin=0,a.trophyLose=0);1==u&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});
return{Result:"OK",RecType:"TheStig",PosData:r.Data[m+"_"+p+"_RecPos"].Value,RotData:r.Data[m+"_"+p+"_RecRot"].Value,HeaderData:r.Data[m+"_"+p+"_RecHeader"].Value,TrophyLose:B,TrophyWin:b,Opp:"TheStig"}}}if(0==H)return generateErrObj("no valid recording found for this subdivision");E=F;0<y&&(H=y,E=q);0<I&&(H=I,E=A);q=Math.floor(Math.random()*H);q>=H&&(q=H-1);y=Math.min(H,3);A=Array(y);for(m=0;m<y;m++)A[m]=0>=q?E[m]:q>=H-1?E[H-1-m]:E[q-Math.floor(y/2)+m];E=Math.floor(Math.random()*y);y=A[E].uId;q=
A[E].e;A=A[E].c;I=server.GetUserReadOnlyData({PlayFabId:y,Keys:[q+"_"+A+"_RecPos",q+"_"+A+"_RecRot",q+"_"+A+"_RecHeader"]});if(void 0==I)return generateErrObj("Did not find recording for this user: "+y);var H=server.GetPlayerCombinedInfo({PlayFabId:y,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),p=d,E=Number(calculateLeague(d)),
F="UserGenerated",r=0<E?Number(k.subdivisions[f.leagues[E-1]]):0,G=E>=f.leagues.length-1?2*r:Number(k.subdivisions[f.leagues[E]]);1==c.debug&&log.debug("I bet it will crash after this");k=JSON.parse(I.Data[q+"_"+A+"_RecHeader"].Value);1==c.debug&&log.debug("or not");void 0!=k&&(D=k.Trophies);D=Number(D);t=!0;1==c.debug&&log.debug("Adjusting trophies");if(void 0!=w)for(1==c.debug&&log.debug("excludedSubdivisionsFromTrophyAdjustment: "+w),m=0;m<w.length;m++)if(v==Number(w[m])){1==c.debug&&log.debug("in excluded subdivision: "+
v);t=!1;break}1==t&&Number(Math.abs(p-D))>=n&&(1==c.debug&&log.debug("generating new trophies. Reason: user trophies: "+p+" vs opponent trophies: "+D),D=p-l+Math.floor(Math.random()*l*2),k.Trophies=D,1==c.debug&&log.debug("performing stringify on recordingData header"),I.Data[q+"_"+A+"_RecHeader"].Value=JSON.stringify(k));0>=G-r?(l=C,n=e):Number(Math.abs(p-D))>Number(x)?(l=Math.floor((B+C)/2)-1+Math.floor(3*Math.random()),n=Math.floor((b+e)/2)-1+Math.floor(3*Math.random())):(l=B+Math.floor((C-B)/
2*((p-D)/(G-r)+1)),n=e+Math.floor((b-e)/2*((D-p)/(G-r)+1)));1==c.debug&&log.debug("Opponent's PR is TOO DAMN HIGH! "+k.Pr+" vs "+Number(g.subdivisions[Number(f.leagues[E-1])+1])+". You are in subdivision: "+Number(f.leagues[E-1]+1));k.Pr>Number(g.subdivisions[Number(f.leagues[E-1])+1])&&(l=Math.floor((B+C)/2)-1+Math.floor(3*Math.random()),n=Math.floor((b+e)/2)-1+Math.floor(3*Math.random()),F="MobyDick");e=!0;0==d?(grantUserChest(currentPlayerId,"tutorial"),e=!1,d=b):(d-=Number(l),1>=d&&(d=1));D=[];
d={StatisticName:"TrophyCount",Value:d};D.push(d);d={StatisticName:"League",Value:E};D.push(d);d={StatisticName:"TotalGames",Value:a};D.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:D});a={trophyWin:n,trophyLose:l,lastOpp:y+","+z,quitLastGame:"true"};0==e&&(a.trophyWin=0,a.trophyLose=0);1==u&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:F,PosData:I.Data[q+"_"+A+"_RecPos"].Value,RotData:I.Data[q+
"_"+A+"_RecRot"].Value,HeaderData:I.Data[q+"_"+A+"_RecHeader"].Value,TrophyLose:l,TrophyWin:n,Opp:H.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(c,h){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var b=server.GetUserInventory({PlayFabId:currentPlayerId}),e=[],d="-1",k={},f={PaintJobs:{itemOwned:"no",itemCustData:c.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:c.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:c.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:c.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:c.wsId,carItemId:"WindshieldId"}},a=0;a<b.Inventory.length;a++)b.Inventory[a].ItemId==c.carId&&"CarsProgress"==b.Inventory[a].CatalogVersion&&(d=b.Inventory[a].ItemInstanceId),b.Inventory[a].ItemId in f&&(f[b.Inventory[a].ItemId].itemOwned="yes",f[b.Inventory[a].ItemId].itemCustData in b.Inventory[a].CustomData?k[f[b.Inventory[a].ItemId].carItemId]=f[b.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+b.Inventory[a].ItemId+" "+f[b.Inventory[a].ItemId].itemCustData));if("-1"==
d)return generateFailObj("User does not own car with id: "+c.carId);for(var g in f)f.hasOwnProperty(g)&&"no"==f[g].itemOwned&&e.push(g);if(k=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d,Data:k});updateProfileCar(c,h,currentPlayerId);g=[{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:k}];if(0<e.length)for(e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,
ItemIds:e}),b={0:"Owned"},a=0;a<e.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[a].ItemInstanceId,Data:b});a={Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:g}};grantUserChest(currentPlayerId,"endGameNormal");return a};
function upgradeCar(c,h,a,b,e){for(var d=server.GetCatalogItems({CatalogVersion:"CarCards"}),k=!1,f,g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==c.carId&&"CarsProgress"==a.Inventory[g].CatalogVersion){k=!0;f=a.Inventory[g];break}for(var l,g=0;g<d.Catalog.length;g++)if(d.Catalog[g].ItemId==c.carId){l=JSON.parse(d.Catalog[g].CustomData);break}if(void 0===l)return generateErrObj("CardNotFoundForCarwithID: "+c.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===k){var n=parseInt(f.CustomData.CarLvl)+1;if(n>=Number(l.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var w=getObjectValueFromLevel(l,"currCostPerLvl",n),g=checkBalance(l.currType,w,b,e);if("OK"!=g)return g;b=getObjectValueFromLevel(l,"cardCostPerLvl",n);f.CustomData.CarLvl=n;for(var k=!1,v,g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==c.carId&&"CarCards"==a.Inventory[g].CatalogVersion){k=!0;try{if(void 0===a.Inventory[g].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===a.Inventory[g].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(a.Inventory[g].CustomData.Amount)>=b)a.Inventory[g].CustomData.Amount-=b,v={Amount:a.Inventory[g].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[g].ItemInstanceId,Data:v});else return generateFailObj("Insufficient cards for real: "+a.Inventory[g].CustomData.Amount+" vs "+b)}catch(x){return generateFailObj("Insufficient cards")}break}if(!1===
k)return generateFailObj("No cards found");a=recalculateCarPr(f.CustomData,f.ItemId,d,void 0);g={CarLvl:n,Pr:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemInstanceId,Data:g});updateProfileCar(c,h,currentPlayerId);var u;0<w&&(u=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:l.currType,Amount:w}),updateCurrencySpentStatistic(l.currType,w));v=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:v},{ItemId:c.carId,CatalogVersion:"CarsProgress",
CustomData:g}];a={};g={Inventory:v};void 0!=u&&(a[u.VirtualCurrency]=u.Balance,g.VirtualCurrency=a);g.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+l.rarity,n,!0);return generateInventoryChange("InventoryUpdate",g)}k=!1;for(g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==c.carId&&"CarCards"==a.Inventory[g].CatalogVersion){k=!0;try{if(void 0===a.Inventory[g].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===a.Inventory[g].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(a.Inventory[g].CustomData.Amount)>=Number(l.cardCostPerLvl[1]))w=a.Inventory[g].ItemInstanceId,a.Inventory[g].CustomData.Amount-=l.cardCostPerLvl[1],v={Amount:a.Inventory[g].CustomData.Amount};else return generateFailObj("Insufficient cards: "+a.Inventory[g].CustomData.Amount+" vs "+l.cardCostPerLvl[1]+".")}catch(x){return generateFailObj("Insufficient cards: "+x)}break}if(0==k)return generateFailObj("No cards found");g=checkBalance(l.currType,l.currCostPerLvl[1],b,e);if("OK"!=g)return g;
f=[];f.push(c.carId);f=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:f});if(!1===f.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:w,Data:v});0<l.currCostPerLvl[1]&&(u=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:l.currType,Amount:l.currCostPerLvl[1]}),updateCurrencySpentStatistic(l.currType,l.currCostPerLvl[1]));g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:g});g={TiresLvl:"0",TurboLvl:"0",PaintId:l.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,
Data:g});g={PlatesId:"0",WindshieldId:"0",Pr:Number(l.basePr)+l.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:g});d=f=!1;for(g=0;g<a.Inventory.length;g++)if("PaintJobs"==a.Inventory[g].ItemId){d=!0;void 0!=a.Inventory[g].CustomData?l.defaultPaintID in a.Inventory[g].CustomData?f=!0:(n={},n[l.defaultPaintID]="Owned"):(n={},n[l.defaultPaintID]="Owned");void 0!=n&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.Inventory[g].ItemInstanceId,Data:n});break}0==d&&(paintToGive=[],paintToGive.push("PaintJobs"),a=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),n={},n[l.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:n}));g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:l.defaultPaintID,
DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:Number(l.basePr)+l.prPerLvl[1]};v=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:v},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:g}];0==f&&(a={},a[l.defaultPaintID]="Owned",v.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:a}));a={};g={Inventory:v};void 0!=u&&(a[u.VirtualCurrency]=u.Balance,g.VirtualCurrency=a);updateProfileCar(c,h,currentPlayerId);g.Experience=UpdateExperience("Balancing","BalancingItem",
"Car_"+l.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",g)}
function upgradePart(c,h,a,b,e){for(var d=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),k=!1,f=0;f<d.Catalog.length;f++)if(d.Catalog[f].ItemId==c.carId){k=!0;break}if(!1===k)return generateErrObj("car with ID: "+c.carId+" not found in catalog.");for(var d=server.GetCatalogItems({CatalogVersion:"PartCards"}),k=!1,g,f=0;f<d.Catalog.length;f++)if(d.Catalog[f].ItemId==c.partId){g=JSON.parse(d.Catalog[f].CustomData);k=!0;break}if(0==k)return generateErrObj("part with ID: "+c.partId+" not found in catalog.");
for(var k=!1,l,f=0;f<a.Inventory.length;f++)if(a.Inventory[f].ItemId==c.carId&&"CarsProgress"==a.Inventory[f].CatalogVersion){k=!0;l=a.Inventory[f];break}if(!1===k)return generateFailObj("car with ID: "+c.carId+" not found in user inventory.");for(var n=!1,k=0,w={},f=0;f<a.Inventory.length;f++)if(a.Inventory[f].ItemId==c.partId&&"PartCards"==a.Inventory[f].CatalogVersion){var n=!0,v={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},
k=parseInt(l.CustomData[v[c.partId]])+1;if(k>=Number(g.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var u=getObjectValueFromLevel(g,"cardCostPerLvl",k),x=getObjectValueFromLevel(g,"currCostPerLvl",k);w[v[c.partId]]=k;l.CustomData[v[c.partId]]=k;var B;b=checkBalance(g.currType,x,b,e);if("OK"!=b)return b;try{if(void 0!==a.Inventory[f].CustomData&&void 0!==a.Inventory[f].CustomData.Amount&&a.Inventory[f].CustomData.Amount>=u)a.Inventory[f].CustomData.Amount-=u,B={Amount:a.Inventory[f].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[f].ItemInstanceId,Data:B});else return generateFailObj("Insufficient cards")}catch(m){return generateFailObj("Insufficient cards")}break}if(0==n)return generateFailObj("Part not found");var C;0<x&&(C=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g.currType,Amount:x}),updateCurrencySpentStatistic(g.currType,x));f=recalculateCarPr(l.CustomData,l.ItemId,void 0,d);w.Pr=f;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:l.ItemInstanceId,Data:w});l={};f={Inventory:[{ItemId:c.partId,CatalogVersion:"PartCards",CustomData:B},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:w}]};void 0!==C&&(l[C.VirtualCurrency]=C.Balance,f.VirtualCurrency=l);updateProfileCar(c,h,currentPlayerId);f.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+g.rarity,k,!0);return generateInventoryChange("InventoryUpdatePart",f)};
