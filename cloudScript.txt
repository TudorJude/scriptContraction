//github
handlers.endGame = function(args, context) {
  //let's recalculate the player's win/loss ratio
  var wlStat = "01";
  var wlStatInt = 0;
  var curWL = "0";
  if(args.outcome == "rWin")curWL="1";
  var ps=server.GetPlayerStatistics(
  {
     PlayFabId: currentPlayerId,
     StatisticNames: ["WinLoss"]
  });
  if(ps.Statistics.length != 0)
  {
      wlStatInt = ps.Statistics[0].Value.toString();
      log.debug("wlStatInt " + wlStatInt);
      wlStat = Number(wlStatInt).toString(2);
      log.debug("wlStat " + wlStat);
  }
  var wins = 0;
  var totalGames = 2;
  var winRatio = 0;
  log.debug("wlStat.length " + wlStat.length);
  var tempString = new Array(wlStat.length);
  log.debug("tempString.length " + tempString.length);
  for(var i = 0 ; i < tempString.length - 1; i++)
  {
    tempString[i] = wlStat[i];
  }
	tempString[tempString.length-1] = curWL; 
  log.debug("tempString " + tempString);
  wlStat = tempString;
  log.debug("wlStat " + wlStat);
	totalGames = wlStat.length;
	for(var i = 0; i < wlStat.length; i++)
	{
		if(wlStat[i] == "1") wins++;
	}
	log.debug("wlStatNew " + wlStat);

  winRatio = Math.round( 100* (wins/totalGames));
  log.debug("winRatio " + winRatio);
  //let's get some relevant title wide data
    var titleDataRequest = server.GetTitleData(
    {
      Key: ["LeagueSubdivisions","SubdivisionTrophyRanges"] 
    }
    );  
  //let's update user trophies
  var trophyCount = 0;
  var initTrophyCount = 0;
  var tc=server.GetPlayerStatistics(
  {
     PlayFabId: currentPlayerId,
     StatisticNames: ["TrophyCount"]
  });
  if(tc.Statistics.length != 0)
  {
    trophyCount = tc.Statistics[0].Value;
  }
  initTrophyCount = trophyCount;
  if(args.outcome == "rWin") 
  {
  	if(trophyCount<=0)
  		trophyCount = 30;
  	else
  		trophyCount += 60;
  }
  log.debug("trophies change: " + initTrophyCount + " => " + trophyCount);
  var cLeague = calculateLeague(trophyCount);
  wlStatInt = 0;
  for(var i = 0 ; i < wlStat.length; i++ )
  {
    if(wlStat[i] == "1")
      wlStatInt += Math.pow(2,i);
  }
  //update stats on server
  var suArray = [];
  var su = {StatisticName : "WinLoss", Version : "0", Value: wlStatInt};
  suArray.push(su);  
  var sut = {StatisticName : "TrophyCount", Version : "0", Value: trophyCount};
  suArray.push(sut); 
  var sut = {StatisticName : "League", Version : "0", Value: cLeague};
  suArray.push(sut); 
  var updateRequest = server.UpdatePlayerStatistics(
  {
    PlayFabId: currentPlayerId,
    Statistics: suArray
  }
  );  
  //user ran out of time so we don't store recording
  if(args.outcome == "rOot") 
    {
        var newPlayerStats = 
        {
          "TrophyCount" : trophyCount,
          "League" : cLeague
        }
        return {Result : newPlayerStats};
    }

  //let's see which Subdivision this player is in
  var sdval = titleDataRequest.Data["SubdivisionTrophyRanges"];
  var sdvalParsed = JSON.parse(sdval);
  log.debug("SubdivisionTrophyRanges " + sdvalParsed);
  var subDivision;
  for(var i = 0; i < sdvalParsed.subdivisions.length; i++) 
  {
  	if(initTrophyCount<sdvalParsed.subdivisions[i])
  	{
		subDivision = i;
		break;
  	}
  }
log.debug("user is in subdivision " + subDivision);
	//let's save the player's recording
 var dict = [];
    dict.push({
        Key:   args.envIndex+"_"+args.courseIndex+"_RecPos", 
        Value: args.recordingPos
    });  
      dict.push({
            Key:  args.envIndex+"_"+args.courseIndex+"_RecRot", 
        Value: args.recordingRot
    });  
       dict.push({
            Key:  args.envIndex+"_"+args.courseIndex+"_RecHeader", 
        Value: args.recordingHeader
    });  
       log.debug("updating user read only data ");
  var playerData = server.UpdateUserReadOnlyData( 
    {
      PlayFabId: currentPlayerId,
      Data:dict
    }
  );  
  log.debug("updated user read only data for " + currentPlayerId + " " + playerData);
  var titleDataVal = server.GetTitleInternalData(
    {
      Key: "RecSubDivision"+subDivision, //i.e RecSubDivision0,
    }
    );  
  var recPool = titleDataVal.Data["RecSubDivision"+subDivision];
  log.debug("recPool: " + recPool);
  var recArray;
  var titleKeyVal;
  if(recPool == undefined)
  {
  	recArray = [];
  	var recObj =
  	{
  		"wl": winRatio,
  		"e": args.envIndex,
  		"c": args.courseIndex,
  		"uId": currentPlayerId
  	}
  	recArray.push(recObj);
  	titleKeyVal = JSON.stringify(recArray); 
  	log.debug("recArray: " + titleKeyVal);
  }
  else
  {
  	recArray = JSON.parse(recPool);  
  	log.debug("recArray: " + recArray);
  	var recObj =
  	{
  		"wl": winRatio,
  		"e": args.envIndex,
  		"c": args.courseIndex,
  		"uId": currentPlayerId
  	}
  	var uniqueKeyExists = false;
    //let's only keep 2 recordings per user per subdivision at max
    var currentOccurencesOfPlayer = 0;
    for(var i = 0; i < recArray.length; i++)
    {
      if(recArray[i].uId == currentPlayerId)
        currentOccurencesOfPlayer++;
    }
    if(currentOccurencesOfPlayer > 2) // no use letting the user spam his recordings on the same subdivision
    {
      var newPlayerStats = 
      {
          "TrophyCount" : trophyCount,
          "League" : cLeague
      }
      return {Result : newPlayerStats};
    }
    
  	for(var i = 0; i < recArray.length; i++)
  	{
  		if((recArray[i].e == args.envIndex)&&(recArray[i].c == args.courseIndex))
  		{
			uniqueKeyExists = true;
			recArray[i] = recObj;
			if(recArray.length == 1) break; //if it's the only recording there is no use to sort anymore
			if(i > 0) // if not first
			{
				if(recArray[i].wl > recArray[i-1].wl) // if bigger than left we start comparing to elements to the right
				{
					if(i == recArray.length-1) break; // there are no more elements to the right so no more sorting required
					for(var j = i + 1; j < recArray.length; j++) // we check elements i+1 to length-1
					{
						if(recArray[j - 1].wl > recArray[j].wl) // if wl of element j - 1 is greater than that of element j we swap them
						{
							var aux = recArray[j];
							recArray[j] = recArray[j - 1];
							recArray[j - 1] = aux;
						}
						else // the element stays where it is 
						{
							break;
						}
					}
				}
				else // not bigger than the left let's start comparing with elements to the left
				{
					for(var j = i - 1; j >= 0; j--) // we check elements i-1 to 0
					{
						if(recArray[j + 1].wl < recArray[j].wl) // if wl of element j + 1 is smaller than that of element j we swap them
						{
							var aux = recArray[j];
							recArray[j] = recArray[j + 1];
							recArray[j + 1] = aux;
						}
						else // the element stays where it is 
						{
							break;
						}
					}
				}
		    } // if(i > 0)
		    else
		    {
					for(var j = i + 1; j < recArray.length; j++) // we check elements i+1 to length-1
					{
						if(recArray[j - 1].wl > recArray[j].wl) // if wl of element j - 1 is greater than that of element j we swap them
						{
							var aux = recArray[j];
							recArray[j] = recArray[j - 1];
							recArray[j - 1] = aux;
						}
						else // the element stays where it is 
						{
							break;
						}
					}
		    }
  		}
  	}
  	if(uniqueKeyExists == false)
  	{
  	  log.debug("recArrayLNbefore: " + recArray.length);
  	  recArray.push(recObj);
  	  log.debug("recArrayLNafter: " + recArray.length);
    }
  	titleKeyVal = JSON.stringify(recArray);  
  	log.debug("titleKeyVal: " + titleKeyVal);
  }
  
  var titleData = server.SetTitleInternalData(
    {
      Key: "RecSubDivision"+subDivision, //Recording_0_0
      Value: titleKeyVal
    }
    );
   var newPlayerStats = 
     {
          "TrophyCount" : trophyCount,
          "League" : cLeague
      }
  return {Result : newPlayerStats};
}

handlers.startGame = function(args, context) {
  //let's see what subleague we are in and what win/loss ration we have
  //wlratio
  var wlStat = "01"; // 50/50 for newtimers
  var wlStatInt = 0; // 50/50 for newtimers
  var winRatio = 50;
  var totalGames = 2;
  var wins = 0;
  var ps=server.GetPlayerStatistics(
  {
     PlayFabId: currentPlayerId,
     StatisticNames: ["WinLoss"]
  });
  if(ps.Statistics.length != 0)
  {
      wlStatInt = ps.Statistics[0].Value.toString();
      wlStat = Number(wlStatInt).toString(2);      
      totalGames = wlStat.length;
      for(var i = 0; i < wlStat.length; i++)
      {
        if(wlStat[i] == "1") wins++;
      }
      winRatio = Math.round( 100* (wins/totalGames));
  }
  //start game so we assume it'sa lose until it's a win
  log.debug("wlStatBeforeshiftandAdd " + wlStat);
  wlStat += "0";
  log.debug("wlStatBeforeshift " + wlStat);
   if(wlStat.length > 20)
   {
    wlStat.shift();
   }
   log.debug("wlStat " + wlStat);
  //trophy count and subleague distribution
  var leagueTitleDataRequest = server.GetTitleData(
    {
      Key: ["LeagueSubdivisions","SubdivisionTrophyRanges"] 
    }
    );  
  var tc=server.GetPlayerStatistics(
  {
     PlayFabId: currentPlayerId,
     StatisticNames: ["TrophyCount"]
  });
  var trophyCount = 0;
  if(tc.Statistics.length != 0)
  {
    trophyCount = tc.Statistics[0].Value;    
  }
  var sdval = leagueTitleDataRequest.Data["SubdivisionTrophyRanges"];
  var sdvalParsed = JSON.parse(sdval);
  log.debug("SubdivisionTrophyRanges " + sdvalParsed);
  var subDivision = 43;
  for(var i = 0; i < sdvalParsed.subdivisions.length; i++) 
  {
    if(trophyCount<sdvalParsed.subdivisions[i])
    {
      subDivision = i;
      break;
    }
  }
  log.debug("user is in subdivision " + subDivision);

  //matchmaking code
  //let's get subdivision and neighbouring subdivisions
  var subDivKeys = ["RecSubDivision"+subDivision];
  var titleData = server.GetTitleInternalData(
    {
      Keys : "RecSubDivision"+subDivision
    }
    ); 
  var recPool = titleData.Data["RecSubDivision"+subDivision];
  var isIncompleteSubDivision = false;
  //log.debug("recPool " + recPool);
  if(recPool == undefined) isIncompleteSubDivision = true;
  var recArray;
  var opponentId;
  var env;
  var course;
  if(isIncompleteSubDivision == false)
  {
    recArray = JSON.parse(recPool);
    opponentId = recArray[recArray.length - 1].uId;
    env = recArray[recArray.length - 1].e;
    course = recArray[recArray.length - 1].c;
  }
  else
  {
    recArray = [];
  }

  //default recording code
  var subDivisionLength = 15; // we have 15 possible courses
  var envCourseArray = 
  [
  0,0,0,0,0,
  0,0,0,0,0,
  0,0,0,0,0
  ]
  log.debug("subrecording pool has " + recArray.length + " length. Must have: " + subDivisionLength + " length");

  if(recArray.length < subDivisionLength) isIncompleteSubDivision = true;

  var validRecArray = new Array(recArray.length);
  var vrAidx = 0;
  log.debug("iterating through recArray");
  for(var i = 0; i < recArray.length; i++) // create valid rec pool OR check for missing env/course if subDivision has missing recordings
  {    
      if(isIncompleteSubDivision == true)
      {
        envCourseArray[Number(recArray[i].e)*5 + Number(recArray[i].c)] = 1;
      }
      if(recArray[i].uId == currentPlayerId) 
        {
          log.debug("found: " + recArray[i].uId + "... skipping");
          continue;
        }
        validRecArray[vrAidx] = recArray[i];
        vrAidx++;
    
  }
log.debug("isIncompleteSubDivision: " + isIncompleteSubDivision);
//let's give default recording if necessary
if(isIncompleteSubDivision == true)
{
  var envToGet = 0;
  var courseToGet = 0;
  for(var i = 0; i < envCourseArray.length; i++)
  {
    if(envCourseArray[i] == 0)// we found a missing recording <- e = i/5; c = i%5;
    {
      envToGet = Math.floor(i/5);
      courseToGet = i%5;
      break;
    }
  }
   log.debug("gettingDefaultUser: env: " + envToGet + " course: " + courseToGet);
  //let's see who the master account is
    var masterAccountRequest = server.GetTitleData(
    {
      Keys : "MasterUser"
    }
    ); 
    if(masterAccountRequest.Data["MasterUser"] != undefined)
    {
      log.debug("master user: " + masterAccountRequest.Data["MasterUser"]);
      var defaultRecordingData = server.GetUserReadOnlyData(
      {
        PlayFabId: masterAccountRequest.Data["MasterUser"],
        Keys: [(envToGet + "_" + courseToGet + "_RecPos") , (envToGet + "_" + courseToGet + "_RecRot"), (envToGet + "_" + courseToGet + "_RecHeader")]
      }
      );
      if(defaultRecordingData.Data != undefined)
      {
        log.debug("defaultRecordingData: " + defaultRecordingData.Data);
        if((defaultRecordingData.Data[envToGet + "_" + courseToGet + "_RecPos"] != undefined) && (defaultRecordingData.Data[envToGet + "_" + courseToGet + "_RecRot"] != undefined) && (defaultRecordingData.Data[envToGet + "_" + courseToGet + "_RecHeader"] != undefined))
        { // looks like we found a valid default recording
          log.debug("found valid default rec");
          return {
            Result :"OK",
            RecType: "Default",
            PosData: defaultRecordingData.Data[envToGet + "_" + courseToGet + "_RecPos"].Value, //0_0_RecPos
            RotData: defaultRecordingData.Data[envToGet + "_" + courseToGet + "_RecRot"].Value,
            HeaderData: defaultRecordingData.Data[envToGet + "_" + courseToGet + "_RecHeader"].Value,
            Opp: "Mniezo"
                 };
        }
      }
    }
}
log.debug("looking for user generated recording");
  if(vrAidx == 0) return generateErrObj("no valid recording found for this subdivision");
  var pivot = vrAidx - 1; //in case your WLRatio is the highest in the pool
  for(var i = 0; i < vrAidx; i++) // write winstreak/losestreak code
  {    
    if(validRecArray[i].wl > winRatio) //let's find the pivot; we'll move it later based on WL ratio
    {
      pivot = i;
      break;
      //opponentId = recArray[i].uId;
      //env = recArray[i].e;
      //course = recArray[i].c;
    }
  }
  log.debug("pivot is: " + pivot);
  var finalRecArraySize = Math.min(vrAidx, 3); // for now 3 is the max number of recordings in the random final pool
  log.debug("finalRecArraySize: " + finalRecArraySize);
  var finalRecArray = new Array(finalRecArraySize); // this array will be populated with the recordings around the pivot
  for(var i = 0; i < finalRecArraySize; i++)
  {
    if(pivot <= 0) // get rightmost recordings
    {
      finalRecArray[i] = validRecArray[i];
      continue;
    }
    if(pivot >= vrAidx - 1) // get leftmost recordings
    {
      finalRecArray[i] = validRecArray[vrAidx - 1 - i];
      continue;
    }
    finalRecArray[i] = validRecArray[(pivot - finalRecArraySize/2) + i]; // get inner recordings
  }
  log.debug("finalRecArray: " + finalRecArray);
  var randIdx = Math.floor(Math.random() * finalRecArraySize); // let's get a random one from this final pool
    opponentId = finalRecArray[randIdx].uId;
    env = finalRecArray[randIdx].e;
    course = finalRecArray[randIdx].c;
  var urodkr = [(env + "_" + course + "_RecPos") , (env + "_" + course + "_RecRot"), (env + "_" + course + "_RecHeader")]; 
  log.debug("requesting " + urodkr);
  var recordingData = server.GetUserReadOnlyData(
    {
      PlayFabId: opponentId,
      Keys: urodkr
    }
    );
  if(recordingData == undefined) return generateErrObj("Did not find recording for this user: " + opponentId); // handle this later
  //end matchmaking

  var oI = server.GetPlayerCombinedInfo(
    {
      PlayFabId:opponentId,
      InfoRequestParameters: {"GetUserAccountInfo": true,"GetUserInventory": false,"GetUserVirtualCurrency": false,"GetUserData": false,"GetUserReadOnlyData": false,"GetCharacterInventories": false,"GetCharacterList": false, "GetTitleData": false,"GetPlayerStatistics": false}
    }
    );
  //found recording now let's reduce user's trophies
  trophyCount -= 30;
  if(trophyCount <= 0) trophyCount = 0;
  wlStatInt = parseInt(wlStat, 2);
  log.debug("updating WL to:  " + wlStatInt);
  var cLeague = calculateLeague(trophyCount);
  //update stats on server
  var suArray = [];
  var su = {StatisticName: "WinLoss", Version : "0", Value: wlStatInt};
  suArray.push(su);  
  var sut = {StatisticName: "TrophyCount", Version : "0", Value: trophyCount};
  suArray.push(sut); 
  var sul = {StatisticName: "League", Version : "0", Value: cLeague};
  suArray.push(sul); 
  log.debug("updatingStats: " + suArray);
  var updateRequest = server.UpdatePlayerStatistics(
  {
    PlayFabId: currentPlayerId,
    Statistics: suArray
  }
  );

  return {
    Result :"OK",
    RecType: "UserGenerated",
    PosData: recordingData.Data[env + "_" + course + "_RecPos"].Value, //0_0_RecPos
    RotData: recordingData.Data[env + "_" + course + "_RecRot"].Value,
    HeaderData: recordingData.Data[env + "_" + course + "_RecHeader"].Value,
    Opp: oI.InfoResultPayload.AccountInfo.TitleInfo.DisplayName
         };
}

// matchmaking code
handlers.updateTrophyCount = function(args, context) {
  var t = 0;
  var ps=server.GetPlayerStatistics(
  {
     PlayFabId: currentPlayerId,
     StatisticNames: ["TrophyCount"]
  });
  if(ps.Statistics.length != 0)
  {
    t = ps.Statistics[0].Value;
  }
  if(args.val == "rStart") t-=30;
  if(t < 0) t=0;
  if(args.val == "rWin") t+=60;
  if(args.val == "rLose") return {val:t};
  var suArray = [];
  var su = {StatisticName : "TrophyCount", Version : "0", Value: t};
  suArray.push(su);  
  var updateRequest = server.UpdatePlayerStatistics(
  {
    PlayFabId: currentPlayerId,
    Statistics: suArray
  }
  );
  if(args.val == "rWin") return {val:t};
}

handlers.initServerData = function(args)
{
//create trophy statistic
var suArray = [];

var su = {StatisticName : "TrophyCount", Version : "0", Value: "0"};
suArray.push(su);
su = {StatisticName : "League", Version : "0", Value: "0"};
suArray.push(su);

var updateRequest = server.UpdatePlayerStatistics(
{
  PlayFabId: currentPlayerId,
  Statistics: suArray
}
);
var itemsToGive = [];
itemsToGive.push("Decals");
itemsToGive.push("PaintJobs");
itemsToGive.push("Plates");
itemsToGive.push("Rims");
itemsToGive.push("WindshieldText");

var grantRequest = server.GrantItemsToUser(
  {
    CatalogVersion : "Customization",
    PlayFabId: currentPlayerId,
    ItemIds : itemsToGive
  }
  );  

var InvData = {0 : "Owned"};

for(var i = 0; i < grantRequest.ItemGrantResults.length; i++)
{
  server.UpdateUserInventoryItemCustomData(
       {
         PlayFabId: currentPlayerId,
         ItemInstanceId: grantRequest.ItemGrantResults[i].ItemInstanceId,
         Data: InvData
       }
       );
}
var carsToGive = [];
carsToGive.push("FordFocus");    
var carRequest = server.GrantItemsToUser(
{
  CatalogVersion : "CarsProgress",
  PlayFabId: currentPlayerId,
  ItemIds : carsToGive
}
); 
var CarData = {"CarLvl" : "1","EngineLvl" : "0","ExhaustLvl" : "0","GearboxLvl" : "0","SuspensionLvl" : "0"};
server.UpdateUserInventoryItemCustomData(
{
  PlayFabId: currentPlayerId,
  ItemInstanceId: carRequest.ItemGrantResults[0].ItemInstanceId,
  Data: CarData
}
);
CarData = {"TiresLvl" : "0","TurboLvl" : "0","PaintId" : "0","DecalId" : "0","RimsId" : "0"};
server.UpdateUserInventoryItemCustomData(
{
  PlayFabId: currentPlayerId,
  ItemInstanceId: carRequest.ItemGrantResults[0].ItemInstanceId,
  Data: CarData
}
);
CarData = {"PlatesId" : "0","WindshieldId" : "0","Pr" : "10"};
server.UpdateUserInventoryItemCustomData(
{
  PlayFabId: currentPlayerId,
  ItemInstanceId: carRequest.ItemGrantResults[0].ItemInstanceId,
  Data: CarData
}
);
var addUserCurrencyResult = server.AddUserVirtualCurrency(
{
  PlayFabId: currentPlayerId,
  VirtualCurrency : "SC",
  Amount: 3000
}
);
var addUserCurrencyResult = server.AddUserVirtualCurrency(
{
  PlayFabId: currentPlayerId,
  VirtualCurrency : "HC",
  Amount: 200
}
); 
}
handlers.requestInventory = function(args)
{
  var userInventoryObject = server.GetUserInventory(
  {
    PlayFabId: currentPlayerId,
  }
  );
  //get catalog data for pr calculation
    var carCardsCatalog = server.GetCatalogItems(
         {
           CatalogVersion : "CarCards"
         }
         );
    var partCardsCatalog = server.GetCatalogItems(
       {
         CatalogVersion : "PartCards"
       }
       );
  for(var i = 0; i < userInventoryObject.Inventory.length; i++)
  {
    if(userInventoryObject.Inventory[i].CatalogVersion == "CarsProgress")
    {
      var check = checkCarDataValidity(userInventoryObject.Inventory[i], carCardsCatalog);
      log.debug("check " + check);
      if((check == "PlayFabError") || (check == undefined)) return generateErrObj("PlayfabError");
      else if(check == "OK") log.debug("Data for " + userInventoryObject.Inventory[i].ItemId + " OK");
           else userInventoryObject.Inventory[i].CustomData = check;
      userInventoryObject.Inventory[i].CustomData.Pr = recalculateCarPr(userInventoryObject.Inventory[i].CustomData, userInventoryObject.Inventory[i].ItemId, carCardsCatalog, partCardsCatalog); 
      var d = {};
      d["Pr"] = userInventoryObject.Inventory[i].CustomData.Pr;
      server.UpdateUserInventoryItemCustomData( // if this doesn't happen it's still fine; we might actually be able to skip this entirely
      {
        PlayFabId: currentPlayerId,
        ItemInstanceId: userInventoryObject.Inventory[i].ItemInstanceId,
        Data: d
      }
      );
    }
  }
  return userInventoryObject;
}
function checkCarDataValidity(inventoryCarData, carCardsCatalog) 
{
  if(inventoryCarData.CustomData == undefined)
  {
    try
    {
          var CarData = {
              "CarLvl" : "1",
              "EngineLvl" : "0",
              "ExhaustLvl" : "0",
              "GearboxLvl" : "0",
              "SuspensionLvl" : "0"           
            };
        
          server.UpdateUserInventoryItemCustomData(
              {
                PlayFabId: currentPlayerId,
                ItemInstanceId: inventoryCarData.ItemInstanceId,
                Data: CarData
              }
              );
              CarData = {
                    "TiresLvl" : "0",
                    "TurboLvl" : "0",
                    "PaintId" : "0",
                    "DecalId" : "0",
                    "RimsId" : "0"           
                  };
              server.UpdateUserInventoryItemCustomData(
              {
                PlayFabId: currentPlayerId,
                ItemInstanceId: inventoryCarData.ItemInstanceId,
                Data: CarData
              }
              );
              var pr = 0;
              for(var i =0; i < carCardsCatalog.Catalog.length; i++)
              {
                  if(carCardsCatalog.Catalog[i].ItemId == inventoryCarData.ItemId)
                  {
                    var carCardInfo = JSON.parse(carCardsCatalog.Catalog[i].CustomData);
                    pr = parseInt(carCardInfo.basePr);
                    break;
                  }
              }
              CarData = {
                    "PlatesId" : "0",
                    "WindshieldId" : "0",
                    "Pr" : pr              
                  };
              server.UpdateUserInventoryItemCustomData(
              {
                PlayFabId: currentPlayerId,
                ItemInstanceId: inventoryCarData.ItemInstanceId,
                Data: CarData
              }
              );
       }
       catch(err)
       {
        return "PlayFabError";
       }
       var newData = {
              "CarLvl" : "1",
              "EngineLvl" : "0",
              "ExhaustLvl" : "0",
              "GearboxLvl" : "0",
              "SuspensionLvl" : "0", 
              "TiresLvl" : "0",
              "TurboLvl" : "0",
              "PaintId" : "0",
              "DecalId" : "0",
              "RimsId" : "0" ,
              "PlatesId" : "0",
              "WindshieldId" : "0",
              "Pr" : pr  
       }
       return newData;
  }
  return "OK";
}
function generateFailObj(mess)
{
  var retObj = {
    Result: "Failed",
    Message: mess
  };
  return retObj;
}

function generateErrObj(mess)
{
  var retObj = {
    Result: "Error",
    Message: mess
  };
  return retObj;
}

function checkBalance(currType, cost, userSCBalance, userHCBalance)
{
  if(currType == "SC")
  {
    if(userSCBalance < cost)
      return generateFailObj("NotEnoughSC");
  }
  else
  {
    if(userHCBalance < cost)
      return generateFailObj("NotEnoughHC");
  }
  return "OK";
}

function calculateLeague(currentTrophies)
{
  var league = 1;
  td = server.GetTitleData(
  {
    Keys : ["LeagueSubdivisions", "SubdivisionTrophyRanges"]
  });
  if(td.Data["LeagueSubdivisions"] == undefined) return league;
  if(td.Data["SubdivisionTrophyRanges"] == undefined) return league;
  var leaguesSubdivisions = JSON.parse(td.Data.LeagueSubdivisions);
  var leaguesSubdivisionsParsed = leaguesSubdivisions.leagues;
  var sdvtr = JSON.parse(td.Data.SubdivisionTrophyRanges);
  var sdvtrParsed = sdvtr.subdivisions;

  for(var i = 0; i < leaguesSubdivisionsParsed.length; i++)
  {
    if(Number(currentTrophies) > Number(sdvtrParsed[leaguesSubdivisionsParsed[i]]))
      continue;
      return i;
  }
}

function recalculateCarPr(CarData, carId, _carCardsCatalog, _partsCardCatalog) 
{
    var pr = 0;
    var carCardsCatalog;
    if(_carCardsCatalog == undefined)
    {
      carCardsCatalog = server.GetCatalogItems(
         {
           CatalogVersion : "CarCards"
         }
         );
    }
    else
    {
      carCardsCatalog = _carCardsCatalog;
    }
    for(var i = 0; i < carCardsCatalog.Catalog.length; i++)
    {
      if(carCardsCatalog.Catalog[i].ItemId == carId)
      {
        var carCardInfo = JSON.parse(carCardsCatalog.Catalog[i].CustomData);
        pr += parseInt(carCardInfo.basePr) + (parseInt(carCardInfo.prPerLvl) * (parseInt(CarData.CarLvl) - 1));
        break;
      }
    }
  
    //calcualte pr based on each part level
    var partCardsCatalog;
    if(_partsCardCatalog == undefined)
    {
      partCardsCatalog = server.GetCatalogItems(
       {
         CatalogVersion : "PartCards"
       }
       );
    }
    else
    {
      partCardsCatalog = _partsCardCatalog;
    }

    var tempDict = 
        {
          Exhaust: CarData.ExhaustLvl,
          Engine: CarData.EngineLvl,
          Gearbox: CarData.GearboxLvl,
          Suspension: CarData.SuspensionLvl,
          Tires: CarData.TiresLvl,
          Turbo: CarData.TurboLvl
        };
    var partCardInfo;
    for(var i = 0; i < partCardsCatalog.Catalog.length; i++) //refactored
    {
      partCardInfo = JSON.parse(partCardsCatalog.Catalog[i].CustomData);
      pr += parseInt(partCardInfo.basePr) + (parseInt(partCardInfo.prPerLvl) * tempDict[partCardsCatalog.Catalog[i].ItemId]);
    }  
  return pr;
}

function GenerateBlackMarket(currentPlayerId)
{
  //getting parts        
  var partsCatalog = server.GetCatalogItems(
     {
       CatalogVersion : "PartCards"
     }
     );
  var dataToUpdate = {};
  var d = new Date();
  dataToUpdate["BMTime"] = d.getTime();
  //get first part
  var part0Index = Math.floor(Math.random() * partsCatalog.Catalog.length);
  var cardParsed = JSON.parse(partsCatalog.Catalog[part0Index].CustomData);
  if(cardParsed == undefined) return generateErrObj("Part card " + partsCatalog.Catalog[i].ItemId + " has no custom data.");
  dataToUpdate["BMItem0"] = partsCatalog.Catalog[part0Index].ItemId + "_" + cardParsed.BMCurrType + "_" + cardParsed.BMbasePrice + "_" + 0 + "_" + cardParsed.BMpriceIncrPerBuy;
  //generate second part card
  var part1Index = Math.floor(Math.random() * partsCatalog.Catalog.length);
  if(part1Index == part0Index) part1Index = partsCatalog.Catalog.length - part0Index - 1;
  cardParsed = JSON.parse(partsCatalog.Catalog[part1Index].CustomData);
  if(cardParsed == undefined) return generateErrObj("Part card " + partsCatalog.Catalog[i].ItemId + " has no custom data.");
  dataToUpdate["BMItem1"] = partsCatalog.Catalog[part1Index].ItemId + "_" + cardParsed.BMCurrType + "_" + cardParsed.BMbasePrice + "_" + 0 + "_" + cardParsed.BMpriceIncrPerBuy;
  //getting car cards
  var carsCatalog = server.GetCatalogItems(
   {
     CatalogVersion : "CarCards"
   }
   );
  var carCardParsed;
  var nonRareIndexes = [];
  var rareIndexes = [];
  for(var i = 0; i < carsCatalog.Catalog.length; i++)
  {
    carCardParsed = JSON.parse(carsCatalog.Catalog[i].CustomData)
    if(carCardParsed == undefined) return generateErrObj("Car card " + carsCatalog.Catalog[i].ItemId + " has no custom data.");
    if(carCardParsed.rareCar == "false")
      nonRareIndexes.push(carsCatalog.Catalog[i].ItemId + "_" + carCardParsed.BMCurrType + "_" + carCardParsed.BMbasePrice + "_" + 0 + "_" + carCardParsed.BMpriceIncrPerBuy);
    else
      rareIndexes.push(carsCatalog.Catalog[i].ItemId + "_" + carCardParsed.BMCurrType + "_" + carCardParsed.BMbasePrice + "_" + 0 + "_" + carCardParsed.BMpriceIncrPerBuy);
  }
  if(nonRareIndexes.length <= 0)
  {
    dataToUpdate["BMItem2"] = rareIndexes[Math.floor(Math.random() * rareIndexes.length)];
    dataToUpdate["BMItem3"] = rareIndexes[Math.floor(Math.random() * rareIndexes.length)];
  }
  else
    if(rareIndexes.length <= 0)
    {
      dataToUpdate["BMItem2"] = nonRareIndexes[Math.floor(Math.random() * nonRareIndexes.length)];
      dataToUpdate["BMItem3"] = nonRareIndexes[Math.floor(Math.random() * nonRareIndexes.length)];
    }
    else
    {
        dataToUpdate["BMItem2"] = nonRareIndexes[Math.floor(Math.random() * nonRareIndexes.length)];
      dataToUpdate["BMItem3"] = rareIndexes[Math.floor(Math.random() * rareIndexes.length)];
    }  
  server.UpdateUserInternalData(
    {
      PlayFabId : currentPlayerId,
      Data : dataToUpdate
    }
  );
  var tK = [];
  tK.push("BlackMarketResetMinutes");
  var tData = server.GetTitleData(
    {
      PlayFabId : currentPlayerId,
      Keys : tK
    }
    );
  dataToUpdate["BMTime"] = parseInt(tData.Data.BlackMarketResetMinutes) * 60;
  return dataToUpdate;
}

function GetCurrentBlackMarket(currentPlayerId, getInternalDataResult)
{
  var bmObj = {};
  var d = new Date();
  
  var tK = [];
  tK.push("BlackMarketResetMinutes");
  var tData = server.GetTitleData(
    {
      PlayFabId : currentPlayerId,
      Keys : tK
    }
    );
  
  bmObj["BMTime"] = parseInt(tData.Data.BlackMarketResetMinutes) * 60 - Math.floor((d.getTime() - getInternalDataResult.Data.BMTime.Value) / 1000);  
  for(var i = 0; i < 4; i++)
  {
    bmObj["BMItem" + i] = getInternalDataResult.Data["BMItem" + i].Value; 
  }
  return bmObj;
}

handlers.purchaseBMItem = function(args, context)
{
  log.debug("purchasing item " + args.itemId + " from black market");
  if((args.itemId < 0) || (args.itemId > 3)) return generateFailObj("invalid item index");
  var keysToGet = [];
  keysToGet.push("BMItem" + args.itemId);
  
  var getInternalDataResult = server.GetUserInternalData(
  {
    PlayFabId: currentPlayerId,
    Keys: keysToGet
  }
  );

  var userInventoryObject = server.GetUserInventory(
  {
    PlayFabId: currentPlayerId
  }
  );
  
  var userArray = getInternalDataResult.Data["BMItem" + args.itemId].Value.split("_");//name, curr, baseCost, uses, costUse
  log.debug("userArray: " + userArray);
  var playerMoney = userInventoryObject.VirtualCurrency[userArray[1]];
  
  if(userArray.length != 5)
  {
    generateErrObj("User Black Market corrupted. Try again tomorrow");
  }
  
  var catalogName = "";
  if(args.itemId < 2)
    catalogName = "PartCards";
  else
    catalogName = "CarCards";
  
  var price = parseInt(userArray[2]) + parseInt(userArray[3])* parseInt(userArray[4]);
  var checkObj = checkBalance(userArray[1], price, playerMoney, playerMoney);
  if(checkObj != "OK") return checkObj;
  //try
  //{
    var cardInstance;
    var cardAmount = 0;
    var cardData;
    log.debug("searching for: " + userArray[0] + " in " + catalogName);
    for(var i = 0; i < userInventoryObject.Inventory.length; i++) // if we find it in the inventory we just give him the amount of cards we owe the player
    {
      if((userInventoryObject.Inventory[i].ItemId == userArray[0]) && (userInventoryObject.Inventory[i].CatalogVersion == catalogName))
      {
        log.debug("found it!");
        cardInstance = userInventoryObject.Inventory[i].ItemInstanceId;     
        if(userInventoryObject.Inventory[i].CustomData == undefined)
        {
          log.debug("no custom data. creating ...");
          cardData = {"Amount" : 1};
        }
        else
        {
          if(userInventoryObject.Inventory[i].CustomData.Amount == undefined) 
            cardData = {"Amount" : 1};
          else
          {
          var tempAmount = Number(userInventoryObject.Inventory[i].CustomData.Amount) + 1;
          if(isNaN(tempAmount)) tempAmount = 1;
          cardData = {"Amount" : tempAmount};
          }
        }

        server.UpdateUserInventoryItemCustomData(
              {
                PlayFabId: currentPlayerId,
                ItemInstanceId: cardInstance,
                Data: cardData
              }
              );

        break;
      }
    }
    if(cardInstance == undefined)
    {
      log.debug("cardInstance is undefined");
      var itemsToGive = [];
      itemsToGive.push(userArray[0]);
      var grantRequest = server.GrantItemsToUser(
        {
          CatalogVersion : catalogName,
          PlayFabId: currentPlayerId,
          ItemIds : itemsToGive
        }
        );
      cardInstance = grantRequest.ItemGrantResults[0].ItemInstanceId;
      if(cardInstance == undefined) 
        generateErrObj("grantRequest denied");
      else
      {
        cardData = {"Amount" : 1};
        server.UpdateUserInventoryItemCustomData(
          {
            PlayFabId: currentPlayerId,
            ItemInstanceId: cardInstance,
            Data: cardData
          }
          );
      }
    }
    var subtractUserCurrencyResult = server.SubtractUserVirtualCurrency(
      {
        PlayFabId: currentPlayerId,
        VirtualCurrency : userArray[1],
        Amount: price
      }
      );
    var itemVal = userArray[0] + "_" + userArray[1] + "_" + userArray[2] + "_"  + (parseInt(userArray[3]) + 1) + "_" +  userArray[4];
    log.debug("generatedArray: " + itemVal);
    var dataToUpdate = {};
    dataToUpdate["BMItem" + args.itemId] = itemVal;
    server.UpdateUserInternalData(
      {
        PlayFabId : currentPlayerId,
        Data : dataToUpdate
      }  );
    var objectsUpdated = 
        [
        {
          ItemId : userArray[0],
          CatalogVersion: catalogName,
          CustomData: cardData
        }
        ];
      
      var currencyUpdated = {};
      currencyUpdated[subtractUserCurrencyResult.VirtualCurrency] = subtractUserCurrencyResult.Balance;
      var b=args.itemId+"_"+userArray[2]+"_"+(parseInt(userArray[3]) + 1)+"_"+userArray[4];
      var i= 
          {
            Inventory: objectsUpdated,
          VirtualCurrency: currencyUpdated
          }
      var returnObj = {
        Result: "OK",
        Message: "InventoryUpdate",
        InventoryChange:i,
        BMItemChange: b
      };
      return returnObj;
  //}
  //catch(err)
  //{
  //  generateErrObj("Something went horribly wrong somewhere: " + err);
 // }
  
}

handlers.retrieveBlackMarket = function(args, context)
{
  //let's get last BM Time Call
  var keysToGet = [];
  keysToGet.push("BMTime");
  for(var i = 0; i < 4; i++)
  {
    keysToGet.push("BMItem" + i);
  }
  
  var getInternalDataResult = server.GetUserInternalData(
    {
      PlayFabId: currentPlayerId,
      Keys: keysToGet
    }
    );
  
  if(getInternalDataResult.Data.BMTime == undefined)
  {
    log.debug("No user BM data detected; generating ...");
    return GenerateBlackMarket(currentPlayerId);
  }
  
  var d = new Date();
  log.debug("milliseconds passed: " +  d.getTime());
  log.debug("BMTime: " +  getInternalDataResult.Data.BMTime.Value);
  
  var tK = [];
  tK.push("BlackMarketResetMinutes");
  var tData = server.GetTitleData(
    {
      PlayFabId : currentPlayerId,
      Keys : tK
    }
    );
  
  if(d.getTime() - parseInt(getInternalDataResult.Data.BMTime.Value) > parseInt(tData.Data.BlackMarketResetMinutes) *60*1000) // minutes *60*1000
  {
    log.debug("regenerating market");
    return GenerateBlackMarket(currentPlayerId);
  }
  log.debug("get current market");
  return GetCurrentBlackMarket(currentPlayerId, getInternalDataResult);

}

handlers.updateCarCust = function(args, context)
{
  var userInv = server.GetUserInventory(
  {
    PlayFabId : currentPlayerId,
  }
  );
  var itemsToGive = [];
  var carFound = "-1";
  var DataToUpdate = {};
  var customizations = {
    PaintJobs : { itemOwned : "no", itemCustData: args.paintId, carItemId : "PaintId" },
    Decals : { itemOwned : "no", itemCustData: args.decalId, carItemId : "DecalId" },
    Plates : { itemOwned : "no", itemCustData: args.platesId, carItemId : "PlatesId" },
    Rims : { itemOwned : "no", itemCustData: args.rimsId, carItemId : "RimsId" },
    WindshieldText : { itemOwned : "no", itemCustData: args.wsId, carItemId : "WindshieldId" }
  };

  for(var i = 0; i < userInv.Inventory.length; i++)
  {
    if((userInv.Inventory[i].ItemId == args.carId) && (userInv.Inventory[i].CatalogVersion == "CarsProgress"))
    {
      carFound = userInv.Inventory[i].ItemInstanceId;       
    }
    if(userInv.Inventory[i].ItemId in customizations)
    {
      customizations[userInv.Inventory[i].ItemId].itemOwned = "yes";
      if(customizations[userInv.Inventory[i].ItemId].itemCustData in userInv.Inventory[i].CustomData)
      {
        DataToUpdate[customizations[userInv.Inventory[i].ItemId].carItemId] = customizations[userInv.Inventory[i].ItemId].itemCustData;
      }
      else
      {
        log.debug("user doesn't own: " + userInv.Inventory[i].ItemId + " " + customizations[userInv.Inventory[i].ItemId].itemCustData);
      }
    }
  }
  if(carFound == "-1")
  {
    return generateFailObj("User does not own car with id: " + args.carId);
  }
    //give inventory
  for (var prop in customizations) 
  {
    if (customizations.hasOwnProperty(prop)) 
    {
        if(customizations[prop].itemOwned == "no")
        {
           itemsToGive.push(prop);
        }
    }
  }
  
  if(DataToUpdate == {}) return generateFailObj("User doesn't own any of those customizations");
  server.UpdateUserInventoryItemCustomData(
     {
       PlayFabId: currentPlayerId,
       ItemInstanceId: carFound,
       Data: DataToUpdate
     }
     );
  var objectsUpdated = 
  [
  {
    ItemId : args.carId,
    CatalogVersion: "CarsProgress",
    CustomData : DataToUpdate
  }
  ];  
  if(itemsToGive.length > 0)
  {
    var grantRequest = server.GrantItemsToUser(
    {
      CatalogVersion : "Customization",
      PlayFabId: currentPlayerId,
      ItemIds : itemsToGive
    }
    );  

    var InvData = {
      0 : "Owned"        
    };

   for(var i = 0; i < grantRequest.ItemGrantResults.length; i++)
  {
    server.UpdateUserInventoryItemCustomData(
         {
           PlayFabId: currentPlayerId,
           ItemInstanceId: grantRequest.ItemGrantResults[i].ItemInstanceId,
           Data: InvData
         }
         );
  }
  }
  var invChangeObj = 
      {
          Inventory: objectsUpdated
      }
  var returnObj = {
    Result: "OK",
    Message: "InventoryUpdate",
    InventoryChange:invChangeObj
  };
  return returnObj;
  
}

handlers.purchaseItems = function(args, context)
{
  //retrieve user inventory
  log.debug("RETRIEVING USER INVENTORY");
  var userInventoryObject = server.GetUserInventory(
  {
    PlayFabId: currentPlayerId
  }
  );
  //retrieve player currency
  var playerSC = userInventoryObject.VirtualCurrency.SC;
  var playerHC = userInventoryObject.VirtualCurrency.HC;

  log.debug("user currency: SC: " + playerSC + " HC: " + playerHC);
  
  switch(args.purchaseType) 
  {
      //CarUpgrade
    case "carUpgrade":
      
      log.debug("== carUpgrade request: " + "carId: " + args.carId);
      log.debug("RETRIEVING CARDS CATALOGUE");
        var carCardsCatalog = server.GetCatalogItems(
          {
            CatalogVersion : "CarCards"
          }
          );

      var carFound = false;
      var car;
      for(var i = 0; i < userInventoryObject.Inventory.length; i++)
      {
        if((userInventoryObject.Inventory[i].ItemId == args.carId) && (userInventoryObject.Inventory[i].CatalogVersion == "CarsProgress"))
        {
          carFound = true;
          log.debug("car is in user's inventory!");
          car = userInventoryObject.Inventory[i];
          break;
        }
      } 
        var cardInfo;
        for(var i = 0; i < carCardsCatalog.Catalog.length; i++)
        {
          if(carCardsCatalog.Catalog[i].ItemId == args.carId)
          {
            cardInfo = JSON.parse(carCardsCatalog.Catalog[i].CustomData);
            log.debug("cardInfo found!");
            break;
          }
        }
      
      if(cardInfo == undefined)
      {
        log.error("cardInfo undefined!");
            var returnObj = {
          Result: "Error",
          Message: "CardNotFoundForCarwithID: " + args.carId + ". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data."
            };
            return returnObj; 
      }
      
      if(carFound == true)
      {
        log.debug("user has car: " +  args.carId + "... upgrading");
        
        //let's check that the user has enough money + cards
        var newLvl = (parseInt(car.CustomData.CarLvl) + 1);
        var currCost = parseInt(cardInfo.baseCurrCost) + (newLvl * parseInt(cardInfo.currCostPerLvl));
        var costCheckObj = checkBalance(cardInfo.currType, currCost, playerSC, playerHC);
        if(costCheckObj != "OK") return costCheckObj;

        
        log.debug("user has enough currency. Let's check for card balance");
        
        var cardCost = parseInt(cardInfo.baseCardCost) + (parseInt(car.CustomData.CarLvl) * parseInt(cardInfo.cardCostPerLvl));
        log.debug("cardCost: " + cardCost);
        var cardFound = false;      
        var cardData;                                            
        for(var i = 0; i < userInventoryObject.Inventory.length; i++)
        {
          if((userInventoryObject.Inventory[i].ItemId == args.carId) && (userInventoryObject.Inventory[i].CatalogVersion == "CarCards"))
          {
            log.debug("consuming: " + userInventoryObject.Inventory[i].ItemInstanceId);
            cardFound = true;
            try
            {
              //old consume code
            // var itemConsumptionResult = server.ConsumeItem(
            //  {
            //    PlayFabId: currentPlayerId,
            //    ItemInstanceId: userInventoryObject.Inventory[i].ItemInstanceId,
            //    ConsumeCount:cardCost
            //  }
            //);
            //new consume code
              if(userInventoryObject.Inventory[i].CustomData == undefined)//let's check if item has custom data
              {
                return generateFailObj("Insufficient cards, CusotmData undefined");
              }
              else
              {
                if(userInventoryObject.Inventory[i].CustomData.Amount == undefined)//let's check if item has amount custom data
                {
                  return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");
                }
                else // let's check and see if the user has sufficent cards
                {
                  if(Number(userInventoryObject.Inventory[i].CustomData.Amount) >= cardCost) // he does so let's remove the appropriate amount
                  {
                    userInventoryObject.Inventory[i].CustomData.Amount -= cardCost;
                    cardData = {"Amount" : userInventoryObject.Inventory[i].CustomData.Amount};
                    server.UpdateUserInventoryItemCustomData(
                    {
                      PlayFabId: currentPlayerId,
                      ItemInstanceId: userInventoryObject.Inventory[i].ItemInstanceId,
                      Data: cardData
                    }
                    );
                  }
                  else
                  {
                    return generateFailObj("Insufficient cards for real: " + userInventoryObject.Inventory[i].CustomData.Amount + " vs " + cardCost);
                  }
                }
              }
            }
            catch(err)
            {
              log.debug("itemConsumptionResult.errorCode " + err);
              return generateFailObj("Insufficient cards");
            }
            break;
          }
        }    
       
        if(cardFound == false)
        {
            return generateFailObj("No cards found");
        }
        log.debug("user has enough cards to purchase upgrade!");

        
        var newPr = recalculateCarPr(car.CustomData, car.ItemId, carCardsCatalog, undefined);
        log.debug("upgrading to car lvl: " +  newLvl + " and pr: " + newPr);
        var CarData = {
          "CarLvl" : newLvl,
          "Pr" : newPr        
        };
        server.UpdateUserInventoryItemCustomData(
          {
            PlayFabId: currentPlayerId,
            ItemInstanceId: car.ItemInstanceId,
            Data: CarData
          }
          );
        var subtractUserCurrencyResult;
        if(currCost > 0){
        subtractUserCurrencyResult = server.SubtractUserVirtualCurrency(
          {
            PlayFabId: currentPlayerId,
            VirtualCurrency : cardInfo.currType,
            Amount: currCost
          }
          );
        }
        log.debug("Upgrade Complete!");        

        var objectsUpdated = 
          [
          {
            ItemId : args.carId,
            CatalogVersion: "CarCards",
            CustomData: cardData
          },
          {
            ItemId : args.carId,
            CatalogVersion: "CarsProgress",
            CustomData : CarData
          }
          ];
        
        var currencyUpdated = {};
        var i = 
            {
                Inventory: objectsUpdated
            }
        if(subtractUserCurrencyResult!=undefined)
        {
          currencyUpdated[subtractUserCurrencyResult.VirtualCurrency] = subtractUserCurrencyResult.Balance;
          i["VirtualCurrency"] = currencyUpdated;
        }
        var r = {
          Result: "OK",
          Message: "InventoryUpdate",
          InventoryChange:i
        };
        return r;
      }
      else
      {
          log.debug("user doesn't have car: " +  args.carId + "... looking for card");
          var cardFound = false; 
          var cardData;
          var carCardInstance;
          for(var i = 0; i < userInventoryObject.Inventory.length; i++)
          {
            if((userInventoryObject.Inventory[i].ItemId == args.carId) && (userInventoryObject.Inventory[i].CatalogVersion == "CarCards"))
            {
              log.debug("consuming: " + userInventoryObject.Inventory[i].ItemInstanceId);
              cardFound = true;
              try
              {
              //old consume code
              //var itemConsumptionResult = server.ConsumeItem(
              // {
              //  PlayFabId: currentPlayerId,
              // ItemInstanceId: userInventoryObject.Inventory[i].ItemInstanceId,
              //ConsumeCount: cardInfo.baseCardCost
              //  }
              //  );
                          //new consume code
              if(userInventoryObject.Inventory[i].CustomData == undefined)//let's check if item has custom data
              {
                return generateFailObj("Insufficient cards, CustomData null");
              }
              else
              {
                if(userInventoryObject.Inventory[i].CustomData.Amount == undefined)//let's check if item has amount custom data
                {
                  return generateFailObj("Insufficient cards, CustomData.Amount null");
                }
                else // let's check and see if the user has sufficent cards
                {
                  if(Number(userInventoryObject.Inventory[i].CustomData.Amount) >= Number(cardInfo.baseCardCost)) // he does so let's remove the appropriate amount
                  {
                    carCardInstance = userInventoryObject.Inventory[i].ItemInstanceId;
                    userInventoryObject.Inventory[i].CustomData.Amount -= cardInfo.baseCardCost;
                    cardData = {"Amount" : userInventoryObject.Inventory[i].CustomData.Amount};
                  }
                  else
                  {
                    return generateFailObj("Insufficient cards: " + userInventoryObject.Inventory[i].CustomData.Amount + " vs " + cardInfo.baseCardCost+".");
                  }
                }
              }
              }
              catch(err)
              {
                return generateFailObj("Insufficient cards: " + err);
              }
              break;
            }
          }
          
          if(cardFound == false)
            {
              return generateFailObj("No cards found");
            }
        
          log.debug("user has enough cards to purchase car. Checking if enough currency is availabe");
        
          var costCheckObj = checkBalance(cardInfo.currType, cardInfo.baseCurrCost, playerSC, playerHC);
          if(costCheckObj != "OK") return costCheckObj;
          
            var itemsToGive = [];
            itemsToGive.push(args.carId);
            
            var carToGive = server.GrantItemsToUser(
              {
                CatalogVersion : "CarsProgress",
                PlayFabId: currentPlayerId,
                ItemIds : itemsToGive
              }
              );          
       
          if(carToGive.ItemGrantResults[0].Result == false)
            {
              log.error("Something went wrong while giving user the item, refunding cards");
              //new refund code
              return generateFailObj("Something went wrong while giving user the item, refunding cards.");              
            }  
            else
            {
                server.UpdateUserInventoryItemCustomData(
                {
                   PlayFabId: currentPlayerId,
                   ItemInstanceId: carCardInstance,
                   Data: cardData
                }
                );
            }
          var subtractUserCurrencyResult;
          if(cardInfo.baseCurrCost > 0){
            subtractUserCurrencyResult = server.SubtractUserVirtualCurrency(
            {
              PlayFabId: currentPlayerId,
              VirtualCurrency : cardInfo.currType,
              Amount: cardInfo.baseCurrCost
            }
            );
            }
        
          var CarData = {
              "CarLvl" : "1",
              "EngineLvl" : "0",
              "ExhaustLvl" : "0",
              "GearboxLvl" : "0",
              "SuspensionLvl" : "0"           
            };
        
          server.UpdateUserInventoryItemCustomData(
              {
                PlayFabId: currentPlayerId,
                ItemInstanceId: carToGive.ItemGrantResults[0].ItemInstanceId,
                Data: CarData
              }
              );
              CarData = {
                    "TiresLvl" : "0",
                    "TurboLvl" : "0",
                    "PaintId" : cardInfo.defaultPaintID,
                    "DecalId" : "0",
                    "RimsId" : "0"           
                  };
              server.UpdateUserInventoryItemCustomData(
              {
                PlayFabId: currentPlayerId,
                ItemInstanceId: carToGive.ItemGrantResults[0].ItemInstanceId,
                Data: CarData
              }
              );
              CarData = {
                    "PlatesId" : "0",
                    "WindshieldId" : "0",
                    "Pr" : cardInfo.basePr              
                  };
              server.UpdateUserInventoryItemCustomData(
              {
                PlayFabId: currentPlayerId,
                ItemInstanceId: carToGive.ItemGrantResults[0].ItemInstanceId,
                Data: CarData
              }
              );
            //if user doesn't have this paint job we give it to him/her
            var hasPaintJob = false;
              var hasPaintJobItem = false;
        var paintData;
              for(var i = 0; i < userInventoryObject.Inventory.length; i++)
            {
               if(userInventoryObject.Inventory[i].ItemId == "PaintJobs")
                 {
                   hasPaintJobItem = true;
                   log.debug("user has paintjobs");
                   if(userInventoryObject.Inventory[i].CustomData != undefined)
                   {
                      log.debug("user has paintjobs customData");
                      if (cardInfo.defaultPaintID in userInventoryObject.Inventory[i].CustomData)
                      {
                        log.debug("user has paintjob already");
                        hasPaintJob = true;
                      }
                      else
                      {
                        log.debug("user doesn't have paintjob");
                        paintData = {}
                        paintData[cardInfo.defaultPaintID] = "Owned";
                      }
                   }
                   else // userInventoryObject.Inventory[i].CustomData == undefined
                   {
                        paintData = {}
                        paintData[cardInfo.defaultPaintID] = "Owned";
                   }
                   if(paintData != undefined){
                   server.UpdateUserInventoryItemCustomData(
          {
            PlayFabId: currentPlayerId,
            ItemInstanceId: userInventoryObject.Inventory[i].ItemInstanceId,
            Data: paintData
          }
          );}
                   break;
                 }//end if "PaintJobs"
              }//end for
            
            if(hasPaintJobItem == false)
              {
                paintToGive = [];
                paintToGive.push("PaintJobs");
                var custToGive = server.GrantItemsToUser(
                {
                  CatalogVersion : "Customization",
                  PlayFabId: currentPlayerId,
                  ItemIds : paintToGive
                }
                );
                
                var paintData = {};
                paintData[cardInfo.defaultPaintID] = "Owned";
                server.UpdateUserInventoryItemCustomData(
                {
                  PlayFabId: currentPlayerId,
                  ItemInstanceId: custToGive.ItemGrantResults[0].ItemInstanceId,
                  Data: paintData
                }
                );
                
              }
        
               //create function result object for new car
                      CarData = {
                                  "CarLvl" : "1",
                          "EngineLvl" : "0",
                          "ExhaustLvl" : "0",
                          "GearboxLvl" : "0",
                          "SuspensionLvl" : "0"    ,
                            "TiresLvl" : "0",
                            "TurboLvl" : "0",
                            "PaintId" : cardInfo.defaultPaintID,
                            "DecalId" : "0",
                            "RimsId" : "0"   ,
                                  "PlatesId" : "0",
                            "WindshieldId" : "0",
                            "Pr" : cardInfo.basePr     
                      };
             var objectsUpdated = 
               [
               {
                 ItemId : args.carId,
                 CatalogVersion: "CarCards",
                 CustomData: cardData
               },
               {
                 ItemId : args.carId,
                 CatalogVersion: "CarsProgress",
                 CustomData : CarData
               }
               ];
             
               if(hasPaintJob == false)
               {
                 var paintDataUpdateObj = {};
                 paintDataUpdateObj[cardInfo.defaultPaintID] = "Owned";
                 var pObj =
                       {
                    ItemId : "PaintJobs",
                    CatalogVersion: "Customization",
                    CustomData : paintDataUpdateObj
                    }
                 objectsUpdated.push(pObj);
               }
        
             var currencyUpdated = {};             

             var i = 
                 {
                     Inventory: objectsUpdated
                 }
               if(subtractUserCurrencyResult != undefined)
               {
                 currencyUpdated[subtractUserCurrencyResult.VirtualCurrency] = subtractUserCurrencyResult.Balance;
                 i["VirtualCurrency"]=currencyUpdated;
               }
        
             var r = {
               Result: "OK",
               Message: "InventoryUpdateNewCar",
               InventoryChange:i
             };
             return r;
        }  
      
        break;
    //PartUpgrade
    case "partUpgrade":
        log.debug("Upgrading Part: " + args.partId + " on Car: " + args.carId);
        
        log.debug("Checking to see if car exists in catalog");
        var carCatalog = server.GetCatalogItems(
          {
            CatalogVersion : "CarsProgress"
          }
          );

          var carExists = false;
          for(var i = 0; i < carCatalog.Catalog.length; i++)
          {
            if(carCatalog.Catalog[i].ItemId == args.carId)
            {
              carExists = true;
              break;
            }
          }
        
        if(carExists == false)
        {
          log.error("invalid car ID");
              var r = {
            Result: "Error",
            Message: "car with ID: " + args.carId + " not found in catalog."
              };
              return r; 
        }

        log.debug("Checking to see if part exists in catalog");
        var partsCatalog = server.GetCatalogItems(
          {
            CatalogVersion : "PartCards"
          }
          );
        
          var partExists = false;
          var cardInfo;
          for(var i = 0; i < partsCatalog.Catalog.length; i++)
          {
            if(partsCatalog.Catalog[i].ItemId == args.partId)
            {
              cardInfo = JSON.parse(partsCatalog.Catalog[i].CustomData);
              partExists = true;
              break;
            }
          }

        if(partExists == false)
        {
          log.error("invalid part ID");
              var returnObj = {
            Result: "Error",
            Message: "part with ID: " + args.partId + " not found in catalog."
              };
              return returnObj; 
        }
       
        log.debug("Checking to see if user has car: " + args.carId);
        var carFound = false;
        var car;
        for(var i = 0; i < userInventoryObject.Inventory.length; i++)
        {
          if((userInventoryObject.Inventory[i].ItemId == args.carId) && (userInventoryObject.Inventory[i].CatalogVersion == "CarsProgress"))
          {
            carFound = true;
            log.debug("car is in user's inventory!");
            car = userInventoryObject.Inventory[i];
            break;
          }
        } 
        
        if(carFound == false)
        {
              return generateFailObj("car with ID: " + args.carId + " not found in user inventory.");
        }      
        log.debug("Checking to see if user has part and or has enough parts");
        var partFound = false;
        var part;
        for(var i = 0; i < userInventoryObject.Inventory.length; i++)
        {
          if((userInventoryObject.Inventory[i].ItemId == args.partId) && (userInventoryObject.Inventory[i].CatalogVersion == "PartCards"))
          {
            partFound = true;
            log.debug("part is in user's inventory!");
            part = userInventoryObject.Inventory[i]; 
            var CarDataToBeUpdated = {};
            var tempDict = 
          {
            Exhaust: "ExhaustLvl",
            Engine: "EngineLvl",
            Gearbox:"GearboxLvl",
            Suspension: "SuspensionLvl",
            Tires: "TiresLvl",
            Turbo: "TurboLvl"
          };
            //refactored code
            log.debug("calculating " + args.partId + " cost and modifying " + tempDict[args.partId]);
            var partsRequired = parseInt(cardInfo.baseCardCost, 10) + (parseInt(car.CustomData[tempDict[args.partId]], 10) * parseInt(cardInfo.cardCostPerLvl, 10));
            var newlvl = parseInt(car.CustomData[tempDict[args.partId]]) + 1;
            var currCost = Number(cardInfo.baseCurrCost) + (newlvl * Number(cardInfo.currCostPerLvl));         
            CarDataToBeUpdated[tempDict[args.partId]] = newlvl;
            car.CustomData[tempDict[args.partId]] = newlvl;
            log.debug("we need: " + partsRequired + " cards and " + currCost + " money => base: " + parseInt(cardInfo.baseCurrCost) + " lvls: " + parseInt(car.CustomData[tempDict[args.partId]]) + " perLvlCost: " + parseInt(cardInfo.currCostPerLvl) + " equalling: "  + ((parseInt(car.CustomData[tempDict[args.partId]], 10) * parseInt(cardInfo.currCostPerLvl, 10))));
            var updateCardData;
            var costCheckObj = checkBalance(cardInfo.currType, currCost, playerSC, playerHC);
            if(costCheckObj != "OK") return costCheckObj;
            log.debug("consuming part instance: " + userInventoryObject.Inventory[i].ItemInstanceId);
              try
              {
              if(userInventoryObject.Inventory[i].CustomData == undefined)//let's check if item has custom data
              {
                return generateFailObj("Insufficient cards");
              }
              else
              {
                if(userInventoryObject.Inventory[i].CustomData.Amount == undefined)//let's check if item has amount custom data
                {
                  return generateFailObj("Insufficient cards");
                }
                else // let's check and see if the user has sufficent cards
                {
                  if(userInventoryObject.Inventory[i].CustomData.Amount >= partsRequired) // he does so let's remove the appropriate amount
                  {
                    userInventoryObject.Inventory[i].CustomData.Amount -= partsRequired;
                    updateCardData = {"Amount" : userInventoryObject.Inventory[i].CustomData.Amount};
                    server.UpdateUserInventoryItemCustomData(
                    {
                      PlayFabId: currentPlayerId,
                      ItemInstanceId: userInventoryObject.Inventory[i].ItemInstanceId,
                      Data: updateCardData
                    }
                    );
                  }
                  else
                  {
                    return generateFailObj("Insufficient cards");
                  }
                }
              }
              }
              catch(err)
              {
                log.debug("itemConsumptionResult.errorCode " + err);
                return generateFailObj("Insufficient cards");
              } 
               break; //for search
               }//if in inventory

          }//for 
          if(partFound == false)
             {
              return generateFailObj("Part not found");
             }
          var subtractUserCurrencyResult;
          if(currCost>0)
          {
                subtractUserCurrencyResult = server.SubtractUserVirtualCurrency(
                {
                  PlayFabId: currentPlayerId,
                  VirtualCurrency : cardInfo.currType,
                  Amount: currCost
                }
                );  
          }
      var newPr = recalculateCarPr(car.CustomData, car.ItemId, undefined, partsCatalog);
            CarDataToBeUpdated.Pr = newPr;
          server.UpdateUserInventoryItemCustomData(
              {
                PlayFabId: currentPlayerId,
                ItemInstanceId: car.ItemInstanceId,
                Data: CarDataToBeUpdated
              }
              );
             var objectsUpdated = 
               [
               {
                 ItemId : args.partId,
                 CatalogVersion: "PartCards",
                 CustomData: updateCardData
               },
               {
                 ItemId : args.carId,
                 CatalogVersion: "CarsProgress",
                 CustomData : CarDataToBeUpdated
               }
               ];        
             log.debug("succesfully upgraded part!");
             var currencyUpdated = {};
             var i = 
                 {
                     Inventory: objectsUpdated
                 }
               if(subtractUserCurrencyResult!=undefined)
               {
                 currencyUpdated[subtractUserCurrencyResult.VirtualCurrency] = subtractUserCurrencyResult.Balance;
                 i["VirtualCurrency"]=currencyUpdated;
               }
             var r = {
               Result: "OK",
               Message: "InventoryUpdatePart",
               InventoryChange:i
             };
             return r;
        break; // big switch
    case "custPurchase":
        log.debug("Purchasing Customization: " + args.custId + " with val: " + args.custVal);
        
        log.debug("Checking to see if customization exists in catalog");
        var custCatalog = server.GetCatalogItems(
          {
            CatalogVersion : "Customization"
          }
          );
        
        var custCatalogItem;
        var custPrice = 0;
        var custCurr = "SC";
        for(var i = 0; i < custCatalog.Catalog.length; i++)
        {
          if(custCatalog.Catalog[i].ItemId == args.custId)
          {
            custCatalogItem = custCatalog.Catalog[i];
            cardInfo = JSON.parse(custCatalog.Catalog[i].CustomData)
            var keyRequestCurr = args.custVal + ",Curr";
            var keyRequestCost = args.custVal + ",Cost";
            
            custCurr = cardInfo[keyRequestCurr];
            custPrice = cardInfo[keyRequestCost];
            
            var costCheckObj = checkBalance(custCurr, custPrice, playerSC, playerHC);
            if(costCheckObj != "OK") return costCheckObj;
            
      log.debug("custCurr: " + custCurr);
            log.debug("custPrice: " + custPrice);
            
            break;
          }
        }
      
        if(custCatalogItem == undefined)
        {
          log.error("Customization does not exist in catalog");
           var returnObj = {
                      Result: "Error",
                  Message: "Customization does not exist in catalog."
                  };
          return returnObj;
        }
        
         log.debug("Checking to see if user has said customization");
         var customizationItem;
         var customizationItemInstance;
         for(var i = 0; i < userInventoryObject.Inventory.length; i++)
         {
           if(userInventoryObject.Inventory[i].ItemId == args.custId)
           {
             log.debug("user has customization category!");
             customizationItem = userInventoryObject.Inventory[i];
             customizationItemInstance = userInventoryObject.Inventory[i].ItemInstanceId;
              if (customizationItem.CustomData != undefined)
              {
                if (String(args.custVal) in customizationItem.CustomData)
                {
                return generateFailObj("User already has this customization.");
                }
              }
             break;
           }
         } 
         
         if(customizationItem == undefined)
         {
           log.info("user doesn't have customization category. Granting ... ");
           var itemsToGive = [];
           itemsToGive.push(args.custId);
           
           var custToGive = server.GrantItemsToUser(
             {
               CatalogVersion : "Customization",
               PlayFabId: currentPlayerId,
               ItemIds : itemsToGive
             }
             );
           
           if(custToGive.ItemGrantResults[0].Result == false)
           {
             log.error("something went wrong while granting user customization class object");
             var returnObj =    {
                      Result: "Error",
                  Message: "something went wrong while granting user customization class object."
                    };
             return returnObj;
           }
           customizationItemInstance = custToGive.ItemGrantResults[0].ItemInstanceId;
         }
      
         var customizationData = {};
         customizationData[String(args.custVal)] = "Owned";
      
         server.UpdateUserInventoryItemCustomData(
              {
                PlayFabId: currentPlayerId,
                ItemInstanceId: customizationItemInstance,
                Data: customizationData
              }
              );
          var i; 
          var objectsUpdated = 
               [
               {
                 ItemId : args.custId,
                 CatalogVersion: "Customization",
                 CustomData : customizationData
               }
               ];
      
          if(custPrice > 0)
          {
            var subtractUserCurrencyResult = server.SubtractUserVirtualCurrency(
              {
                PlayFabId: currentPlayerId,
                VirtualCurrency : custCurr,
                Amount: custPrice
              }
              ); 
            var currencyUpdated = {};
            currencyUpdated[subtractUserCurrencyResult.VirtualCurrency] = subtractUserCurrencyResult.Balance;            
            i = 
                 {
                     Inventory: objectsUpdated,
                     VirtualCurrency: currencyUpdated
                 };
          }      
      else
      {
            i = 
                 {
                     Inventory: objectsUpdated
                };
      }
        var r = {
               Result: "OK",
               Message: "InventoryUpdateNewCustomization",
               InventoryChange:i
             };
        return r;
      
      break; // big switch
    case "softCurrencyPurchase":
        log.debug("Purchasing pack: " + args.packId);
        
        log.debug("Checking to see if pack exists in catalog");
        var packCatalog = server.GetCatalogItems(
          {
            CatalogVersion : "SoftCurrencyStore"
          }
          );
      
         var packExists = false;
         var packPrice = 0;
         for(var i = 0; i < packCatalog.Catalog.length; i++)
         {
           if(packCatalog.Catalog[i].ItemId == args.packId)
           {
             packPrice = packCatalog.Catalog[i].VirtualCurrencyPrices.HC;
             cardInfo = JSON.parse(packCatalog.Catalog[i].CustomData);
             packExists = true;
             break;
           }
         }
      
      if(packExists == false)
      {
          var returnObj = {
          Result: "Error",
          Message: "pack with ID: " + args.packId + " not found in catalog."
            };
            return returnObj;
      }
       
      if(packPrice <= 0)
      {
            var returnObj = {
              Result: "Error",
              Message: "pack with ID: " + args.packId + " shouldn't have negative cost."
            };
            return returnObj;
      }
      
      if(packPrice > playerHC)
      {
        return generateFailObj("Not enough HC.");
      }
      
       var subtractUserCurrencyResult = server.SubtractUserVirtualCurrency(
       {
         PlayFabId: currentPlayerId,
         VirtualCurrency : "HC",
         Amount: packPrice
       }
       ); 
       
       var addUserCurrencyResult = server.AddUserVirtualCurrency(
       {
         PlayFabId: currentPlayerId,
         VirtualCurrency : "SC",
         Amount: cardInfo.quantity
       }
       ); 
        var currencyUpdated = {};
        currencyUpdated[addUserCurrencyResult.VirtualCurrency] = addUserCurrencyResult.Balance;   
        currencyUpdated[subtractUserCurrencyResult.VirtualCurrency] = subtractUserCurrencyResult.Balance;  
        var invChangeObj = 
                 {
                   VirtualCurrency: currencyUpdated
                 };
        var returnObj = {
               Result: "OK",
               Message: "SoftCurrencyPurchased",
               InventoryChange:invChangeObj
             };
      return returnObj;
      break;
    default:
        log.debug("invalid purchase parameter");
   }
}
//cheat scripts
handlers.giveMoney = function(args)
{
  //args.curr, args.amount
  var addUserCurrencyResult = server.AddUserVirtualCurrency(
  {
    PlayFabId: currentPlayerId,
    VirtualCurrency : args.curr,
    Amount: args.amount
  }
  );
  
  var currencyUpdated = {};
  currencyUpdated[addUserCurrencyResult.VirtualCurrency] = addUserCurrencyResult.Balance;   
  var invChangeObj = 
           {
             VirtualCurrency: currencyUpdated
           };
  var r = {
         Result: "OK",
         Message: "CurrencyChanged",
         InventoryChange:invChangeObj
       };
  return r;
}

handlers.grantItems = function(args)
{
  //retrieve user inventory
  var userInventoryObject = server.GetUserInventory(
  {
    PlayFabId: currentPlayerId
  }
  );
  //args.itemId, args.catalogId, args.amount

  //old grant item code
  //var itemsToGrant = [];
  //for(var i = 0; i < args.amount; i++)
  //{
  //  itemsToGrant.push(args.itemId);
  //}
  //try
  //{
  // var grantVar = server.GrantItemsToUser(
  // {
  //  CatalogVersion : args.catalogId,
  //   PlayFabId: currentPlayerId,
  //   ItemIds : itemsToGrant
  // }
  // ); 
  //new grant item code  
  var itemData;  
  var itemFound = false;
  var newAmount;
  for(var i = 0; i < userInventoryObject.Inventory.length; i++)
        {
          if((userInventoryObject.Inventory[i].ItemId == args.itemId) && (userInventoryObject.Inventory[i].CatalogVersion == args.catalogId))
          {
            log.debug("adding amount to: " + userInventoryObject.Inventory[i].ItemInstanceId);
            if(userInventoryObject.Inventory[i].CustomData == undefined)
            {
              newAmount = args.amount;
            }
            else
            {
              if(userInventoryObject.Inventory[i].CustomData.Amount == undefined) 
                newAmount = args.amount;
              else
              {
                if(isNaN(Number(userInventoryObject.Inventory[i].CustomData.Amount)))
                  newAmount = args.amount;
                else
                  newAmount = Number(userInventoryObject.Inventory[i].CustomData.Amount) + args.amount;
              }
            }
            itemData = {"Amount" : newAmount};
            server.UpdateUserInventoryItemCustomData(
                    {
                      PlayFabId: currentPlayerId,
                      ItemInstanceId: userInventoryObject.Inventory[i].ItemInstanceId,
                      Data: itemData
                    }
                    );
            itemFound = true;
            break;
          }
        }

    if(itemFound == false)
    {
      var itemsToGrant = [];
      itemsToGrant.push(args.itemId);
      var grantVar = server.GrantItemsToUser(
      {
        CatalogVersion : args.catalogId,
        PlayFabId: currentPlayerId,
        ItemIds : itemsToGrant
      }
      ); 

      itemData = {"Amount" : args.amount};
      server.UpdateUserInventoryItemCustomData(
           {
              PlayFabId: currentPlayerId,
              ItemInstanceId: grantVar.ItemGrantResults[0].ItemInstanceId,
              Data: itemData
           }
           );
    }
   //for return
   var objectsUpdated = 
   [
   {
     ItemId : args.itemId,
     CatalogVersion: args.catalogId,
     CustomData: itemData
   }
   ] ;
    var invChangeObj = 
        {
            Inventory: objectsUpdated
        }
    var returnObj = {
      Result: "OK",
      Message: "InventoryUpdated",
      InventoryChange:invChangeObj
    };
   return returnObj;
}
handlers.openChest = function(args, context)
{
  var objectsUpdated = [];
  var currencyUpdated = [];
  var invChangeObj;
  var userInventoryObject = server.GetUserInventory(
  {
    PlayFabId: currentPlayerId
  }
  );
  //let's check if this is a chest from the store
  if(args.currCost > 0)
  {
    var bO = checkBalance(args.currType, args.currCost, userInventoryObject.VirtualCurrency["SC"], userInventoryObject.VirtualCurrency["HC"])
    if(bO != "OK") return generateFailObj("not enough money");

    var subtractUserCurrencyResult = server.SubtractUserVirtualCurrency(
    {
      PlayFabId: currentPlayerId,
      VirtualCurrency : args.currType,
      Amount: args.currCost
    }
    ); 
  }
  //currency 
	var addUserCurrencyResult;
	for(var p in args.currencyReq)
	{
		if(args.currencyReq[p] > 0)
		  addUserCurrencyResult = server.AddUserVirtualCurrency(
		  {
		    PlayFabId: currentPlayerId,
		    VirtualCurrency : p,
		    Amount: args.currencyReq[p]
		  }
		  );

	}
  var itemData;
  var itemFound = false;
  var newAmount = 0;
  //car cards
  for(var p in args.carCardsRequest)
    {
      log.debug(p + " : " + args.carCardsRequest[p]);
      if (args.carCardsRequest.hasOwnProperty(p)) 
      { 
        itemFound = false;
        newAmount = 0;
        log.debug("looking for: " +p);
        for(var i = 0; i < userInventoryObject.Inventory.length; i++)
              {
                if((userInventoryObject.Inventory[i].ItemId == p) && (userInventoryObject.Inventory[i].CatalogVersion == "CarCards"))
                {
                  log.debug("adding amount to: " + userInventoryObject.Inventory[i].ItemInstanceId);
                  if(userInventoryObject.Inventory[i].CustomData == undefined)
                  {
                    newAmount = Number(args.carCardsRequest[p]);
                  }
                  else
                  {
                    if(userInventoryObject.Inventory[i].CustomData.Amount == undefined) 
                      newAmount = Number(args.carCardsRequest[p]);
                    else
                    {
                      if(isNaN(Number(userInventoryObject.Inventory[i].CustomData.Amount)))
                        newAmount = Number(args.carCardsRequest[p]);
                      else
                        newAmount = Number(userInventoryObject.Inventory[i].CustomData.Amount) + Number(args.carCardsRequest[p]);
                    }
                  }
                  itemData = {"Amount" : newAmount};
                  server.UpdateUserInventoryItemCustomData(
                          {
                            PlayFabId: currentPlayerId,
                            ItemInstanceId: userInventoryObject.Inventory[i].ItemInstanceId,
                            Data: itemData
                          }
                          );
                  itemFound = true;
                  break;
                }
              }
        if(itemFound == false)
        {
            var itemsToGrant = [p];
            var grantVar = server.GrantItemsToUser(
            {
              CatalogVersion : "CarCards",
              PlayFabId: currentPlayerId,
              ItemIds : itemsToGrant
            }
            ); 

            itemData = {"Amount" : args.carCardsRequest[p]};
            server.UpdateUserInventoryItemCustomData(
                 {
                    PlayFabId: currentPlayerId,
                    ItemInstanceId: grantVar.ItemGrantResults[0].ItemInstanceId,
                    Data: itemData
                 }
                 );
        }
      }
    }
  //part cards
  for(var p in args.partCardsRequest)
    {
      log.debug(p + " : " + args.partCardsRequest[p]);
      if (args.partCardsRequest.hasOwnProperty(p)) 
      { 
        itemFound = false;
        newAmount = 0;
        log.debug("looking for: " +p);
        for(var i = 0; i < userInventoryObject.Inventory.length; i++)
              {
                if((userInventoryObject.Inventory[i].ItemId == p) && (userInventoryObject.Inventory[i].CatalogVersion == "PartCards"))
                {
                  log.debug("adding amount to: " + userInventoryObject.Inventory[i].ItemInstanceId);
                  if(userInventoryObject.Inventory[i].CustomData == undefined)
                  {
                    newAmount = Number(args.partCardsRequest[p]);
                  }
                  else
                  {
                    if(userInventoryObject.Inventory[i].CustomData.Amount == undefined) 
                      newAmount = Number(args.partCardsRequest[p]);
                    else
                    {
                      if(isNaN(Number(userInventoryObject.Inventory[i].CustomData.Amount)))
                        newAmount = Number(args.partCardsRequest[p]);
                      else
                        newAmount = Number(userInventoryObject.Inventory[i].CustomData.Amount) + Number(args.partCardsRequest[p]);
                    }
                  }
                  itemData = {"Amount" : newAmount};
                  server.UpdateUserInventoryItemCustomData(
                          {
                            PlayFabId: currentPlayerId,
                            ItemInstanceId: userInventoryObject.Inventory[i].ItemInstanceId,
                            Data: itemData
                          }
                          );
                  itemFound = true;
                  break;
                }
              }
        if(itemFound == false)
        {
            var itemsToGrant = [p];
            var grantVar = server.GrantItemsToUser(
            {
              CatalogVersion : "PartCards",
              PlayFabId: currentPlayerId,
              ItemIds : itemsToGrant
            }
            ); 

            itemData = {"Amount" : args.partCardsRequest[p]};
            server.UpdateUserInventoryItemCustomData(
                 {
                    PlayFabId: currentPlayerId,
                    ItemInstanceId: grantVar.ItemGrantResults[0].ItemInstanceId,
                    Data: itemData
                 }
                 );
        }
      }
    }
   var invObj = server.GetUserInventory(
    {
      PlayFabId: currentPlayerId
    }
    );
   var returnObj = {
      Result: "OK",
      Message: "InventoryUpdated",
      InventoryChange:invObj
    };
   return returnObj;
}

handlers.buyChest = function(args, context)
{
  var userInventoryObject=server.GetUserInventory(
  {
    PlayFabId:currentPlayerId
  }
  );
  var bO = checkBalance(args.curr, args.cost, userInventoryObject.VirtualCurrency.SC, userInventoryObject.VirtualCurrency.HC);
  if(bO != "OK") return generateFailObj("not enough money");
  
  var subtractUserCurrencyResult = server.SubtractUserVirtualCurrency(
  {
    PlayFabId: currentPlayerId,
    VirtualCurrency : args.curr,
    Amount: args.cost
  }
  ); 
  var cU = {};
  cU[subtractUserCurrencyResult.VirtualCurrency] = subtractUserCurrencyResult.Balance;   
  var i = 
           {
             VirtualCurrency: cU
           };
  var r = {
         Result: "OK",
         Message: "ChestBought",
         InventoryChange:i
       };
  return r;
}

handlers.getServerTime = function(args, context)
{
	var t = new Date();
	return { time: t};
}
