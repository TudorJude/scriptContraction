handlers.openChest = function(args, context)
{
  //level reward mechanic
  //args.level == -1 if it's regular open chest operation
  //args.level >= 0 if it's a reward for leveing up to level args.level
  if(args.isLevelUp == true)
  {
    var lastRewardLevel = server.GetUserReadOnlyData(
    {
      PlayFabId : currentPlayerId,
      Keys : ["LastLevelReward"]
    });
    var levelItemDataToUpdate = {};
    levelItemDataToUpdate["LastLevelReward"] = 1;
    log.debug("lastLevelReward: " + JSON.stringify(lastRewardLevel.Data));
    if(lastRewardLevel.Data == undefined)
    {
      server.UpdateUserReadOnlyData(
      {
        PlayFabId : currentPlayerId, 
        Data : levelItemDataToUpdate
      }
        );

      var suArray = [];
      var su = {StatisticName : "Experience", Version : "0", Value: 0};
      suArray.push(su);

      server.UpdatePlayerStatistics(
      {
        PlayFabId : currentPlayerId,
        Statistics: suArray
      });

      //give bundle to user
      //ids of bundles are of the form 001, 002, ... , 012 etc so padded with 0s until it has 3 digits
      var str = "" + 1;
      var pad = "000";
      var ans = pad.substring(0, pad.length - str.length) + str; 
      server.GrantItemsToUser(
      {
        CatalogVersion : "LevelUpRewards",
        PlayFabId : currentPlayerId, 
        ItemIds : ans
      }
        );
      
    }
    else
    { 
      var lvlThresholds = JSON.parse(getCatalogItem("Balancing", "BalancingItem").CustomData).LevelThresholds;
        //get current exprience
      var ps= server.GetPlayerStatistics(
      {
            PlayFabId: currentPlayerId,
            StatisticNames: ["Experience"]
      }).Statistics;
      var currentExprience = GetValueFromStatistics(ps, "Experience", 0);
      var currLvl = 100;
      for(var i = 0; i < lvlThresholds.length; i++)
      {
        if(currentExprience >= lvlThresholds[i]) continue;
        currLvl = i; break;
      }

      if(Number(lastRewardLevel.Data.Value) < Number(currLvl))
      {
        lastRewardLevel.Data.Value = Number(lastRewardLevel.Data.Value) + 1;
        levelItemDataToUpdate["LastLevelReward"] = lastRewardLevel.Data.Value;
        server.UpdateUserReadOnlyData(
        {
          PlayFabId : currentPlayerId, 
          Data : levelItemDataToUpdate
        }
          );
        //give bundle to user
        //ids of bundles are of the form 001, 002, ... , 012 etc so padded with 0s until it has 3 digits
        var str = "" + lastRewardLevel.Data.Value;
        var pad = "000";
        var ans = pad.substring(0, pad.length - str.length) + str; 
        server.GrantItemsToUser(
        {
          CatalogVersion : "LevelUpRewards",
          PlayFabId : currentPlayerId, 
          ItemIds : ans
        }
          );      
        }
        else return generateFailObj("already got reward for level: " + lastRewardLevel.Data.Value);
    }
  }
  var objectsUpdated = [];
  var currencyUpdated = [];
  var invChangeObj;
  var userInventoryObject = server.GetUserInventory(
    {
      PlayFabId: currentPlayerId
    }
  );

  //let's check if this is a chest from the store
  if(args.currCost > 0)
  {
    var bO = checkBalance(args.currType, args.currCost, userInventoryObject.VirtualCurrency["SC"], userInventoryObject.VirtualCurrency["HC"])
    if(bO != "OK") return generateFailObj("not enough money");

    var subtractUserCurrencyResult = server.SubtractUserVirtualCurrency(
      {
        PlayFabId: currentPlayerId,
        VirtualCurrency : args.currType,
        Amount: args.currCost
      }
    );
  }
  //currency
  var addUserCurrencyResult;
  for(var p in args.currencyReq)
  {
    if(args.currencyReq[p] > 0)
    addUserCurrencyResult = server.AddUserVirtualCurrency(
      {
        PlayFabId: currentPlayerId,
        VirtualCurrency : p,
        Amount: args.currencyReq[p]
      }
    );

  }
  var itemData;
  var itemFound = false;
  var newAmount = 0;
  //car cards
  for(var p in args.carCardsRequest)
  {
    //log.debug(p + " : " + args.carCardsRequest[p]);
    if (args.carCardsRequest.hasOwnProperty(p))
    {
      itemFound = false;
      newAmount = 0;
      //log.debug("looking for: " +p);
      for(var i = 0; i < userInventoryObject.Inventory.length; i++)
      {
        if((userInventoryObject.Inventory[i].ItemId == p) && (userInventoryObject.Inventory[i].CatalogVersion == "CarCards"))
        {
          // log.debug("adding amount to: " + userInventoryObject.Inventory[i].ItemInstanceId);
          if(userInventoryObject.Inventory[i].CustomData == undefined)
          {
            newAmount = Number(args.carCardsRequest[p]);
          }
          else
          {
            if(userInventoryObject.Inventory[i].CustomData.Amount == undefined)
            newAmount = Number(args.carCardsRequest[p]);
            else
            {
              if(isNaN(Number(userInventoryObject.Inventory[i].CustomData.Amount)))
              newAmount = Number(args.carCardsRequest[p]);
              else
              newAmount = Number(userInventoryObject.Inventory[i].CustomData.Amount) + Number(args.carCardsRequest[p]);
            }
          }
          itemData = {"Amount" : newAmount};
          server.UpdateUserInventoryItemCustomData(
            {
              PlayFabId: currentPlayerId,
              ItemInstanceId: userInventoryObject.Inventory[i].ItemInstanceId,
              Data: itemData
            }
          );
          itemFound = true;
          break;
        }
      }
      if(itemFound == false)
      {
        var itemsToGrant = [p];
        var grantVar = server.GrantItemsToUser(
          {
            CatalogVersion : "CarCards",
            PlayFabId: currentPlayerId,
            ItemIds : itemsToGrant
          }
        );

        itemData = {"Amount" : args.carCardsRequest[p]};
        server.UpdateUserInventoryItemCustomData(
          {
            PlayFabId: currentPlayerId,
            ItemInstanceId: grantVar.ItemGrantResults[0].ItemInstanceId,
            Data: itemData
          }
        );
      }
    }
  }
  //part cards
  for(var p in args.partCardsRequest)
  {
    //log.debug(p + " : " + args.partCardsRequest[p]);
    if (args.partCardsRequest.hasOwnProperty(p))
    {
      itemFound = false;
      newAmount = 0;
      // log.debug("looking for: " +p);
      for(var i = 0; i < userInventoryObject.Inventory.length; i++)
      {
        if((userInventoryObject.Inventory[i].ItemId == p) && (userInventoryObject.Inventory[i].CatalogVersion == "PartCards"))
        {
          // log.debug("adding amount to: " + userInventoryObject.Inventory[i].ItemInstanceId);
          if(userInventoryObject.Inventory[i].CustomData == undefined)
          {
            newAmount = Number(args.partCardsRequest[p]);
          }
          else
          {
            if(userInventoryObject.Inventory[i].CustomData.Amount == undefined)
            newAmount = Number(args.partCardsRequest[p]);
            else
            {
              if(isNaN(Number(userInventoryObject.Inventory[i].CustomData.Amount)))
              newAmount = Number(args.partCardsRequest[p]);
              else
              newAmount = Number(userInventoryObject.Inventory[i].CustomData.Amount) + Number(args.partCardsRequest[p]);
            }
          }
          itemData = {"Amount" : newAmount};
          server.UpdateUserInventoryItemCustomData(
            {
              PlayFabId: currentPlayerId,
              ItemInstanceId: userInventoryObject.Inventory[i].ItemInstanceId,
              Data: itemData
            }
          );
          itemFound = true;
          break;
        }
      }
      if(itemFound == false)
      {
        var itemsToGrant = [p];
        var grantVar = server.GrantItemsToUser(
          {
            CatalogVersion : "PartCards",
            PlayFabId: currentPlayerId,
            ItemIds : itemsToGrant
          }
        );

        itemData = {"Amount" : args.partCardsRequest[p]};
        server.UpdateUserInventoryItemCustomData(
          {
            PlayFabId: currentPlayerId,
            ItemInstanceId: grantVar.ItemGrantResults[0].ItemInstanceId,
            Data: itemData
          }
        );
      }
    }
  }

  var outInventory =   server.GetUserInventory({PlayFabId: currentPlayerId});

  //give experience for opening chest unless this chest was opened as part of leveling up reward:
  //if no chest id is provided, it means that this function is used for inventory update
  if((args.chestId) && (args.isLevelUp != true)){
    var totalXp = UpdateExperience("Chests", args.chestId, "xpGain", 0, true);
      outInventory.Experience = totalXp;
  }

  return generateInventoryChange("InventoryUpdated", outInventory);
};
