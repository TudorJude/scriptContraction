function checkCarDataValidity(c,k){if(void 0==c.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});for(var b=0,h=0;h<k.Catalog.length;h++)if(k.Catalog[h].ItemId==c.ItemId){var f=
JSON.parse(k.Catalog[h].CustomData),b=parseInt(f.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:b};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a})}catch(e){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:b}}return"OK"}function generateFailObj(c){return{Result:"Failed",Message:c}}
function generateErrObj(c){return{Result:"Error",Message:c}}
function CheckMaintenanceAndVersion(c){var k=!1,a="A.0.0.1";void 0!=c&&(k=c.debug,a=c.cVersion);if(void 0==a)return"update";c=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var b=c.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(b=c.Data.MinimumGameVersionActual_IOS);if(void 0==b)return"maintenance";for(var h=!1,b=b.split("."),f=0;3>f;f++){var e=0;a.length>f+1&&(e=Number(a[f+1]));var d=0;b.length>f&&
(d=Number(b[f]));log.debug("iteration: "+f+" currVer: "+e+" vs minVer: "+d);if(e<d){h=!0;break}}return 1==h?"update":1==k?"OK":c.Data.Maintenance?"false"==c.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(c){return"maintenance"==c?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(c,k){return{Result:"OK",Message:c,InventoryChange:k}}
function checkBalance(c,k,a,b){if("SC"==c){if(a<k)return generateFailObj("NotEnoughSC")}else if(b<k)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(c){var k=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==k.Data.LeagueSubdivisions||void 0==k.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(k.Data.LeagueSubdivisions).leagues,k=JSON.parse(k.Data.SubdivisionTrophyRanges).subdivisions,b=0;b<a.length;b++)if(!(Number(c)>Number(k[a[b]])))return b}
function recalculateCarPr(c,k,a,b){var h=0,f;f=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<f.Catalog.length;a++)if(f.Catalog[a].ItemId==k){h=JSON.parse(f.Catalog[a].CustomData);h=parseInt(h.basePr)+getObjectValueFromLevel(h,"prPerLvl",c.CarLvl);break}b=void 0===b?server.GetCatalogItems({CatalogVersion:"PartCards"}):b;c={Exhaust:c.ExhaustLvl,Engine:c.EngineLvl,Gearbox:c.GearboxLvl,Suspension:c.SuspensionLvl,Tires:c.TiresLvl,Turbo:c.TurboLvl};for(a=0;a<b.Catalog.length;a++)k=
JSON.parse(b.Catalog[a].CustomData),h+=getObjectValueFromLevel(k,"prPerLvl",Number(c[b.Catalog[a].ItemId]));return h}
function GenerateBlackMarket(c){var k=1,a=server.GetPlayerStatistics({PlayFabId:c,StatisticNames:["League"]});0!=a.Statistics.length&&(k=a.Statistics[0].Value.toString());0>=Number(k)&&(k=1);for(var b=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:c,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),h=JSON.parse(a.Data.BlackMarketRarityBias),f,e=[],d=[],g=[],l=0;l<b.Catalog.length;l++){f=JSON.parse(b.Catalog[l].CustomData);if(void 0==f)return generateErrObj("Part card "+
b.Catalog[l].ItemId+" has no custom data.");0==f.rarity&&e.push(b.Catalog[l].ItemId+"_"+f.BMCurrType+"_"+f.BMbasePrice+"_0_"+f.BMpriceIncrPerBuy);1==f.rarity&&d.push(b.Catalog[l].ItemId+"_"+f.BMCurrType+"_"+f.BMbasePrice+"_0_"+f.BMpriceIncrPerBuy);2==f.rarity&&g.push(b.Catalog[l].ItemId+"_"+f.BMCurrType+"_"+f.BMbasePrice+"_0_"+f.BMpriceIncrPerBuy)}b={};b.BMTime=(new Date).getTime();l=Math.floor(Math.random()*e.length);b.BMItem0=e[l];2<=e.length&&e.splice(l,1);Math.floor(100*Math.random())<Number(h.parts[2])?
e=g:(l=Number(h.parts[0])+Number(h.parts[1]),Math.floor(Math.random()*l)>=Number(h.parts[0])&&(e=d));b.BMItem1=e[Math.floor(Math.random()*e.length)];f=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var m,e=[],d=[],g=[],l=0;l<f.Catalog.length;l++){m=JSON.parse(f.Catalog[l].CustomData);if(void 0==m)return generateErrObj("Car card "+f.Catalog[l].ItemId+" has no custom data.");Number(m.unlockedAtRank)>=Number(k)+1||("0"==m.rarity&&e.push(f.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+
"_0_"+m.BMpriceIncrPerBuy),"1"==m.rarity&&d.push(f.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy),"2"==m.rarity&&g.push(f.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy))}k=Math.floor(Math.random()*e.length);b.BMItem2=e[k];2<=e.length&&e.splice(k,1);0>=d.length&&(0>=g.length?g=d=e:d=g);0>=g.length&&(g=d);Math.floor(100*Math.random())<Number(h.cars[2])?e=g:(l=Number(h.cars[0])+Number(h.cars[1]),Math.floor(Math.random()*l)>=Number(h.cars[0])&&
(e=d));k=Math.floor(Math.random()*e.length);b.BMItem3=e[k];server.UpdateUserInternalData({PlayFabId:c,Data:b});b.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return b}function GetCurrentBlackMarket(c,k){var a={},b=new Date,h=[];h.push("BlackMarketResetMinutes");h=server.GetTitleData({PlayFabId:c,Keys:h});a.BMTime=60*parseInt(h.Data.BlackMarketResetMinutes)-Math.floor((b.getTime()-k.Data.BMTime.Value)/1E3);for(b=0;4>b;b++)a["BMItem"+b]=k.Data["BMItem"+b].Value;return a}
function GetValueFromStatistics(c,k,a){for(var b,h=0;h<c.length;h++)c[h].StatisticName===k&&(b=c[h]);log.debug("Stat with name statisticsName: "+k+" is "+b);return void 0===b?void 0!==a?a:0:Number(b.Value)}function getCatalogItem(c,k){for(var a=server.GetCatalogItems({CatalogVersion:c}),b=0;b<a.Catalog.length;b++)if(a.Catalog[b].ItemId===k)return a.Catalog[b]}
function getObjectValueFromLevel(c,k,a,b){b||(b=0);if(!c[k]||!c[k].length)return b;var h=Number(c[k].length);a>=h&&(a=h-1);return Number(c[k][a])||b}
handlers.buyChest=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(c.curr,c.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<c.cost){var a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.curr,Amount:c.cost}),b={};b[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",{VirtualCurrency:b})}return generateInventoryChange("ChestBought",
{})};
handlers.claimDailyMission=function(c,k){var a=Number(c.mIdx),b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==b.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var b=JSON.parse(b.Data.DailyMissionStatus.Value),h=b.dailyMissionClaimStatus;if(a>=h.length)return generateErrObj("Unlock index is out of bounds of playerData claim mission status array");if(1==h[a])return generateFailObj("Mission already claimed");h[a]=
1;b={DailyMissionStatus:JSON.stringify({DailyStatus:b.DailyStatus,dailyMissionClaimStatus:h,timeStamp:b.timeStamp})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});b=JSON.parse(b.Data.DailyMissionData);if(a>=b.missionData.length)return generateErrObj("Unlock index is out of bounds of titleData claim mission reward array");a=b.missionData[a].split("_");a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:a[1],Amount:Number(a[2])});b={};b[a.VirtualCurrency]=a.Balance;return generateInventoryChange("MissionClaimed",{VirtualCurrency:b})};
handlers.endDaily=function(c,k){var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==a.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");for(var b=JSON.parse(a.Data.DailyMissionStatus.Value),a=b.dailyMissionClaimStatus,h,f=-1,e=0;e<b.dailyMissionClaimStatus.length;e++)if(0==a[e])return generateErrObj("Not all missions were claimed!");a=[0,0,0,0,0,0,0,0];h=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});
tParsed=JSON.parse(h.Data.DailyMissionData);var e=Number(tParsed.minutesToRefresh),d=new Date;d.getTime()-Number(b.timeStamp)>6E4*Number(e)?(h=2,b=d.getTime()):(h=0,f=60*Number(e)-Math.floor((d.getTime()-Number(b.timeStamp))/1E3),b=b.timeStamp);b={DailyMissionStatus:JSON.stringify({DailyStatus:h,dailyMissionClaimStatus:a,timeStamp:b})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});var b=server.GetUserInventory({PlayFabId:currentPlayerId}),g;for(g in c.currencyReq)0<c.currencyReq[g]&&
server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g,Amount:c.currencyReq[g]});for(g in c.carCardsRequest)if(c.carCardsRequest.hasOwnProperty(g)){d=!1;for(e=0;e<b.Inventory.length;e++)if(b.Inventory[e].ItemId==g&&"CarCards"==b.Inventory[e].CatalogVersion){d=void 0==b.Inventory[e].CustomData?Number(c.carCardsRequest[g]):void 0==b.Inventory[e].CustomData.Amount?Number(c.carCardsRequest[g]):isNaN(Number(b.Inventory[e].CustomData.Amount))?Number(c.carCardsRequest[g]):Number(b.Inventory[e].CustomData.Amount)+
Number(c.carCardsRequest[g]);d={Amount:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[e].ItemInstanceId,Data:d});d=!0;break}0==d&&(e=[g],e=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:e}),d={Amount:c.carCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[0].ItemInstanceId,Data:d}))}for(g in c.partCardsRequest)if(c.partCardsRequest.hasOwnProperty(g)){d=
!1;for(e=0;e<b.Inventory.length;e++)if(b.Inventory[e].ItemId==g&&"PartCards"==b.Inventory[e].CatalogVersion){d=void 0==b.Inventory[e].CustomData?Number(c.partCardsRequest[g]):void 0==b.Inventory[e].CustomData.Amount?Number(c.partCardsRequest[g]):isNaN(Number(b.Inventory[e].CustomData.Amount))?Number(c.partCardsRequest[g]):Number(b.Inventory[e].CustomData.Amount)+Number(c.partCardsRequest[g]);d={Amount:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[e].ItemInstanceId,
Data:d});d=!0;break}0==d&&(e=[g],e=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:e}),d={Amount:c.partCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[0].ItemInstanceId,Data:d}))}return{Result:"OK",Message:"DailyCompleted",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId}),DailyStatus:{status:h,claimStatus:a,timeRemaining:f}}};
handlers.endGame=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b="01",h,f="0";"rWin"==c.outcome&&(f="1");a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=a.Statistics.length&&(h=a.Statistics[0].Value.toString(),b=Number(h).toString(2));var a=0,e;e=Array(b.length);for(var d=0;d<e.length-1;d++)e[d]=b[d];e[e.length-1]=f;b=e;e=b.length;for(var g=f=0,d=1;d<b.length;d++)"1"==b[d]?(a++,g++):(g>f&&(f=g),g=0);
e=Math.round(a/e*100);var l=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),a=0,d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=d.Statistics.length&&(a=d.Statistics[0].Value,log.debug("getting trophy count "+d.Statistics[0].Value));g=a=Number(a);d=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose","trophyWin"]});d=void 0==d.Data.trophyLose||void 0==d.Data.trophyWin?45:Number(d.Data.trophyLose.Value)+Number(d.Data.trophyWin.Value);
"rWin"==c.outcome&&(a+=d);var m=JSON.parse(c.recordingHeader),d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Wins","TotalGamesCompleted","LongestWinStreak","BestDriftScore"]}).Statistics,n=GetValueFromStatistics(d,"TotalGamesCompleted",0),n=Number(n)+1,w=GetValueFromStatistics(d,"Wins",0);"rWin"==c.outcome&&(w=Number(w)+1);var z=GetValueFromStatistics(d,"LongestWinStreak",0);f>z&&(z=f);var A=GetValueFromStatistics(d,"BestDriftScore",0);Number(m.Score)>A&&(A=Number(m.Score));
f=calculateLeague(a);for(d=h=0;d<b.length;d++)"1"==b[d]&&(h+=Math.pow(2,d));d=[];d.push({StatisticName:"WinLoss",Version:"0",Value:h});b={StatisticName:"TrophyCount",Version:"0",Value:a};d.push(b);b={StatisticName:"League",Version:"0",Value:f};d.push(b);b={StatisticName:"Wins",Version:"0",Value:w};d.push(b);b={StatisticName:"TotalGamesCompleted",Version:"0",Value:n};d.push(b);b={StatisticName:"LongestWinStreak",Version:"0",Value:z};d.push(b);b={StatisticName:"BestDriftScore",Version:"0",Value:A};
d.push(b);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:d});if(10>=Number(m.Score))return a={TrophyCount:a,League:f},{Result:a};l=JSON.parse(l.Data.SubdivisionTrophyRanges);b=43;for(d=0;d<l.subdivisions.length;d++)if(g<l.subdivisions[d]){b=d;break}d=[];d.push({Key:c.envIndex+"_"+c.courseIndex+"_RecPos",Value:c.recordingPos});d.push({Key:c.envIndex+"_"+c.courseIndex+"_RecRot",Value:c.recordingRot});d.push({Key:c.envIndex+"_"+c.courseIndex+"_RecHeader",Value:c.recordingHeader});
server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:d});d=server.GetTitleInternalData({Key:"RecSubDivision"+b}).Data["RecSubDivision"+b];if(void 0==d)g=[],e={wl:e,e:c.envIndex,c:c.courseIndex,uId:currentPlayerId},g.push(e);else{g=JSON.parse(d);e={wl:e,e:c.envIndex,c:c.courseIndex,uId:currentPlayerId};l=!1;for(d=m=0;d<g.length;d++)g[d].uId==currentPlayerId&&m++;if(2<m)return a={TrophyCount:a,League:f},{Result:a};for(d=0;d<g.length;d++)if(g[d].e==c.envIndex&&g[d].c==c.courseIndex){l=!0;g[d]=
e;if(1==g.length)break;if(0<d)if(g[d].wl>g[d-1].wl){if(d==g.length-1)break;for(m=d+1;m<g.length;m++)if(g[m-1].wl>g[m].wl)n=g[m],g[m]=g[m-1],g[m-1]=n;else break}else for(m=d-1;0<=m;m--)if(g[m+1].wl<g[m].wl)n=g[m],g[m]=g[m+1],g[m+1]=n;else break;else for(m=d+1;m<g.length;m++)if(g[m-1].wl>g[m].wl)n=g[m],g[m]=g[m-1],g[m-1]=n;else break}0==l&&g.push(e)}d=JSON.stringify(g);server.SetTitleInternalData({Key:"RecSubDivision"+b,Value:d});a={TrophyCount:a,League:f};return{Result:a}};
function UpdateExperience(c,k,a,b,h,f){c=JSON.parse(getCatalogItem(c,k).CustomData)[a];k=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;k=k[k.length-1];f=f||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;f=GetValueFromStatistics(f,"Experience",0);if(f>=k)return k;if(isNaN(Number(c)))a=Number(c.length),b>=a&&(b=a-1),b=Number(c[b]);else if(b=Number(c),0===b)return f;f=Math.min(f+b,k);if(!h)return f;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:f}]});return f}
handlers.generateDaily=function(c,k){var a,b=new Date;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var h=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(h.DailyStatus);if(0==a){var b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),f;tParsed=JSON.parse(b.Data.DailyMissionData);f=Number(tParsed.minutesToRefresh);b=new Date;b.getTime()-Number(h.timeStamp)>6E4*Number(f)&&(a=1)}if(1!=a)return generateErrObj("DailyStatus is: "+
a+". Should be 1")}a=2;b=b.getTime();a={DailyMissionStatus:JSON.stringify({DailyStatus:a,dailyMissionClaimStatus:[0,0,0,0,0,0,0,0],timeStamp:b})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK"}};
handlers.getDailyMissionStatus=function(c,k){var a,b=[0,0,0,0,0,0,0,0],h=-1;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var f=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(f.DailyStatus);var e=b.length;e>f.dailyMissionClaimStatus.length&&(e=f.dailyMissionClaimStatus.length);for(var d=0;d<e;d++)b[d]=f.dailyMissionClaimStatus[d];0==a&&(e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),tParsed=
JSON.parse(e.Data.DailyMissionData),e=Number(tParsed.minutesToRefresh),d=new Date,d.getTime()-Number(f.timeStamp)>6E4*Number(e)?(a=2,b=[0,0,0,0,0,0,0,0],f=d.getTime(),f={DailyStatus:a,dailyMissionClaimStatus:b,timeStamp:f},f=JSON.stringify(f),f={DailyMissionStatus:f},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:f})):h=60*Number(e)-Math.floor((d.getTime()-Number(f.timeStamp))/1E3))}else a=2,d=new Date,f=d.getTime(),f={DailyStatus:a,dailyMissionClaimStatus:b,timeStamp:f},f=JSON.stringify(f),
f={DailyMissionStatus:f},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:f});return{Result:"OK",Message:" ",DailyStatus:{status:a,claimStatus:b,timeRemaining:h}}};handlers.getServerTime=function(c,k){return{time:new Date}};
handlers.initServerData=function(c){c=[];var k={StatisticName:"TrophyCount",Version:"0",Value:"0"};c.push(k);k={StatisticName:"League",Version:"0",Value:"0"};c.push(k);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});c=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var k={0:"Owned"},a=0;a<c.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[a].ItemInstanceId,Data:k});c=[];c.push("FordFocus");c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c});k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k});k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k});k={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k});k=[];k.push("Engine");k=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});k={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k})};
handlers.openChest=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<c.levelUpRewardIndex){var b=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),h={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:h}):b=a.Data.LastLevelReward.Value;var f=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,e=GetValueFromStatistics(a,"Experience",0);0==e&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var d=f.length,a=0;a<f.length;a++)if(!(e>=f[a])){d=a;break}if(Number(c.levelUpRewardIndex)<=Number(d))b=Number(c.levelUpRewardIndex),h.LastLevelReward=b,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:h}),a=""+b,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",
PlayFabId:currentPlayerId,ItemIds:a});else return generateFailObj("already got reward for level: "+b)}b=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<c.currCost){if("OK"!=checkBalance(c.currType,c.currCost,b.VirtualCurrency.SC,b.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.currType,Amount:c.currCost})}for(var g in c.currencyReq)0<c.currencyReq[g]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:g,Amount:c.currencyReq[g]});for(g in c.carCardsRequest)if(c.carCardsRequest.hasOwnProperty(g)){h=!1;for(a=0;a<b.Inventory.length;a++)if(b.Inventory[a].ItemId==g&&"CarCards"==b.Inventory[a].CatalogVersion){h=void 0==b.Inventory[a].CustomData?Number(c.carCardsRequest[g]):void 0==b.Inventory[a].CustomData.Amount?Number(c.carCardsRequest[g]):isNaN(Number(b.Inventory[a].CustomData.Amount))?Number(c.carCardsRequest[g]):Number(b.Inventory[a].CustomData.Amount)+Number(c.carCardsRequest[g]);
h={Amount:h};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[a].ItemInstanceId,Data:h});h=!0;break}0==h&&(a=[g],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),h={Amount:c.carCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:h}))}for(g in c.partCardsRequest)if(c.partCardsRequest.hasOwnProperty(g)){h=!1;for(a=0;a<b.Inventory.length;a++)if(b.Inventory[a].ItemId==
g&&"PartCards"==b.Inventory[a].CatalogVersion){h=void 0==b.Inventory[a].CustomData?Number(c.partCardsRequest[g]):void 0==b.Inventory[a].CustomData.Amount?Number(c.partCardsRequest[g]):isNaN(Number(b.Inventory[a].CustomData.Amount))?Number(c.partCardsRequest[g]):Number(b.Inventory[a].CustomData.Amount)+Number(c.partCardsRequest[g]);h={Amount:h};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[a].ItemInstanceId,Data:h});h=!0;break}0==h&&(a=[g],a=server.GrantItemsToUser({CatalogVersion:"PartCards",
PlayFabId:currentPlayerId,ItemIds:a}),h={Amount:c.partCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:h}))}g=server.GetUserInventory({PlayFabId:currentPlayerId});c.chestId&&0>=c.levelUpRewardIndex&&(a=UpdateExperience("Chests",c.chestId,"xpGain",0,!0),g.Experience=a);return generateInventoryChange("InventoryUpdated",g)};
handlers.purchaseBMItem=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>c.itemId||3<c.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+c.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),b=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+c.itemId].Value.split("_"),h=b.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var f;f=2>c.itemId?"PartCards":"CarCards";var e=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),h=checkBalance(a[1],e,h,h);if("OK"!=h)return h;for(var d,g,h=0;h<b.Inventory.length;h++)if(b.Inventory[h].ItemId==a[0]&&b.Inventory[h].CatalogVersion==f){d=b.Inventory[h].ItemInstanceId;void 0===b.Inventory[h].CustomData?g={Amount:1}:void 0===b.Inventory[h].CustomData.Amount?g={Amount:1}:(g=Number(b.Inventory[h].CustomData.Amount)+1,isNaN(g)&&(g=1),g={Amount:g});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:d,Data:g});break}void 0===d&&(d=[],d.push(a[0]),d=server.GrantItemsToUser({CatalogVersion:f,PlayFabId:currentPlayerId,ItemIds:d}).ItemGrantResults[0].ItemInstanceId,void 0===d?generateErrObj("grantRequest denied"):(g={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d,Data:g})));d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:e});e=a[0]+"_"+a[1]+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];b={};b["BMItem"+
c.itemId]=e;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});g=[{ItemId:a[0],CatalogVersion:f,CustomData:g}];f={};f[d.VirtualCurrency]=d.Balance;a=c.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];h={Inventory:g,VirtualCurrency:f};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:h,BMItemChange:a}};
handlers.purchaseItems=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=server.GetUserInventory({PlayFabId:currentPlayerId}),h=b.VirtualCurrency.SC,f=b.VirtualCurrency.HC;switch(c.purchaseType){case "carUpgrade":return upgradeCar(c,b,h,f);case "partUpgrade":return upgradePart(c,b,h,f);case "custPurchase":for(var e=server.GetCatalogItems({CatalogVersion:"Customization"}),d,g=0,a="SC",l=0;l<e.Catalog.length;l++)if(e.Catalog[l].ItemId==c.custId){d=
e.Catalog[l];cardInfo=JSON.parse(e.Catalog[l].CustomData);g=c.custVal+",Cost";a=cardInfo[c.custVal+",Curr"];g=cardInfo[g];f=checkBalance(a,g,h,f);if("OK"!=f)return f;break}if(void 0==d)return generateErrObj("Customization does not exist in catalog.");for(var m,n,l=0;l<b.Inventory.length;l++)if(b.Inventory[l].ItemId==c.custId){m=b.Inventory[l];n=b.Inventory[l].ItemInstanceId;if(void 0!=m.CustomData&&String(c.custVal)in m.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
m){log.info("user doesn't have customization category. Granting ... ");f=[];f.push(c.custId);f=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:f});if(0==f.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");n=f.ItemGrantResults[0].ItemInstanceId}f={};f[String(c.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:n,Data:f});f=[{ItemId:c.custId,
CatalogVersion:"Customization",CustomData:f}];0<g?(a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:g}),g={},g[a.VirtualCurrency]=a.Balance,l={Inventory:f,VirtualCurrency:g}):l={Inventory:f};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":a=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});g=!1;for(l=n=0;l<a.Catalog.length;l++)if(a.Catalog[l].ItemId==c.packId){n=a.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(a.Catalog[l].CustomData);g=!0;break}if(0==g)return generateErrObj("pack with ID: "+c.packId+" not found in catalog.");if(0>=n)return generateErrObj("pack with ID: "+c.packId+" shouldn't have negative cost.");if(n>f)return generateFailObj("Not enough HC.");a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:n});f=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});g={};g[f.VirtualCurrency]=
f.Balance;g[a.VirtualCurrency]=a.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:g});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(c){c=CheckMaintenanceAndVersion(c);return"OK"!=c?generateMaintenanceOrUpdateObj(c):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(c){c=server.GetUserInventory({PlayFabId:currentPlayerId});for(var k=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),b=!1,h=0;h<c.Inventory.length;h++)if("CarsProgress"==c.Inventory[h].CatalogVersion){var b=!0,f=checkCarDataValidity(c.Inventory[h],k);if("PlayFabError"==f||void 0===f)return generateErrObj("PlayfabError");"OK"==f?log.debug("Data for "+c.Inventory[h].ItemId+" OK"):c.Inventory[h].CustomData=f;
c.Inventory[h].CustomData.Pr=recalculateCarPr(c.Inventory[h].CustomData,c.Inventory[h].ItemId,k,a);f={};f.Pr=c.Inventory[h].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[h].ItemInstanceId,Data:f})}return!1===b?(c=[],c.push("FordFocus"),c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c}),k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k}),k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k}),k={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k}),generateErrObj("UserHasNoCars ... reiniting")):c};
handlers.retrieveBlackMarket=function(c,k){var a=CheckMaintenanceAndVersion(c);if(!0===c.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=[];b.push("BMTime");for(var h=0;4>h;h++)b.push("BMItem"+h);h=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:b});if(void 0===h.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var b=new Date,f=[];f.push("BlackMarketResetMinutes");f=server.GetTitleData({PlayFabId:currentPlayerId,Keys:f});if(!0===c.reset){a="HC";h=200;b=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==b.Data.BlackMarketResetCost&&(h=b.Data.BlackMarketResetCost.split("_"),a=h[0],h=Number(h[1]));if(0<h){b=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,h,b.VirtualCurrency.SC,b.VirtualCurrency.HC))return generateFailObj("not enough money");h=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:h});a=GenerateBlackMarket(currentPlayerId);b={};b[h.VirtualCurrency]=h.Balance;h={VirtualCurrency:b};a.InventoryChange=h;return a}return GenerateBlackMarket(currentPlayerId)}return b.getTime()-
parseInt(h.Data.BMTime.Value)>6E4*parseInt(f.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,h),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,h)};
handlers.rewardUsers=function(c,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,b=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),h=0;0>=b&&(a=Number(a)/3E3,h=Number(Math.floor(800*a)));b=Number(b)+h;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:b}]});return b};
handlers.startGame=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b="10",h,a=0,f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});if(0!=f.Statistics.length){h=f.Statistics[0].Value.toString();for(var b=Number(h).toString(2),e=1;e<b.length;e++)"1"==b[e]&&a++}b+="0";if(20<b.length){a=Array(20);b=b.slice(2);a[0]="1";for(e=0;e<b.length;e++)a[e+1]=b[e];b=a}var d=server.GetTitleData({Key:"LeagueSubdivisions SubdivisionTrophyRanges TrophyGainRange TrophyLoseRange SubdivisionPrRanges TrophyDifferenceLimit".split(" ")}),
a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TotalGames"]}).Statistics,a=GetValueFromStatistics(a,"TotalGames",0),a=Number(a)+1;1==c.debug&&log.debug("totalGamesStartedIs: "+a);var g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]}),f=0;0!=g.Statistics.length&&(f=g.Statistics[0].Value);var f=Number(f),l=JSON.parse(d.Data.SubdivisionTrophyRanges);h=JSON.parse(d.Data.LeagueSubdivisions);for(var m=JSON.parse(d.Data.SubdivisionPrRanges),
g=JSON.parse(d.Data.TrophyDifferenceLimit),n=Number(g.trophyReadjustRange),w=Number(g.maxDifference),z=g.subDivisionsToExclude,A=43,C=43,H,E=d.Data.TrophyGainRange.split("_"),F=d.Data.TrophyLoseRange.split("_"),g=Number(E[0]),d=Number(E[1]),E=Number(F[0]),F=Number(F[1]),e=0;e<l.subdivisions.length;e++)if(f<Number(l.subdivisions[e])){A=e;e<l.subdivisions.length-1&&(C=e+1);break}H=Number(l.subdivisions[C])-Number(l.subdivisions[A]);0>=H&&(H=400);var q=server.GetTitleInternalData({Keys:"RecSubDivision"+
A}).Data["RecSubDivision"+A],p=!1;void 0==q&&(p=!0);var x,r,y,t=C="noop",e=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp"]});if(void 0==e.Data||void 0==e.Data.lastOpp)t=C="noop";else for(r=e.Data.lastOpp.Value.split(","),e=0;e<r.length;e++)0==e&&(C=r[e]),1==e&&(t=r[e]);x=0==p?JSON.parse(q):[];var G=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>x.length&&(p=!0);var I=Array(x.length),B=0,q=Array(x.length);r=0;y=Array(x.length);for(var D=0,e=0;e<x.length;e++)1==p&&(G[5*Number(x[e].e)+Number(x[e].c)]=
1),x[e].uId!=currentPlayerId&&(I[B]=x[e],B++,x[e].uId!=C&&(q[r]=x[e],r++,x[e].uId!=t&&(y[D]=x[e],D++)));if(1!=p){p=[];for(e=0;e<G.length;e++)0==G[e]&&p.push(e);p=p[Math.floor(Math.random()*p.length)];e=Math.floor(p/5);p%=5;t=server.GetTitleData({Keys:"MasterUser"});if(void 0!=t.Data.MasterUser&&(t=server.GetUserReadOnlyData({PlayFabId:t.Data.MasterUser,Keys:[e+"_"+p+"_RecPos",e+"_"+p+"_RecRot",e+"_"+p+"_RecHeader"]}),void 0!=t.Data&&void 0!=t.Data[e+"_"+p+"_RecPos"]&&void 0!=t.Data[e+"_"+p+"_RecRot"]&&
void 0!=t.Data[e+"_"+p+"_RecHeader"])){var v=!0;0==f?(f=d,v=!1):f-=E;1>=f&&(f=1);h=parseInt(b,2);b=[];h={StatisticName:"WinLoss",Version:"0",Value:h};b.push(h);f={StatisticName:"TrophyCount",Version:"0",Value:f};b.push(f);f={StatisticName:"League",Version:"0",Value:u};b.push(f);f={StatisticName:"TotalGames",Version:"0",Value:a};b.push(f);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});a={trophyWin:Math.floor((Number(d)+Number(g))/2),trophyLose:Math.floor((Number(F)+Number(E))/
2)};0==v&&(a.trophyWin=0,a.trophyLose=0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:"TheStig",PosData:t.Data[e+"_"+p+"_RecPos"].Value,RotData:t.Data[e+"_"+p+"_RecRot"].Value,HeaderData:t.Data[e+"_"+p+"_RecHeader"].Value,TrophyLose:E,TrophyWin:d,Opp:"TheStig"}}}if(0==B)return generateErrObj("no valid recording found for this subdivision");u=I;0<r&&(B=r,u=q);0<D&&(B=D,u=y);q=Math.floor(Math.random()*B);q>=B&&(q=B-1);r=Math.min(B,3);y=Array(r);for(e=
0;e<r;e++)y[e]=0>=q?u[e]:q>=B-1?u[B-1-e]:u[q-Math.floor(r/2)+e];u=Math.floor(Math.random()*r);r=y[u].uId;q=y[u].e;y=y[u].c;D=server.GetUserReadOnlyData({PlayFabId:r,Keys:[q+"_"+y+"_RecPos",q+"_"+y+"_RecRot",q+"_"+y+"_RecHeader"]});if(void 0==D)return generateErrObj("Did not find recording for this user: "+r);var B=server.GetPlayerCombinedInfo({PlayFabId:r,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,
GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),p=f,u=Number(calculateLeague(f)),I="UserGenerated",t=0<u?Number(l.subdivisions[h.leagues[u-1]]):0,G=u>=h.leagues.length-1?2*t:Number(l.subdivisions[h.leagues[u]]);1==c.debug&&log.debug("I bet it will crash after this");l=JSON.parse(D.Data[q+"_"+y+"_RecHeader"].Value);1==c.debug&&log.debug("or not");void 0!=l&&(v=l.Trophies);v=Number(v);x=!0;1==c.debug&&log.debug("Adjusting trophies");if(void 0!=z)for(1==c.debug&&log.debug("excludedSubdivisionsFromTrophyAdjustment: "+
z),e=0;e<z.length;e++)if(A==Number(z[e])){1==c.debug&&log.debug("in excluded subdivision: "+A);x=!1;break}1==x&&Number(Math.abs(p-v))>=w&&(1==c.debug&&log.debug("generating new trophies. Reason: user trophies: "+p+" vs opponent trophies: "+v),v=p-n+Math.floor(Math.random()*n*2),l.Trophies=v,1==c.debug&&log.debug("performing stringify on recordingData header"),D.Data[q+"_"+y+"_RecHeader"].Value=JSON.stringify(l));0>=G-t?(n=F,v=g):Number(Math.abs(p-v))>Number(H)?(n=Math.floor((E+F)/2)-1+Math.floor(3*
Math.random()),v=Math.floor((d+g)/2)-1+Math.floor(3*Math.random())):(n=E+Math.floor((F-E)/2*((p-v)/(G-t)+1)),v=g+Math.floor((d-g)/2*((v-p)/(G-t)+1)));1==c.debug&&log.debug("Opponent's PR is TOO DAMN HIGH! "+l.Pr+" vs "+Number(m.subdivisions[Number(h.leagues[u-1])+1])+". You are in subdivision: "+Number(h.leagues[u-1]+1));l.Pr>Number(m.subdivisions[Number(h.leagues[u-1])+1])&&(n=Math.floor((E+F)/2)-1+Math.floor(3*Math.random()),v=Math.floor((d+g)/2)-1+Math.floor(3*Math.random()),I="MobyDick");g=!0;
0==f?(g=!1,f=d):(f-=Number(n),1>=f&&(f=1));h=parseInt(b,2);1==c.debug&&log.debug("updating TotalGames TO: "+a);b=[];h={StatisticName:"WinLoss",Version:"0",Value:h};b.push(h);f={StatisticName:"TrophyCount",Version:"0",Value:f};b.push(f);f={StatisticName:"League",Version:"0",Value:u};b.push(f);f={StatisticName:"TotalGames",Version:"0",Value:a};b.push(f);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});a={trophyWin:v,trophyLose:n,lastOpp:r+","+C};0==g&&(a.trophyWin=0,a.trophyLose=
0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:I,PosData:D.Data[q+"_"+y+"_RecPos"].Value,RotData:D.Data[q+"_"+y+"_RecRot"].Value,HeaderData:D.Data[q+"_"+y+"_RecHeader"].Value,TrophyLose:n,TrophyWin:v,Opp:B.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var b=server.GetUserInventory({PlayFabId:currentPlayerId}),h=[],f="-1",e={},d={PaintJobs:{itemOwned:"no",itemCustData:c.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:c.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:c.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:c.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:c.wsId,carItemId:"WindshieldId"}},a=0;a<b.Inventory.length;a++)b.Inventory[a].ItemId==c.carId&&"CarsProgress"==b.Inventory[a].CatalogVersion&&(f=b.Inventory[a].ItemInstanceId),b.Inventory[a].ItemId in d&&(d[b.Inventory[a].ItemId].itemOwned="yes",d[b.Inventory[a].ItemId].itemCustData in b.Inventory[a].CustomData?e[d[b.Inventory[a].ItemId].carItemId]=d[b.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+b.Inventory[a].ItemId+" "+d[b.Inventory[a].ItemId].itemCustData));if("-1"==
f)return generateFailObj("User does not own car with id: "+c.carId);for(var g in d)d.hasOwnProperty(g)&&"no"==d[g].itemOwned&&h.push(g);if(e=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:e});g=[{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:e}];if(0<h.length)for(h=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:h}),b={0:"Owned"},
a=0;a<h.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[a].ItemInstanceId,Data:b});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:g}}};
function upgradeCar(c,k,a,b){for(var h=server.GetCatalogItems({CatalogVersion:"CarCards"}),f=!1,e,d=0;d<k.Inventory.length;d++)if(k.Inventory[d].ItemId==c.carId&&"CarsProgress"==k.Inventory[d].CatalogVersion){f=!0;e=k.Inventory[d];break}for(var g,d=0;d<h.Catalog.length;d++)if(h.Catalog[d].ItemId==c.carId){g=JSON.parse(h.Catalog[d].CustomData);break}if(void 0===g)return generateErrObj("CardNotFoundForCarwithID: "+c.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===f){var l=parseInt(e.CustomData.CarLvl)+1;if(l>=Number(g.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var m=getObjectValueFromLevel(g,"currCostPerLvl",l),d=checkBalance(g.currType,m,a,b);if("OK"!=d)return d;a=getObjectValueFromLevel(g,"cardCostPerLvl",l);e.CustomData.CarLvl=l;for(var f=!1,n,d=0;d<k.Inventory.length;d++)if(k.Inventory[d].ItemId==c.carId&&"CarCards"==k.Inventory[d].CatalogVersion){f=!0;try{if(void 0===k.Inventory[d].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===k.Inventory[d].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(k.Inventory[d].CustomData.Amount)>=a)k.Inventory[d].CustomData.Amount-=a,n={Amount:k.Inventory[d].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[d].ItemInstanceId,Data:n});else return generateFailObj("Insufficient cards for real: "+k.Inventory[d].CustomData.Amount+" vs "+a)}catch(z){return generateFailObj("Insufficient cards")}break}if(!1===
f)return generateFailObj("No cards found");k=recalculateCarPr(e.CustomData,e.ItemId,h,void 0);d={CarLvl:l,Pr:k};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemInstanceId,Data:d});var w;0<m&&(w=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g.currType,Amount:m}));c=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:n},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:d}];n={};d={Inventory:c};void 0!=w&&(n[w.VirtualCurrency]=
w.Balance,d.VirtualCurrency=n);d.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+g.rarity,l,!0);return generateInventoryChange("InventoryUpdate",d)}f=!1;for(d=0;d<k.Inventory.length;d++)if(k.Inventory[d].ItemId==c.carId&&"CarCards"==k.Inventory[d].CatalogVersion){f=!0;try{if(void 0===k.Inventory[d].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===k.Inventory[d].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(k.Inventory[d].CustomData.Amount)>=Number(g.cardCostPerLvl[1]))m=k.Inventory[d].ItemInstanceId,k.Inventory[d].CustomData.Amount-=g.cardCostPerLvl[1],n={Amount:k.Inventory[d].CustomData.Amount};else return generateFailObj("Insufficient cards: "+k.Inventory[d].CustomData.Amount+" vs "+g.cardCostPerLvl[1]+".")}catch(z){return generateFailObj("Insufficient cards: "+z)}break}if(0==f)return generateFailObj("No cards found");d=checkBalance(g.currType,g.currCostPerLvl[1],a,b);if("OK"!=d)return d;
e=[];e.push(c.carId);e=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:e});if(!1===e.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:m,Data:n});0<g.currCostPerLvl[1]&&(w=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:g.currType,Amount:g.currCostPerLvl[1]}));d={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[0].ItemInstanceId,Data:d});d={TiresLvl:"0",TurboLvl:"0",PaintId:g.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[0].ItemInstanceId,Data:d});d={PlatesId:"0",WindshieldId:"0",
Pr:Number(g.basePr)+g.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[0].ItemInstanceId,Data:d});h=e=!1;for(d=0;d<k.Inventory.length;d++)if("PaintJobs"==k.Inventory[d].ItemId){h=!0;void 0!=k.Inventory[d].CustomData?g.defaultPaintID in k.Inventory[d].CustomData?e=!0:(l={},l[g.defaultPaintID]="Owned"):(l={},l[g.defaultPaintID]="Owned");void 0!=l&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[d].ItemInstanceId,
Data:l});break}0==h&&(paintToGive=[],paintToGive.push("PaintJobs"),k=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),l={},l[g.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:l}));d={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:g.defaultPaintID,DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",
Pr:Number(g.basePr)+g.prPerLvl[1]};c=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:n},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:d}];0==e&&(n={},n[g.defaultPaintID]="Owned",c.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:n}));n={};d={Inventory:c};void 0!=w&&(n[w.VirtualCurrency]=w.Balance,d.VirtualCurrency=n);d.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+g.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",d)}
function upgradePart(c,k,a,b){for(var h=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),f=!1,e=0;e<h.Catalog.length;e++)if(h.Catalog[e].ItemId==c.carId){f=!0;break}if(!1===f)return generateErrObj("car with ID: "+c.carId+" not found in catalog.");for(var h=server.GetCatalogItems({CatalogVersion:"PartCards"}),f=!1,d,e=0;e<h.Catalog.length;e++)if(h.Catalog[e].ItemId==c.partId){d=JSON.parse(h.Catalog[e].CustomData);f=!0;break}if(0==f)return generateErrObj("part with ID: "+c.partId+" not found in catalog.");
for(var f=!1,g,e=0;e<k.Inventory.length;e++)if(k.Inventory[e].ItemId==c.carId&&"CarsProgress"==k.Inventory[e].CatalogVersion){f=!0;g=k.Inventory[e];break}if(!1===f)return generateFailObj("car with ID: "+c.carId+" not found in user inventory.");for(var l=!1,f=0,m={},e=0;e<k.Inventory.length;e++)if(k.Inventory[e].ItemId==c.partId&&"PartCards"==k.Inventory[e].CatalogVersion){var l=!0,n={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},
f=parseInt(g.CustomData[n[c.partId]])+1;if(f>=Number(d.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var w=getObjectValueFromLevel(d,"cardCostPerLvl",f),z=getObjectValueFromLevel(d,"currCostPerLvl",f);m[n[c.partId]]=f;g.CustomData[n[c.partId]]=f;var A;a=checkBalance(d.currType,z,a,b);if("OK"!=a)return a;try{if(void 0!==k.Inventory[e].CustomData&&void 0!==k.Inventory[e].CustomData.Amount&&k.Inventory[e].CustomData.Amount>=w)k.Inventory[e].CustomData.Amount-=w,A={Amount:k.Inventory[e].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[e].ItemInstanceId,Data:A});else return generateFailObj("Insufficient cards")}catch(H){return generateFailObj("Insufficient cards")}break}if(0==l)return generateFailObj("Part not found");var C;0<z&&(C=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:d.currType,Amount:z}));e=recalculateCarPr(g.CustomData,g.ItemId,void 0,h);m.Pr=e;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:g.ItemInstanceId,Data:m});g={};e={Inventory:[{ItemId:c.partId,CatalogVersion:"PartCards",CustomData:A},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:m}]};void 0!==C&&(g[C.VirtualCurrency]=C.Balance,e.VirtualCurrency=g);e.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+d.rarity,f,!0);return generateInventoryChange("InventoryUpdatePart",e)};
