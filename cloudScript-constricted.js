function checkCarDataValidity(c,f){if(void 0==c.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});for(var d=0,e=0;e<f.Catalog.length;e++)if(f.Catalog[e].ItemId==c.ItemId){var g=
JSON.parse(f.Catalog[e].CustomData),d=parseInt(g.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a})}catch(h){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:d}}return"OK"}function generateFailObj(c){return{Result:"Failed",Message:c}}
function generateErrObj(c){return{Result:"Error",Message:c}}function generateInventoryChange(c,f){return{Result:"OK",Message:c,InventoryChange:f}}function checkBalance(c,f,a,d){if("SC"==c){if(a<f)return generateFailObj("NotEnoughSC")}else if(d<f)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(c){var f=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==f.Data.LeagueSubdivisions||void 0==f.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(f.Data.LeagueSubdivisions).leagues,f=JSON.parse(f.Data.SubdivisionTrophyRanges).subdivisions,d=0;d<a.length;d++)if(!(Number(c)>Number(f[a[d]])))return d}
function recalculateCarPr(c,f,a,d){var e=0,g;g=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<g.Catalog.length;a++)if(g.Catalog[a].ItemId==f){e=JSON.parse(g.Catalog[a].CustomData);e=parseInt(e.basePr)+getObjectValueFromLevel(e,"prPerLvl",c.CarLvl);break}d=void 0===d?server.GetCatalogItems({CatalogVersion:"PartCards"}):d;c={Exhaust:c.ExhaustLvl,Engine:c.EngineLvl,Gearbox:c.GearboxLvl,Suspension:c.SuspensionLvl,Tires:c.TiresLvl,Turbo:c.TurboLvl};for(a=0;a<d.Catalog.length;a++)f=
JSON.parse(d.Catalog[a].CustomData),e+=getObjectValueFromLevel(f,"prPerLvl",Number(c[d.Catalog[a].ItemId]));return e}
function GenerateBlackMarket(c){var f=1,a=server.GetPlayerStatistics({PlayFabId:c,StatisticNames:["League"]});0!=a.Statistics.length&&(f=a.Statistics[0].Value.toString());var d=server.GetCatalogItems({CatalogVersion:"PartCards"}),a={};a.BMTime=(new Date).getTime();var e=Math.floor(Math.random()*d.Catalog.length),g=JSON.parse(d.Catalog[e].CustomData);if(void 0==g)return generateErrObj("Part card "+d.Catalog[b].ItemId+" has no custom data.");a.BMItem0=d.Catalog[e].ItemId+"_"+g.BMCurrType+"_"+g.BMbasePrice+
"_0_"+g.BMpriceIncrPerBuy;var h=Math.floor(Math.random()*d.Catalog.length);h==e&&(h=d.Catalog.length-e-1);g=JSON.parse(d.Catalog[h].CustomData);if(void 0==g)return generateErrObj("Part card "+d.Catalog[b].ItemId+" has no custom data.");a.BMItem1=d.Catalog[h].ItemId+"_"+g.BMCurrType+"_"+g.BMbasePrice+"_0_"+g.BMpriceIncrPerBuy;for(var d=server.GetCatalogItems({CatalogVersion:"CarCards"}),g=[],h=[],b=0;b<d.Catalog.length;b++){e=JSON.parse(d.Catalog[b].CustomData);if(void 0==e)return generateErrObj("Car card "+
d.Catalog[b].ItemId+" has no custom data.");e.unlockedAtRank>f+1||("false"==e.rareCar?g.push(d.Catalog[b].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy):h.push(d.Catalog[b].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy))}0>=g.length?(a.BMItem2=h[Math.floor(Math.random()*h.length)],a.BMItem3=h[Math.floor(Math.random()*h.length)]):0>=h.length?(a.BMItem2=g[Math.floor(Math.random()*g.length)],a.BMItem3=g[Math.floor(Math.random()*g.length)]):(a.BMItem2=g[Math.floor(Math.random()*
g.length)],a.BMItem3=h[Math.floor(Math.random()*h.length)]);server.UpdateUserInternalData({PlayFabId:c,Data:a});f=[];f.push("BlackMarketResetMinutes");c=server.GetTitleData({PlayFabId:c,Keys:f});a.BMTime=60*parseInt(c.Data.BlackMarketResetMinutes);return a}
function GetCurrentBlackMarket(c,f){var a={},d=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:c,Keys:e});a.BMTime=60*parseInt(e.Data.BlackMarketResetMinutes)-Math.floor((d.getTime()-f.Data.BMTime.Value)/1E3);for(d=0;4>d;d++)a["BMItem"+d]=f.Data["BMItem"+d].Value;return a}function GetValueFromStatistics(c,f,a){for(var d,e=0;e<c.length;e++)c[e].StatisticName===f&&(d=c[e]);return void 0===d?void 0!==a?a:0:Number(d.Value)}
function getCatalogItem(c,f){for(var a=server.GetCatalogItems({CatalogVersion:c}),d=0;d<a.Catalog.length;d++)if(a.Catalog[d].ItemId===f)return a.Catalog[d]}function getObjectValueFromLevel(c,f,a,d){d||(d=0);if(!c[f]||!c[f].length)return d;var e=Number(c[f].length);a>=e&&(a=e-1);return Number(c[f][a])||d}
handlers.buyChest=function(c,f){var a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(c.curr,c.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<c.cost){var a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.curr,Amount:c.cost}),d={};d[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",{VirtualCurrency:d})}return generateInventoryChange("ChestBought",{})};
handlers.endGame=function(c,f){var a="01",d,e="0";"rWin"==c.outcome&&(e="1");var g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=g.Statistics.length&&(d=g.Statistics[0].Value.toString(),a=Number(d).toString(2));var g=0,h;h=Array(a.length);for(var b=0;b<h.length-1;b++)h[b]=a[b];h[h.length-1]=e;a=h;e=a.length;for(b=0;b<a.length;b++)"1"==a[b]&&g++;h=Math.round(g/e*100);var k=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),e=0,l,g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]});0!=g.Statistics.length&&(e=g.Statistics[0].Value,log.debug("getting trophy count "+g.Statistics[0].Value));l=e=Number(e);g=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose","trophyWin"]});g=void 0==g.Data.trophyLose||void 0==g.Data.trophyWin?45:Number(g.Data.trophyLose.Value)+Number(g.Data.trophyWin.Value);"rWin"==c.outcome&&(e+=g);log.debug("trophies change: "+l+" => "+e);g=calculateLeague(e);for(b=d=0;b<a.length;b++)"1"==a[b]&&(d+=Math.pow(2,
b));b=[];b.push({StatisticName:"WinLoss",Version:"0",Value:d});a={StatisticName:"TrophyCount",Version:"0",Value:e};b.push(a);a={StatisticName:"League",Version:"0",Value:g};b.push(a);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=JSON.parse(c.recordingHeader);if(10>=Number(b.Score)){var p={TrophyCount:e,League:g};return{Result:p}}b=JSON.parse(c.recordingHeader);log.debug("score: "+b.Score);a=JSON.parse(k.Data.SubdivisionTrophyRanges);for(b=0;b<a.subdivisions.length;b++)if(l<
a.subdivisions[b]){p=b;break}b=[];b.push({Key:c.envIndex+"_"+c.courseIndex+"_RecPos",Value:c.recordingPos});b.push({Key:c.envIndex+"_"+c.courseIndex+"_RecRot",Value:c.recordingRot});b.push({Key:c.envIndex+"_"+c.courseIndex+"_RecHeader",Value:c.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:b});b=server.GetTitleInternalData({Key:"RecSubDivision"+p}).Data["RecSubDivision"+p];if(void 0==b)a=[],h={wl:h,e:c.envIndex,c:c.courseIndex,uId:currentPlayerId},a.push(h);else{a=
JSON.parse(b);h={wl:h,e:c.envIndex,c:c.courseIndex,uId:currentPlayerId};k=!1;for(b=l=0;b<a.length;b++)a[b].uId==currentPlayerId&&l++;if(2<l)return p={TrophyCount:e,League:g},{Result:p};for(b=0;b<a.length;b++)if(a[b].e==c.envIndex&&a[b].c==c.courseIndex){k=!0;a[b]=h;if(1==a.length)break;if(0<b)if(a[b].wl>a[b-1].wl){if(b==a.length-1)break;for(l=b+1;l<a.length;l++)if(a[l-1].wl>a[l].wl)d=a[l],a[l]=a[l-1],a[l-1]=d;else break}else for(l=b-1;0<=l;l--)if(a[l+1].wl<a[l].wl)d=a[l],a[l]=a[l+1],a[l+1]=d;else break;
else for(l=b+1;l<a.length;l++)if(a[l-1].wl>a[l].wl)d=a[l],a[l]=a[l-1],a[l-1]=d;else break}0==k&&a.push(h)}b=JSON.stringify(a);server.SetTitleInternalData({Key:"RecSubDivision"+p,Value:b});p={TrophyCount:e,League:g};return{Result:p}};
function UpdateExperience(c,f,a,d,e,g){c=JSON.parse(getCatalogItem(c,f).CustomData)[a];f=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;f=f[f.length-1];g=g||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;g=GetValueFromStatistics(g,"Experience",0);if(g>=f)return f;if(isNaN(Number(c)))a=Number(c.length),d>=a&&(d=a-1),d=Number(c[d]);else if(d=Number(c),0===d)return g;g=Math.min(g+d,f);if(!e)return g;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:g}]});return g}handlers.getServerTime=function(c,f){return{time:new Date}};handlers.giveMoney=function(c){c=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.curr,Amount:c.amount});var f={};f[c.VirtualCurrency]=c.Balance;return{Result:"OK",Message:"CurrencyChanged",InventoryChange:{VirtualCurrency:f}}};
handlers.grantItems=function(c){for(var f=server.GetUserInventory({PlayFabId:currentPlayerId}),a,d=!1,e=0;e<f.Inventory.length;e++)if(f.Inventory[e].ItemId==c.itemId&&f.Inventory[e].CatalogVersion==c.catalogId){a=void 0==f.Inventory[e].CustomData?c.amount:void 0==f.Inventory[e].CustomData.Amount?c.amount:isNaN(Number(f.Inventory[e].CustomData.Amount))?c.amount:Number(f.Inventory[e].CustomData.Amount)+c.amount;a={Amount:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.Inventory[e].ItemInstanceId,
Data:a});d=!0;break}0==d&&(f=[],f.push(c.itemId),f=server.GrantItemsToUser({CatalogVersion:c.catalogId,PlayFabId:currentPlayerId,ItemIds:f}),a={Amount:c.amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:a}));return{Result:"OK",Message:"InventoryUpdated",InventoryChange:{Inventory:[{ItemId:c.itemId,CatalogVersion:c.catalogId,CustomData:a}]}}};
handlers.initServerData=function(c){c=[];var f={StatisticName:"TrophyCount",Version:"0",Value:"0"};c.push(f);f={StatisticName:"League",Version:"0",Value:"0"};c.push(f);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});c=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var f={0:"Owned"},a=0;a<c.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[a].ItemInstanceId,Data:f});c=[];c.push("FordFocus");c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c});f={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:f});f={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:f});f={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:f});f=[];f.push("Engine");f=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:f});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});f={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:f})};
handlers.openChest=function(c,f){if(0<c.levelUpRewardIndex){var a=0,d=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),e={LastLevelReward:0};void 0==d.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}):a=d.Data.LastLevelReward.Value;var g=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics,h=GetValueFromStatistics(d,
"Experience",0);0==h&&(d=[],d.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:d}));for(var b=g.length,d=0;d<g.length;d++)if(!(h>=g[d])){b=d;break}if(Number(c.levelUpRewardIndex)<=Number(b))a=Number(c.levelUpRewardIndex),e.LastLevelReward=a,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}),d=""+a,d="000".substring(0,3-d.length)+d,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",PlayFabId:currentPlayerId,
ItemIds:d});else return generateFailObj("already got reward for level: "+a)}a=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<c.currCost){if("OK"!=checkBalance(c.currType,c.currCost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.currType,Amount:c.currCost})}for(var k in c.currencyReq)0<c.currencyReq[k]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:k,
Amount:c.currencyReq[k]});for(k in c.carCardsRequest)if(c.carCardsRequest.hasOwnProperty(k)){e=!1;for(d=0;d<a.Inventory.length;d++)if(a.Inventory[d].ItemId==k&&"CarCards"==a.Inventory[d].CatalogVersion){e=void 0==a.Inventory[d].CustomData?Number(c.carCardsRequest[k]):void 0==a.Inventory[d].CustomData.Amount?Number(c.carCardsRequest[k]):isNaN(Number(a.Inventory[d].CustomData.Amount))?Number(c.carCardsRequest[k]):Number(a.Inventory[d].CustomData.Amount)+Number(c.carCardsRequest[k]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.Inventory[d].ItemInstanceId,Data:e});e=!0;break}0==e&&(d=[k],d=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:d}),e={Amount:c.carCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:e}))}for(k in c.partCardsRequest)if(c.partCardsRequest.hasOwnProperty(k)){e=!1;for(d=0;d<a.Inventory.length;d++)if(a.Inventory[d].ItemId==k&&"PartCards"==a.Inventory[d].CatalogVersion){e=
void 0==a.Inventory[d].CustomData?Number(c.partCardsRequest[k]):void 0==a.Inventory[d].CustomData.Amount?Number(c.partCardsRequest[k]):isNaN(Number(a.Inventory[d].CustomData.Amount))?Number(c.partCardsRequest[k]):Number(a.Inventory[d].CustomData.Amount)+Number(c.partCardsRequest[k]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[d].ItemInstanceId,Data:e});e=!0;break}0==e&&(d=[k],d=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,
ItemIds:d}),e={Amount:c.partCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:e}))}k=server.GetUserInventory({PlayFabId:currentPlayerId});c.chestId&&0>=c.levelUpRewardIndex&&(d=UpdateExperience("Chests",c.chestId,"xpGain",0,!0),k.Experience=d);return generateInventoryChange("InventoryUpdated",k)};
handlers.purchaseBMItem=function(c,f){if(0>c.itemId||3<c.itemId)return generateFailObj("invalid item index");var a=[];a.push("BMItem"+c.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),d=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+c.itemId].Value.split("_"),e=d.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");var g;g=2>c.itemId?"PartCards":"CarCards";var h=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),
e=checkBalance(a[1],h,e,e);if("OK"!=e)return e;for(var b,k,e=0;e<d.Inventory.length;e++)if(d.Inventory[e].ItemId==a[0]&&d.Inventory[e].CatalogVersion==g){b=d.Inventory[e].ItemInstanceId;void 0===d.Inventory[e].CustomData?k={Amount:1}:void 0===d.Inventory[e].CustomData.Amount?k={Amount:1}:(k=Number(d.Inventory[e].CustomData.Amount)+1,isNaN(k)&&(k=1),k={Amount:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b,Data:k});break}void 0===b&&(b=[],b.push(a[0]),b=server.GrantItemsToUser({CatalogVersion:g,
PlayFabId:currentPlayerId,ItemIds:b}).ItemGrantResults[0].ItemInstanceId,void 0===b?generateErrObj("grantRequest denied"):(k={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b,Data:k})));b=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:h});h=a[0]+"_"+a[1]+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];d={};d["BMItem"+c.itemId]=h;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});k=[{ItemId:a[0],CatalogVersion:g,
CustomData:k}];g={};g[b.VirtualCurrency]=b.Balance;a=c.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];e={Inventory:k,VirtualCurrency:g};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:e,BMItemChange:a}};
handlers.purchaseItems=function(c,f){var a=server.GetUserInventory({PlayFabId:currentPlayerId}),d=a.VirtualCurrency.SC,e=a.VirtualCurrency.HC;switch(c.purchaseType){case "carUpgrade":return upgradeCar(c,a,d,e);case "partUpgrade":return upgradePart(c,a,d,e);case "custPurchase":for(var g=server.GetCatalogItems({CatalogVersion:"Customization"}),h,b=0,k="SC",l=0;l<g.Catalog.length;l++)if(g.Catalog[l].ItemId==c.custId){h=g.Catalog[l];cardInfo=JSON.parse(g.Catalog[l].CustomData);b=c.custVal+",Cost";k=cardInfo[c.custVal+
",Curr"];b=cardInfo[b];e=checkBalance(k,b,d,e);if("OK"!=e)return e;break}if(void 0==h)return generateErrObj("Customization does not exist in catalog.");for(var p,m,l=0;l<a.Inventory.length;l++)if(a.Inventory[l].ItemId==c.custId){p=a.Inventory[l];m=a.Inventory[l].ItemInstanceId;if(void 0!=p.CustomData&&String(c.custVal)in p.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==p){log.info("user doesn't have customization category. Granting ... ");e=[];e.push(c.custId);
e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e});if(0==e.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");m=e.ItemGrantResults[0].ItemInstanceId}e={};e[String(c.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:m,Data:e});e=[{ItemId:c.custId,CatalogVersion:"Customization",CustomData:e}];0<b?(k=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:k,Amount:b}),b={},b[k.VirtualCurrency]=k.Balance,l={Inventory:e,VirtualCurrency:b}):l={Inventory:e};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":k=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});b=!1;for(l=m=0;l<k.Catalog.length;l++)if(k.Catalog[l].ItemId==c.packId){m=k.Catalog[l].VirtualCurrencyPrices.HC;cardInfo=JSON.parse(k.Catalog[l].CustomData);b=!0;break}if(0==b)return generateErrObj("pack with ID: "+c.packId+" not found in catalog.");
if(0>=m)return generateErrObj("pack with ID: "+c.packId+" shouldn't have negative cost.");if(m>e)return generateFailObj("Not enough HC.");k=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:m});e=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});b={};b[e.VirtualCurrency]=e.Balance;b[k.VirtualCurrency]=k.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:b});default:log.debug("invalid purchase parameter")}};
handlers.requestCurrency=function(c){return{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(c){c=server.GetUserInventory({PlayFabId:currentPlayerId});for(var f=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),d=!1,e=0;e<c.Inventory.length;e++)if("CarsProgress"==c.Inventory[e].CatalogVersion){var d=!0,g=checkCarDataValidity(c.Inventory[e],f);if("PlayFabError"==g||void 0===g)return generateErrObj("PlayfabError");"OK"==g?log.debug("Data for "+c.Inventory[e].ItemId+" OK"):c.Inventory[e].CustomData=g;
c.Inventory[e].CustomData.Pr=recalculateCarPr(c.Inventory[e].CustomData,c.Inventory[e].ItemId,f,a);g={};g.Pr=c.Inventory[e].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[e].ItemInstanceId,Data:g})}return!1===d?(c=[],c.push("FordFocus"),c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c}),f={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:f}),f={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:f}),f={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:f}),generateErrObj("UserHasNoCars ... reiniting")):c};
handlers.retrieveBlackMarket=function(c,f){var a=[];a.push("BMTime");for(var d=0;4>d;d++)a.push("BMItem"+d);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a});if(void 0===a.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var d=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:e});if(!0===c.reset){a="HC";d=200;e=server.GetTitleData({Keys:["BlackMarketResetCost"]});void 0!==e.Data.BlackMarketResetCost&&(d=e.Data.BlackMarketResetCost.split("_"),
a=d[0],d=Number(d[1]));if(0<d){e=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,d,e.VirtualCurrency.SC,e.VirtualCurrency.HC))return generateFailObj("not enough money");d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:d});a=GenerateBlackMarket(currentPlayerId);e={};e[d.VirtualCurrency]=d.Balance;d={VirtualCurrency:e};a.InventoryChange=d;return a}return GenerateBlackMarket(currentPlayerId)}return d.getTime()-parseInt(a.Data.BMTime.Value)>
6E4*parseInt(e.Data.BlackMarketResetMinutes)?GenerateBlackMarket(currentPlayerId):GetCurrentBlackMarket(currentPlayerId,a)};
handlers.startGame=function(c,f){var a="10",d,e=50,g,h=0;g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});if(0!=g.Statistics.length){d=g.Statistics[0].Value.toString();a=Number(d).toString(2);g=a.length;for(var b=0;b<a.length;b++)"1"==a[b]&&h++;e=Math.round(h/g*100)}a+="0";20<a.length&&(a=a.slice(1));var k=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges","TrophyGainRange","TrophyLoseRange"]});g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]});h=0;0!=g.Statistics.length&&(h=g.Statistics[0].Value);var h=Number(h),l=JSON.parse(k.Data.SubdivisionTrophyRanges),p=JSON.parse(k.Data.LeagueSubdivisions),m=43,r=43;g=k.Data.TrophyGainRange.split("_");var w=k.Data.TrophyLoseRange.split("_");d=Number(g[0]);g=Number(g[1]);k=Number(w[0]);w=Number(w[1]);for(b=0;b<l.subdivisions.length;b++)if(h<Number(l.subdivisions[b])){m=b;b<l.subdivisions.length-1&&(r=b+1);break}r=Number(l.subdivisions[r])-Number(l.subdivisions[m]);
0>=r&&(r=400);var u=server.GetTitleInternalData({Keys:"RecSubDivision"+m}).Data["RecSubDivision"+m],n=!1;void 0==u&&(n=!0);var v,q=m="noop",x,b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp"]});if(void 0==b.Data||void 0==b.Data.lastOpp)q=m="noop";else for(x=b.Data.lastOpp.Value.split(","),b=0;b<x.length;b++)0==b&&(m=x[b]),1==b&&(q=x[b]);v=0==n?JSON.parse(u):[];var C=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>v.length&&(n=!0);var D=Array(v.length),B=0,u=Array(v.length);x=0;for(var A=
Array(v.length),y=0,b=0;b<v.length;b++)1==n&&(C[5*Number(v[b].e)+Number(v[b].c)]=1),v[b].uId!=currentPlayerId&&(D[B]=v[b],B++,v[b].uId!=m&&(u[x]=v[b],x++,v[b].uId!=q&&(A[y]=v[b],y++)));if(1==n){for(b=q=n=0;b<C.length;b++)if(0==C[b]){n=Math.floor(b/5);q=b%5;break}b=server.GetTitleData({Keys:"MasterUser"});if(void 0!=b.Data.MasterUser&&(b=server.GetUserReadOnlyData({PlayFabId:b.Data.MasterUser,Keys:[n+"_"+q+"_RecPos",n+"_"+q+"_RecRot",n+"_"+q+"_RecHeader"]}),void 0!=b.Data&&void 0!=b.Data[n+"_"+q+"_RecPos"]&&
void 0!=b.Data[n+"_"+q+"_RecRot"]&&void 0!=b.Data[n+"_"+q+"_RecHeader"])){m=!0;0==h?(h=g,m=!1):h-=k;1>=h&&(h=1);d=parseInt(a,2);var a=[],z={StatisticName:"WinLoss",Version:"0",Value:d};a.push(z);h={StatisticName:"TrophyCount",Version:"0",Value:h};a.push(h);h={StatisticName:"League",Version:"0",Value:t};a.push(h);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a});a={trophyWin:g,trophyLose:k};0==m&&(a.trophyWin=0,a.trophyLose=0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,
Data:a});return{Result:"OK",RecType:"Default",PosData:b.Data[n+"_"+q+"_RecPos"].Value,RotData:b.Data[n+"_"+q+"_RecRot"].Value,HeaderData:b.Data[n+"_"+q+"_RecHeader"].Value,TrophyLose:k,TrophyWin:g,Opp:"Mniezo"}}}if(0==B)return generateErrObj("no valid recording found for this subdivision");t=D;n=B;0<x&&(n=x,t=u);0<y&&(n=y,t=A);u=n-1;for(b=0;b<n;b++)if(t[b].wl>e){u=b;break}e=Math.min(n,3);q=Array(e);for(b=0;b<e;b++)q[b]=0>=u?t[b]:u>=n-1?t[n-1-b]:t[u-Math.floor(e/2)+b];t=Math.floor(Math.random()*e);
b=q[t].uId;e=q[t].e;n=q[t].c;q=server.GetUserReadOnlyData({PlayFabId:b,Keys:[e+"_"+n+"_RecPos",e+"_"+n+"_RecRot",e+"_"+n+"_RecHeader"]});if(void 0==q)return generateErrObj("Did not find recording for this user: "+b);var u=server.GetPlayerCombinedInfo({PlayFabId:b,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),A=h,t=Number(calculateLeague(h));
x="UserGenerated";y=0<t?Number(l.subdivisions[p.leagues[t-1]]):0;p=t>=p.leagues.length-1?2*y:Number(l.subdivisions[p.leagues[t]]);l=JSON.parse(q.Data[e+"_"+n+"_RecHeader"].Value);void 0!=l&&(z=l.Trophies);z=Number(z);0>=p-y?l=g:Number(Math.abs(A-z))>Number(r)?(l=Math.floor((k+w)/2),k=Math.floor((g+d)/2),x="Default"):(l=k+Math.floor((w-k)/2*((A-z)/(p-y)+1)),k=d+Math.floor((g-d)/2*((z-A)/(p-y)+1)));p=!0;0==h?(p=!1,h=g):(h-=Number(l),1>=h&&(h=1));d=parseInt(a,2);a=[];z={StatisticName:"WinLoss",Version:"0",
Value:d};a.push(z);h={StatisticName:"TrophyCount",Version:"0",Value:h};a.push(h);h={StatisticName:"League",Version:"0",Value:t};a.push(h);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a});a={trophyWin:k,trophyLose:l,lastOpp:b+","+m};0==p&&(a.trophyWin=0,a.trophyLose=0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:x,PosData:q.Data[e+"_"+n+"_RecPos"].Value,RotData:q.Data[e+"_"+n+"_RecRot"].Value,HeaderData:q.Data[e+"_"+n+"_RecHeader"].Value,
TrophyLose:l,TrophyWin:k,Opp:u.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(c,f){for(var a=server.GetUserInventory({PlayFabId:currentPlayerId}),d=[],e="-1",g={},h={PaintJobs:{itemOwned:"no",itemCustData:c.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:c.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:c.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:c.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",itemCustData:c.wsId,carItemId:"WindshieldId"}},b=0;b<a.Inventory.length;b++)a.Inventory[b].ItemId==
c.carId&&"CarsProgress"==a.Inventory[b].CatalogVersion&&(e=a.Inventory[b].ItemInstanceId),a.Inventory[b].ItemId in h&&(h[a.Inventory[b].ItemId].itemOwned="yes",h[a.Inventory[b].ItemId].itemCustData in a.Inventory[b].CustomData?g[h[a.Inventory[b].ItemId].carItemId]=h[a.Inventory[b].ItemId].itemCustData:log.debug("user doesn't own: "+a.Inventory[b].ItemId+" "+h[a.Inventory[b].ItemId].itemCustData));if("-1"==e)return generateFailObj("User does not own car with id: "+c.carId);for(var k in h)h.hasOwnProperty(k)&&
"no"==h[k].itemOwned&&d.push(k);if(g=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e,Data:g});a=[{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:g}];if(0<d.length)for(d=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:d}),e={0:"Owned"},b=0;b<d.ItemGrantResults.length;b++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:d.ItemGrantResults[b].ItemInstanceId,Data:e});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:a}}};
handlers.updateTrophyCount=function(c,f){var a=0,d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!==d.Statistics.length&&(a=d.Statistics[0].Value);"rStart"==c.val&&(a-=30);0>a&&(a=0);"rWin"==c.val&&(a+=60);if("rLose"==c.val)return{val:a};d=[];d.push({StatisticName:"TrophyCount",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:d});if("rWin"==c.val)return{val:a}};
function upgradeCar(c,f,a,d){for(var e=server.GetCatalogItems({CatalogVersion:"CarCards"}),g=!1,h,b=0;b<f.Inventory.length;b++)if(f.Inventory[b].ItemId==c.carId&&"CarsProgress"==f.Inventory[b].CatalogVersion){g=!0;h=f.Inventory[b];break}for(var k,b=0;b<e.Catalog.length;b++)if(e.Catalog[b].ItemId==c.carId){k=JSON.parse(e.Catalog[b].CustomData);break}if(void 0===k)return generateErrObj("CardNotFoundForCarwithID: "+c.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===g){var l=parseInt(h.CustomData.CarLvl)+1;if(l>=Number(k.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var p=getObjectValueFromLevel(k,"currCostPerLvl",l),b=checkBalance(k.currType,p,a,d);if("OK"!=b)return b;a=getObjectValueFromLevel(k,"cardCostPerLvl",l);h.CustomData.CarLvl=l;for(var g=!1,m,b=0;b<f.Inventory.length;b++)if(f.Inventory[b].ItemId==c.carId&&"CarCards"==f.Inventory[b].CatalogVersion){g=!0;try{if(void 0===f.Inventory[b].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===f.Inventory[b].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(f.Inventory[b].CustomData.Amount)>=a)f.Inventory[b].CustomData.Amount-=a,m={Amount:f.Inventory[b].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.Inventory[b].ItemInstanceId,Data:m});else return generateFailObj("Insufficient cards for real: "+f.Inventory[b].CustomData.Amount+" vs "+a)}catch(w){return generateFailObj("Insufficient cards")}break}if(!1===
g)return generateFailObj("No cards found");f=recalculateCarPr(h.CustomData,h.ItemId,e,void 0);b={CarLvl:l,Pr:f};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemInstanceId,Data:b});var r;0<p&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:k.currType,Amount:p}));c=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:m},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:b}];m={};b={Inventory:c};void 0!=r&&(m[r.VirtualCurrency]=
r.Balance,b.VirtualCurrency=m);b.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+k.rarity,l,!0);return generateInventoryChange("InventoryUpdate",b)}g=!1;for(b=0;b<f.Inventory.length;b++)if(f.Inventory[b].ItemId==c.carId&&"CarCards"==f.Inventory[b].CatalogVersion){g=!0;try{if(void 0===f.Inventory[b].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===f.Inventory[b].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(f.Inventory[b].CustomData.Amount)>=Number(k.cardCostPerLvl[1]))p=f.Inventory[b].ItemInstanceId,f.Inventory[b].CustomData.Amount-=k.cardCostPerLvl[1],m={Amount:f.Inventory[b].CustomData.Amount};else return generateFailObj("Insufficient cards: "+f.Inventory[b].CustomData.Amount+" vs "+k.cardCostPerLvl[1]+".")}catch(w){return generateFailObj("Insufficient cards: "+w)}break}if(0==g)return generateFailObj("No cards found");b=checkBalance(k.currType,k.currCostPerLvl[1],a,d);if("OK"!=b)return b;
h=[];h.push(c.carId);h=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:h});if(!1===h.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:p,Data:m});0<k.currCostPerLvl[1]&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:k.currType,Amount:k.currCostPerLvl[1]}));b={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:b});b={TiresLvl:"0",TurboLvl:"0",PaintId:k.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:b});b={PlatesId:"0",WindshieldId:"0",
Pr:Number(k.basePr)+k.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:b});e=h=!1;for(b=0;b<f.Inventory.length;b++)if("PaintJobs"==f.Inventory[b].ItemId){e=!0;void 0!=f.Inventory[b].CustomData?k.defaultPaintID in f.Inventory[b].CustomData?h=!0:(l={},l[k.defaultPaintID]="Owned"):(l={},l[k.defaultPaintID]="Owned");void 0!=l&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.Inventory[b].ItemInstanceId,
Data:l});break}0==e&&(paintToGive=[],paintToGive.push("PaintJobs"),f=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),l={},l[k.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:l}));b={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:k.defaultPaintID,DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",
Pr:Number(k.basePr)+k.prPerLvl[1]};c=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:m},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:b}];0==h&&(m={},m[k.defaultPaintID]="Owned",c.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:m}));m={};b={Inventory:c};void 0!=r&&(m[r.VirtualCurrency]=r.Balance,b.VirtualCurrency=m);b.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+k.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",b)}
function upgradePart(c,f,a,d){for(var e=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),g=!1,h=0;h<e.Catalog.length;h++)if(e.Catalog[h].ItemId==c.carId){g=!0;break}if(!1===g)return generateErrObj("car with ID: "+c.carId+" not found in catalog.");for(var e=server.GetCatalogItems({CatalogVersion:"PartCards"}),g=!1,b,h=0;h<e.Catalog.length;h++)if(e.Catalog[h].ItemId==c.partId){b=JSON.parse(e.Catalog[h].CustomData);g=!0;break}if(0==g)return generateErrObj("part with ID: "+c.partId+" not found in catalog.");
for(var g=!1,k,h=0;h<f.Inventory.length;h++)if(f.Inventory[h].ItemId==c.carId&&"CarsProgress"==f.Inventory[h].CatalogVersion){g=!0;k=f.Inventory[h];break}if(!1===g)return generateFailObj("car with ID: "+c.carId+" not found in user inventory.");for(var l=!1,g=0,p={},h=0;h<f.Inventory.length;h++)if(f.Inventory[h].ItemId==c.partId&&"PartCards"==f.Inventory[h].CatalogVersion){var l=!0,m={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},
g=parseInt(k.CustomData[m[c.partId]])+1;if(g>=Number(b.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var r=getObjectValueFromLevel(b,"cardCostPerLvl",g),w=getObjectValueFromLevel(b,"currCostPerLvl",g);p[m[c.partId]]=g;k.CustomData[m[c.partId]]=g;var u;a=checkBalance(b.currType,w,a,d);if("OK"!=a)return a;try{if(void 0!==f.Inventory[h].CustomData&&void 0!==f.Inventory[h].CustomData.Amount&&f.Inventory[h].CustomData.Amount>=r)f.Inventory[h].CustomData.Amount-=r,u={Amount:f.Inventory[h].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.Inventory[h].ItemInstanceId,Data:u});else return generateFailObj("Insufficient cards")}catch(v){return generateFailObj("Insufficient cards")}break}if(0==l)return generateFailObj("Part not found");var n;0<w&&(n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.currType,Amount:w}));h=recalculateCarPr(k.CustomData,k.ItemId,void 0,e);p.Pr=h;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:k.ItemInstanceId,Data:p});k={};h={Inventory:[{ItemId:c.partId,CatalogVersion:"PartCards",CustomData:u},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:p}]};void 0!==n&&(k[n.VirtualCurrency]=n.Balance,h.VirtualCurrency=k);h.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+b.rarity,g,!0);return generateInventoryChange("InventoryUpdatePart",h)};
