function checkCarDataValidity(b,g){if(void 0==b.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});for(var d=0,e=0;e<g.Catalog.length;e++)if(g.Catalog[e].ItemId==b.ItemId){var c=
JSON.parse(g.Catalog[e].CustomData),d=parseInt(c.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a})}catch(k){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:d}}return"OK"}function generateFailObj(b){return{Result:"Failed",Message:b}}
function generateErrObj(b){return{Result:"Error",Message:b}}
function CheckMaintenanceAndVersion(b){var g=!1,a="A.0.0.1";void 0!=b&&(g=b.debug,a=b.cVersion);if(void 0==a)return"update";b=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var d=b.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(d=b.Data.MinimumGameVersionActual_IOS);if(void 0==d)return"maintenance";for(var e=!1,d=d.split("."),c=0;3>c;c++){var k=0;a.length>c+1&&(k=Number(a[c+1]));var f=0;d.length>c&&
(f=Number(d[c]));if(k!=f){k<f&&(e=!0);break}}return 1==e?"update":1==g?"OK":b.Data.Maintenance?"false"==b.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(b){return"maintenance"==b?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(b,g){return{Result:"OK",Message:b,InventoryChange:g}}
function publishToLiveFeed(b,g,a){log.debug("0");var d=server.GetTitleData({Keys:["LiveFeedDictionary"]});log.debug("1");if(void 0!=d.Data.LiveFeedDictionary){log.debug("2");var e=JSON.parse(d.Data.LiveFeedDictionary),c=0,d=0,k=g,f=a,h=0,l=0,n={},p=new Date;log.debug("3");n.ts=p.getTime();log.debug("4");try{h=Number(e.MetaData.HealthDecayPerMinute),l=Number(e.MetaData.MaxFeedHistory)}catch(q){log.debug("invalid metadata");return}log.debug("5");try{var c=c+Number(e.ActorData.Base.health),d=d+Number(e.ActorData.Base.damage),
r=server.GetPlayerStatistics({PlayFabId:b,StatisticNames:["IAPValue","Trophies"]}).Statistics,A=Number(GetValueFromStatistics(r,"IAPValue",0)),E=Number(GetValueFromStatistics(r,"Trophies",0)),c=c+Number(e.ActorData.IAPValue.health)*A,d=d+Number(e.ActorData.IAPValue.damage)*A,c=c+Number(e.ActorData.Trophies.health)*E,d=d+Number(e.ActorData.Trophies.damage)*E}catch(q){log.debug("error at liveFeed actor: "+q);return}log.debug("6");try{void 0!=e.ActionsData[g]&&(c+=Number(e.ActionsData[g].health),d+=
Number(e.ActionsData[g].damage),k=e.ActionsData[g].id)}catch(q){log.debug("error at liveFeed action: "+q);return}log.debug("7");try{void 0!=e.DirectObjectData[a]&&(c+=Number(e.DirectObjectData[a].health),d+=Number(e.DirectObjectData[a].damage),f=e.DirectObjectData[a].id)}catch(q){log.debug("error at liveFeed object: "+q);return}log.debug("8");log.debug("9");g=server.GetPlayerCombinedInfo({PlayFabId:b,InfoRequestParameters:{GetUserAccountInfo:!0}});var z;try{z=g.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}catch(q){log.debug("error at liveFeed nameget: "+
q);return}log.debug("10");n.health=c;n.currentHealth=c;n.UserId=b;n.UserName=z;n.Action=k;n.Object=f;b=server.GetTitleInternalData({Keys:["LiveFeed"]});log.debug("11");if(void 0!=b.Data.LiveFeed&&(log.debug("12"),b=JSON.parse(b.Data.LiveFeed),log.debug("liveFeed[0] current health: "+b[0].currentHealth),"OK"==ApplyDamageOverTimeToFeed(b,h))){log.debug("liveFeed[0] current health: "+b[0].currentHealth);var t;try{if(Number(l)<=Number(b.length)){log.debug("13");t=Array(b.length);for(var h=!1,m=0;m<b.length;m++)t[m]=
b[m],1!=h&&b[m].currentHealth<d&&(h=!0,t[m]=n);0==h&&(t[t.length-1]=n)}else for(log.debug("14"),t=Array(b.length+1),t[b.length]=n,m=0;m<b.length;m++)if(t[m]=b[m],log.debug("newFeed["+m+"]: "+t[m]),b[m].currentHealth<d){log.debug("newFeed["+m+"]: "+t[m]);for(t[m]=n;m<b.length;m++)t[m+1]=b[m],log.debug("newFeed["+m+"]: "+t[m]);break}log.debug("newFeed after: "+t)}catch(q){log.debug("found error at feed replace/add: "+q);return}t=JSON.stringify(t);log.debug("newFeed toupdate: "+t);server.SetTitleInternalData({Key:"LiveFeed",
Value:t})}}}function ApplyDamageOverTimeToFeed(b,g){if(void 0==b.length)return"Error";for(var a=(new Date).getTime(),d=0,e=0;e<b.length;e++)try{d=(Number(b[e].ts)-Number(a))*Number(g),d/=6E4,d=Math.floor(d),b[e].currentHealth=Math.max(Number(b[e].Health)-Number(d),0)}catch(c){b.splice(e,1)}return"OK"}
function updateCurrencySpentStatistic(b,g){var a=[],d,e=0,c=Number(g);if(!(isNaN(c)||0>=c)&&("SC"==b&&(d="MoneySpent"),"HC"==b&&(d="GoldSpent"),void 0!=d)){var k=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:[d]});0<k.Statistics.length&&(e=Number(k.Statistics[0].Value));a.push({StatisticName:d,Version:"0",Value:e+c});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a})}}
function checkBalance(b,g,a,d){if("SC"==b){if(a<g)return generateFailObj("NotEnoughSC")}else if(d<g)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(b){var g=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==g.Data.LeagueSubdivisions||void 0==g.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(g.Data.LeagueSubdivisions).leagues,g=JSON.parse(g.Data.SubdivisionTrophyRanges).subdivisions,d=0;d<a.length;d++)if(!(Number(b)>Number(g[a[d]])))return d;return a.length-1}
function recalculateCarPr(b,g,a,d){var e=0,c;c=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<c.Catalog.length;a++)if(c.Catalog[a].ItemId==g){e=JSON.parse(c.Catalog[a].CustomData);e=parseInt(e.basePr)+getObjectValueFromLevel(e,"prPerLvl",b.CarLvl);break}d=void 0===d?server.GetCatalogItems({CatalogVersion:"PartCards"}):d;b={Exhaust:b.ExhaustLvl,Engine:b.EngineLvl,Gearbox:b.GearboxLvl,Suspension:b.SuspensionLvl,Tires:b.TiresLvl,Turbo:b.TurboLvl};for(a=0;a<d.Catalog.length;a++)g=
JSON.parse(d.Catalog[a].CustomData),e+=getObjectValueFromLevel(g,"prPerLvl",Number(b[d.Catalog[a].ItemId]));return e}
function GenerateBlackMarket(b){var g=1,a=server.GetPlayerStatistics({PlayFabId:b,StatisticNames:["League"]});0!=a.Statistics.length&&(g=a.Statistics[0].Value.toString());0>=Number(g)&&(g=1);for(var d=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:b,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),e=JSON.parse(a.Data.BlackMarketRarityBias),c,k=[],f=[],h=[],l=0;l<d.Catalog.length;l++){c=JSON.parse(d.Catalog[l].CustomData);if(void 0==c)return generateErrObj("Part card "+
d.Catalog[l].ItemId+" has no custom data.");0==c.rarity&&k.push(d.Catalog[l].ItemId+"_"+c.BMCurrType+"_"+c.BMbasePrice+"_0_"+c.BMpriceIncrPerBuy);1==c.rarity&&f.push(d.Catalog[l].ItemId+"_"+c.BMCurrType+"_"+c.BMbasePrice+"_0_"+c.BMpriceIncrPerBuy);2==c.rarity&&h.push(d.Catalog[l].ItemId+"_"+c.BMCurrType+"_"+c.BMbasePrice+"_0_"+c.BMpriceIncrPerBuy)}d={};d.BMTime=(new Date).getTime();l=Math.floor(Math.random()*k.length);d.BMItem0=k[l];2<=k.length&&k.splice(l,1);Math.floor(100*Math.random())<Number(e.parts[2])?
k=h:(l=Number(e.parts[0])+Number(e.parts[1]),Math.floor(Math.random()*l)>=Number(e.parts[0])&&(k=f));d.BMItem1=k[Math.floor(Math.random()*k.length)];c=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var n,k=[],f=[],h=[],l=0;l<c.Catalog.length;l++){n=JSON.parse(c.Catalog[l].CustomData);if(void 0==n)return generateErrObj("Car card "+c.Catalog[l].ItemId+" has no custom data.");Number(n.unlockedAtRank)>=Number(g)+1||("0"==n.rarity&&k.push(c.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+
"_0_"+n.BMpriceIncrPerBuy),"1"==n.rarity&&f.push(c.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy),"2"==n.rarity&&h.push(c.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy))}g=Math.floor(Math.random()*k.length);d.BMItem2=k[g];2<=k.length&&k.splice(g,1);0>=f.length&&(0>=h.length?h=f=k:f=h);0>=h.length&&(h=f);Math.floor(100*Math.random())<Number(e.cars[2])?k=h:(l=Number(e.cars[0])+Number(e.cars[1]),Math.floor(Math.random()*l)>=Number(e.cars[0])&&
(k=f));g=Math.floor(Math.random()*k.length);d.BMItem3=k[g];server.UpdateUserInternalData({PlayFabId:b,Data:d});d.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return d}function GetCurrentBlackMarket(b,g){var a={},d=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:b,Keys:e});a.BMTime=60*parseInt(e.Data.BlackMarketResetMinutes)-Math.floor((d.getTime()-g.Data.BMTime.Value)/1E3);for(d=0;4>d;d++)a["BMItem"+d]=g.Data["BMItem"+d].Value;return a}
function GetValueFromStatistics(b,g,a){for(var d,e=0;e<b.length;e++)b[e].StatisticName===g&&(d=b[e]);return void 0===d?void 0!==a?a:0:Number(d.Value)}function GetVersionFromStatistics(b,g,a){for(var d,e=0;e<b.length;e++)b[e].StatisticName===g&&(d=b[e]);return void 0===d?void 0!==a?a:0:Number(d.Version)}function getCatalogItem(b,g){for(var a=server.GetCatalogItems({CatalogVersion:b}),d=0;d<a.Catalog.length;d++)if(a.Catalog[d].ItemId===g)return a.Catalog[d]}
function getObjectValueFromLevel(b,g,a,d){d||(d=0);if(!b[g]||!b[g].length)return d;var e=Number(b[g].length);a>=e&&(a=e-1);return Number(b[g][a])||d}function GiveUserPart(b,g,a,d){GiveUserCard(b,"PartsCards",g,a,d)}function GiveUserCarCard(b,g,a,d){GiveUserCard(b,"CarCards",g,a,d)}
function GiveUserCard(b,g,a,d,e){a=Number(a)<Number(d)?Number(a)+Math.floor(Math.random()*(Number(d)-Number(a))):Number(a);log.debug("cardsAmount: "+a);var c,k;for(d=0;d<e.Inventory.length;d++)if(e.Inventory[d].ItemId==b&&e.Inventory[d].CatalogVersion==g){c=e.Inventory[d].ItemInstanceId;k=void 0==e.Inventory[d].CustomData?a:void 0==e.Inventory[d].CustomData.Amount?a:isNaN(Number(e.Inventory[d].CustomData.Amount))?a:Number(e.Inventory[d].CustomData.Amount)+Number(k);break}if(void 0==c&&(k=a,c=[],c.push(b),
c=server.GrantItemsToUser({CatalogVersion:g,PlayFabId:e.PlayFabId,ItemIds:c}).ItemGrantResults[0].ItemInstanceId,void 0===c))return generateErrObj("grantRequest denied");a={Amount:k};log.debug("new amount is: "+k);server.UpdateUserInventoryItemCustomData({PlayFabId:e.PlayFabId,ItemInstanceId:c,Data:a});return{ItemId:b,CatalogVersion:g,CustomData:a}}
handlers.buyChest=function(b,g){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(b.curr,b.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<b.cost){a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.cost});updateCurrencySpentStatistic(b.curr,b.cost);var d={};d[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",
{VirtualCurrency:d})}return generateInventoryChange("ChestBought",{})};
handlers.claimDailyMission=function(b,g){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a=Number(b.mIdx),d=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==d.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e=JSON.parse(e.Data.DailyMissionData),c=e.missionData[a].split("_"),d=JSON.parse(d.Data.DailyMissionStatus.Value),
k=d.dailyMissionClaimStatus;if(a>=k.length)return generateErrObj("Unlock index is out of bounds of playerData claim mission status array");if(1==k[a])return generateFailObj("Mission already claimed");k[a]=1;d={DailyMissionStatus:JSON.stringify({DailyStatus:d.DailyStatus,dailyMissionClaimStatus:k,timeStamp:d.timeStamp})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});if(a>=e.missionData.length)return generateErrObj("Unlock index is out of bounds of titleData claim mission reward array");
a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c[1],Amount:Number(c[2])});e={};e[a.VirtualCurrency]=a.Balance;return generateInventoryChange("MissionClaimed",{VirtualCurrency:e})};
handlers.endDaily=function(b,g){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==a.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e;tParsed=JSON.parse(d.Data.DailyMissionData);e=Number(tParsed.minutesToRefresh);for(var c=JSON.parse(a.Data.DailyMissionStatus.Value),
a=c.dailyMissionClaimStatus,k,d=-1,f=0;f<tParsed.missionData.length;f++)k=tParsed.missionData[f].split("_"),4>k.length&&generateErrObj("Title data is invalid!"),"OFF"==k[3]&&(a[f]=-1);for(f=0;f<c.dailyMissionClaimStatus.length;f++)if(-1!=a[f]&&0==a[f])return generateErrObj("Not all missions were claimed!");a=[0,0,0,0,0,0,0,0];f=new Date;f.getTime()-Number(c.timeStamp)>6E4*Number(e)?(k=2,f=f.getTime()):(k=0,d=60*Number(e)-Math.floor((f.getTime()-Number(c.timeStamp))/1E3),f=c.timeStamp);f={DailyMissionStatus:JSON.stringify({DailyStatus:k,
dailyMissionClaimStatus:a,timeStamp:f})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:f});e=server.GetUserInventory({PlayFabId:currentPlayerId});for(var h in b.currencyReq)0<b.currencyReq[h]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h,Amount:b.currencyReq[h]});for(h in b.carCardsRequest)if(b.carCardsRequest.hasOwnProperty(h)){c=!1;for(f=0;f<e.Inventory.length;f++)if(e.Inventory[f].ItemId==h&&"CarCards"==e.Inventory[f].CatalogVersion){c=void 0==e.Inventory[f].CustomData?
Number(b.carCardsRequest[h]):void 0==e.Inventory[f].CustomData.Amount?Number(b.carCardsRequest[h]):isNaN(Number(e.Inventory[f].CustomData.Amount))?Number(b.carCardsRequest[h]):Number(e.Inventory[f].CustomData.Amount)+Number(b.carCardsRequest[h]);c={Amount:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[f].ItemInstanceId,Data:c});c=!0;break}0==c&&(f=[h],f=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:f}),c={Amount:b.carCardsRequest[h]},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:c}))}for(h in b.partCardsRequest)if(b.partCardsRequest.hasOwnProperty(h)){c=!1;for(f=0;f<e.Inventory.length;f++)if(e.Inventory[f].ItemId==h&&"PartCards"==e.Inventory[f].CatalogVersion){c=void 0==e.Inventory[f].CustomData?Number(b.partCardsRequest[h]):void 0==e.Inventory[f].CustomData.Amount?Number(b.partCardsRequest[h]):isNaN(Number(e.Inventory[f].CustomData.Amount))?Number(b.partCardsRequest[h]):
Number(e.Inventory[f].CustomData.Amount)+Number(b.partCardsRequest[h]);c={Amount:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[f].ItemInstanceId,Data:c});c=!0;break}0==c&&(f=[h],f=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:f}),c={Amount:b.partCardsRequest[h]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:c}))}return{Result:"OK",
Message:"DailyCompleted",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId}),DailyStatus:{status:k,claimStatus:a,timeRemaining:d}}};
handlers.endGame=function(b,g){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),a=0,e,c=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=c.Statistics.length&&(a=c.Statistics[0].Value,1==b.debug&&log.debug("getting trophy count "+c.Statistics[0].Value));e=a=Number(a);var k=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose",
"trophyWin","LastGameOutcome","LatestStreak"]}),f;f=void 0==k.Data.trophyLose||void 0==k.Data.trophyWin?45:Number(k.Data.trophyLose.Value)+Number(k.Data.trophyWin.Value);var c=0,h="Loss";void 0!=k.Data.LatestStreak&&(c=Number(k.Data.LatestStreak.Value));1==isNaN(c)&&(c=0);void 0!=k.Data.LatestStreak&&(h=k.Data.LastGameOutcome.Value);void 0==h&&(h="Loss");k={quitLastGame:"false",LastGameOutcome:"Loss"};"rWin"==b.outcome&&(a+=f,k.LastGameOutcome="Win","Loss"==h?c=1:c++);k.LatestStreak=c;server.UpdateUserInternalData({PlayFabId:currentPlayerId,
Data:k});f=JSON.parse(b.recordingHeader);var l=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Wins","TotalGamesCompleted","LongestWinStreak","BestDriftScore","HighestLeagueReached"]}).Statistics,h=GetValueFromStatistics(l,"TotalGamesCompleted",0),h=Number(h)+1,k=GetValueFromStatistics(l,"Wins",0);"rWin"==b.outcome&&(k=Number(k)+1);var n=GetValueFromStatistics(l,"LongestWinStreak",0);GetVersionFromStatistics(l,"LongestWinStreak",0);Number(n)<c&&(n=c);var p=GetValueFromStatistics(l,
"BestDriftScore",0);Number(f.Score)>p&&(p=Number(f.Score));c=calculateLeague(a);l=GetValueFromStatistics(l,"HighestLeagueReached",1);c>l&&(l=c);var r=[];r.push({StatisticName:"TrophyCount",Value:a});r.push({StatisticName:"League",Value:c});r.push({StatisticName:"Wins",Value:k});r.push({StatisticName:"TotalGamesCompleted",Value:h});r.push({StatisticName:"LongestWinStreak",Value:n});r.push({StatisticName:"BestDriftScore",Value:p});r.push({StatisticName:"HighestLeagueReached",Value:l});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:r});if(100>=Number(f.Score))return a={TrophyCount:a,League:c},{Result:a};h=JSON.parse(d.Data.SubdivisionTrophyRanges);d=43;for(f=0;f<h.subdivisions.length;f++)if(e<h.subdivisions[f]){d=f;break}e=[];e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecPos",Value:b.recordingPos});e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecRot",Value:b.recordingRot});e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecHeader",Value:b.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e});
e=server.GetTitleInternalData({Key:"RecSubDivision"+d}).Data["RecSubDivision"+d];if(void 0==e)e=[],h={e:b.envIndex,c:b.courseIndex,uId:currentPlayerId},e.push(h);else{e=JSON.parse(e);h={e:b.envIndex,c:b.courseIndex,uId:currentPlayerId};k=!1;for(f=n=0;f<e.length;f++)e[f].uId==currentPlayerId&&n++;if(2<n)return a={TrophyCount:a,League:c},{Result:a};for(f=0;f<e.length;f++)e[f].e==b.envIndex&&e[f].c==b.courseIndex&&(k=!0,e[f]=h);0==k&&e.push(h)}e=JSON.stringify(e);server.SetTitleInternalData({Key:"RecSubDivision"+
d,Value:e});a={TrophyCount:a,League:c};return{Result:a}};
function UpdateExperience(b,g,a,d,e,c){b=JSON.parse(getCatalogItem(b,g).CustomData)[a];g=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;g=g[g.length-1];c=c||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;c=GetValueFromStatistics(c,"Experience",0);if(c>=g)return g;if(isNaN(Number(b)))a=Number(b.length),d>=a&&(d=a-1),d=Number(b[d]);else if(d=Number(b),0===d)return c;c=Math.min(c+d,g);if(!e)return c;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:c}]});return c}
handlers.generateDaily=function(b,g){var a,d=new Date;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var e=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(e.DailyStatus);if(0==a){var d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),c;tParsed=JSON.parse(d.Data.DailyMissionData);c=Number(tParsed.minutesToRefresh);d=new Date;d.getTime()-Number(e.timeStamp)>6E4*Number(c)&&(a=1)}if(1!=a)return generateErrObj("DailyStatus is: "+
a+". Should be 1")}a=2;d=d.getTime();a={DailyMissionStatus:JSON.stringify({DailyStatus:a,dailyMissionClaimStatus:[0,0,0,0,0,0,0,0],timeStamp:d})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK"}};
handlers.getDailyMissionStatus=function(b,g){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d,a=[0,0,0,0,0,0,0,0],e=-1;d=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=d.Data.DailyMissionStatus){var c=JSON.parse(d.Data.DailyMissionStatus.Value);d=Number(c.DailyStatus);var k=a.length;k>c.dailyMissionClaimStatus.length&&(k=c.dailyMissionClaimStatus.length);for(var f=0;f<k;f++)a[f]=c.dailyMissionClaimStatus[f];
0==d&&(k=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),tParsed=JSON.parse(k.Data.DailyMissionData),k=Number(tParsed.minutesToRefresh),f=new Date,f.getTime()-Number(c.timeStamp)>6E4*Number(k)?(d=2,a=[0,0,0,0,0,0,0,0],c=f.getTime(),c={DailyStatus:d,dailyMissionClaimStatus:a,timeStamp:c},c=JSON.stringify(c),c={DailyMissionStatus:c},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c})):e=60*Number(k)-Math.floor((f.getTime()-Number(c.timeStamp))/1E3))}else d=2,
f=new Date,c=f.getTime(),c={DailyStatus:d,dailyMissionClaimStatus:a,timeStamp:c},c=JSON.stringify(c),c={DailyMissionStatus:c},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});return{Result:"OK",Message:" ",DailyStatus:{status:d,claimStatus:a,timeRemaining:e}}};
handlers.getLiveFeed=function(b,g){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetTitleInternalData({Keys:"LiveFeed"});return void 0==a||void 0==a.Data.LiveFeed?generateErrObj("No LivefeedFound"):{Result:"OK",Feed:JSON.parse(a.Data.LiveFeed)}};handlers.getServerTime=function(b,g){return{time:new Date}};
handlers.iapMade=function(b,g){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["IAPValue"]}).Statistics,d=Number(GetValueFromStatistics(a,"IAPValue",0));switch(b.bundle){case "co.tamatem.downshiftdrift.gold01":d+=99;break;case "co.tamatem.downshiftdrift.gold02":d+=499;break;case "co.tamatem.downshiftdrift.gold03":d+=2499;break;case "co.tamatem.downshiftdrift.gold04":d+=2499;break;case "co.tamatem.downshiftdrift.gold05":d+=4999;break;case "co.tamatem.downshiftdrift.gold06":d+=
9999;break;case "co.tamatem.downshiftdrift.bundle01":var d=d+599,e=server.GetUserInventory({PlayFabId:currentPlayerId}),c=server.GetCatalogItems({CatalogVersion:"BMBundleInfo"}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["HighestLeagueReached"]}).Statistics,a=Number(GetValueFromStatistics(a,"HighestLeagueReached",1)),k="bundle01league",k=10>a?k+"0"+a:k+a;1==b.debug&&log.debug("consuming: "+k);for(var f,a=0;a<c.Catalog.length;a++)if(c.Catalog[a].ItemId==k){f=JSON.parse(c.Catalog[a].CustomData);
break}if(void 0==f)return generateErrObj("Catalog item: "+k+" not found");for(a=0;a<e.Inventory.length;a++)if(e.Inventory[a].ItemId==b.bundle){try{server.ConsumeItem({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[a].ItemInstanceId,ConsumeCount:1})}catch(n){return generateErrObj("err: "+n)}var h;h=[];var l={};if(void 0!=f.HCRange){1==b.debug&&log.debug("found HCRange: "+f.HCRange);c=f.HCRange.split(",");if(2<=c.length)c=Number(c[0])<Number(c[1])?Number(c[0])+Math.floor(Math.random()*(Number(c[1])-
Number(c[0]))):Number(c[0]);else return generateErrObj("Catalog data corrupt");0<c&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:c}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.SCRange){1==b.debug&&log.debug("found SCRange: "+f.SCRange);c=f.SCRange.split(",");if(2<=c.length)c=Number(c[0])<Number(c[1])?Number(c[0])+Math.floor(Math.random()*(Number(c[1])-Number(c[0]))):Number(c[0]);else return generateErrObj("Catalog data corrupt");
0<c&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:c}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.Engine)if(1==b.debug&&log.debug("found Engine: "+f.Engine),c=f.Engine.split(","),2<=c.length)c=GiveUserPart("Engine",c[0],c[1],e),h.push(c);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Exhaust)if(1==b.debug&&log.debug("found Exhaust: "+f.Exhaust),c=f.Exhaust.split(","),2<=c.length)c=
GiveUserPart("Exhaust",c[0],c[1],e),h.push(c);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Gearbox)if(1==b.debug&&log.debug("found Gearbox: "+f.Gearbox),c=f.Gearbox.split(","),2<=c.length)c=GiveUserPart("Gearbox",c[0],c[1],e),h.push(c);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Suspension)if(1==b.debug&&log.debug("found Suspension: "+f.Suspension),c=f.Suspension.split(","),2<=c.length)c=GiveUserPart("Suspension",c[0],c[1],e),h.push(c);else return generateErrObj("Catalog data corrupt");
if(void 0!=f.Tires)if(1==b.debug&&log.debug("found Tires: "+f.Tires),c=f.Tires.split(","),2<=c.length)c=GiveUserPart("Tires",c[0],c[1],e),h.push(c);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Turbo)if(1==b.debug&&log.debug("found Turbo: "+f.Turbo),c=f.Turbo.split(","),2<=c.length)c=GiveUserPart("Turbo",c[0],c[1],e),h.push(c);else return generateErrObj("Catalog data corrupt");if(void 0!=f.CarCard&&(1==b.debug&&log.debug("found CarCard: "+f.CarCard),void 0!=f.CarCardAmount))if(1==
b.debug&&log.debug("found CarCardAmount: "+f.CarCardAmount),c=f.CarCardAmount.split(","),2<=c.length)c=GiveUserCarCard(f.CarCard,c[0],c[1],e),h.push(c);else return generateErrObj("Catalog data corrupt");void 0!=f.ChestModel&&1==b.debug&&log.debug("found ChestModel: "+f.ChestModel)}e=[];d={StatisticName:"IAPValue",Value:d};e.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});h={Inventory:h,VirtualCurrency:l};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:h};
default:1==b.debug&&log.debug("InvalidPurchaseParameter")}e=[];d={StatisticName:"IAPValue",Value:d};e.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e})};
handlers.initServerData=function(b){b=[];var g={StatisticName:"TrophyCount",Version:"0",Value:"0"};b.push(g);g={StatisticName:"League",Version:"0",Value:"0"};b.push(g);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var g={0:"Owned"},a=0;a<b.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[a].ItemInstanceId,Data:g});b=[];b.push("FordFocus");b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b});g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:g});g={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:g});g={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:g});g=[];g.push("Engine");g=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:g});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});g={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:g})};
handlers.openChest=function(b,g){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<b.levelUpRewardIndex){var d=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),e={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}):d=a.Data.LastLevelReward.Value;var c=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,k=GetValueFromStatistics(a,"Experience",0);0==k&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var f=c.length,a=0;a<c.length;a++)if(!(k>=c[a])){f=a;break}if(Number(b.levelUpRewardIndex)<=Number(d))return generateFailObj("already got reward for level: "+d);if(Number(b.levelUpRewardIndex)<=Number(f))d=Number(b.levelUpRewardIndex),e.LastLevelReward=d,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:e}),a=""+d,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",PlayFabId:currentPlayerId,ItemIds:a});else return generateFailObj("You haven't reached this level yet")}d=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<b.currCost){if("OK"!=checkBalance(b.currType,b.currCost,d.VirtualCurrency.SC,d.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.currType,
Amount:b.currCost});updateCurrencySpentStatistic(b.currType,b.currCost)}for(var h in b.currencyReq)0<b.currencyReq[h]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h,Amount:b.currencyReq[h]});for(h in b.carCardsRequest)if(b.carCardsRequest.hasOwnProperty(h)){e=!1;for(a=0;a<d.Inventory.length;a++)if(d.Inventory[a].ItemId==h&&"CarCards"==d.Inventory[a].CatalogVersion){e=void 0==d.Inventory[a].CustomData?Number(b.carCardsRequest[h]):void 0==d.Inventory[a].CustomData.Amount?
Number(b.carCardsRequest[h]):isNaN(Number(d.Inventory[a].CustomData.Amount))?Number(b.carCardsRequest[h]):Number(d.Inventory[a].CustomData.Amount)+Number(b.carCardsRequest[h]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[h],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:b.carCardsRequest[h]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}for(h in b.partCardsRequest)if(b.partCardsRequest.hasOwnProperty(h)){e=!1;for(a=0;a<d.Inventory.length;a++)if(d.Inventory[a].ItemId==h&&"PartCards"==d.Inventory[a].CatalogVersion){e=void 0==d.Inventory[a].CustomData?Number(b.partCardsRequest[h]):void 0==d.Inventory[a].CustomData.Amount?Number(b.partCardsRequest[h]):isNaN(Number(d.Inventory[a].CustomData.Amount))?Number(b.partCardsRequest[h]):Number(d.Inventory[a].CustomData.Amount)+Number(b.partCardsRequest[h]);
e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[h],a=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:b.partCardsRequest[h]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}h=server.GetUserInventory({PlayFabId:currentPlayerId});b.chestId&&0>=b.levelUpRewardIndex&&
(d=UpdateExperience("Chests",b.chestId,"xpGain",0,!0),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["ChestsOpened"]}).Statistics,e=Number(GetValueFromStatistics(a,"ChestsOpened",0)),e++,a=[],a.push({StatisticName:"ChestsOpened",Value:e}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}),h.Experience=d);b.chestId&&publishToLiveFeed(currentPlayerId,"unlockedChest",b.chestId);return generateInventoryChange("InventoryUpdated",h)};
handlers.purchaseBMItem=function(b,g){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>b.itemId||3<b.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+b.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),d=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+b.itemId].Value.split("_"),e=d.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var c;c=2>b.itemId?"PartCards":"CarCards";var k=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),e=checkBalance(a[1],k,e,e);if("OK"!=e)return e;for(var f,h,e=0;e<d.Inventory.length;e++)if(d.Inventory[e].ItemId==a[0]&&d.Inventory[e].CatalogVersion==c){f=d.Inventory[e].ItemInstanceId;void 0===d.Inventory[e].CustomData?h={Amount:1}:void 0===d.Inventory[e].CustomData.Amount?h={Amount:1}:(h=Number(d.Inventory[e].CustomData.Amount)+1,isNaN(h)&&(h=1),h={Amount:h});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:f,Data:h});break}void 0===f&&(f=[],f.push(a[0]),f=server.GrantItemsToUser({CatalogVersion:c,PlayFabId:currentPlayerId,ItemIds:f}).ItemGrantResults[0].ItemInstanceId,void 0===f?generateErrObj("grantRequest denied"):(h={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:h})));f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:k});updateCurrencySpentStatistic(a[1],k);k=a[0]+"_"+a[1]+"_"+a[2]+"_"+
(parseInt(a[3])+1)+"_"+a[4];d={};d["BMItem"+b.itemId]=k;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});h=[{ItemId:a[0],CatalogVersion:c,CustomData:h}];c={};c[f.VirtualCurrency]=f.Balance;a=b.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];e={Inventory:h,VirtualCurrency:c};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:e,BMItemChange:a}};
handlers.purchaseItems=function(b,g){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=server.GetUserInventory({PlayFabId:currentPlayerId}),e=d.VirtualCurrency.SC,c=d.VirtualCurrency.HC;switch(b.purchaseType){case "carUpgrade":return upgradeCar(b,d,e,c);case "partUpgrade":return upgradePart(b,d,e,c);case "custPurchase":for(var k=server.GetCatalogItems({CatalogVersion:"Customization"}),f,h=0,a="SC",l=0;l<k.Catalog.length;l++)if(k.Catalog[l].ItemId==b.custId){f=
k.Catalog[l];cardInfo=JSON.parse(k.Catalog[l].CustomData);h=b.custVal+",Cost";a=cardInfo[b.custVal+",Curr"];h=cardInfo[h];c=checkBalance(a,h,e,c);if("OK"!=c)return c;break}if(void 0==f)return generateErrObj("Customization does not exist in catalog.");for(var n,p,l=0;l<d.Inventory.length;l++)if(d.Inventory[l].ItemId==b.custId){n=d.Inventory[l];p=d.Inventory[l].ItemInstanceId;if(void 0!=n.CustomData&&String(b.custVal)in n.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
n){log.info("user doesn't have customization category. Granting ... ");c=[];c.push(b.custId);c=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:c});if(0==c.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");p=c.ItemGrantResults[0].ItemInstanceId}c={};c[String(b.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:p,Data:c});p=[{ItemId:b.custId,
CatalogVersion:"Customization",CustomData:c}];0<h?(c=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:h}),updateCurrencySpentStatistic(a,h),a={},a[c.VirtualCurrency]=c.Balance,l={Inventory:p,VirtualCurrency:a}):l={Inventory:p};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":h=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});p=!1;for(l=a=0;l<h.Catalog.length;l++)if(h.Catalog[l].ItemId==b.packId){a=h.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(h.Catalog[l].CustomData);p=!0;break}if(0==p)return generateErrObj("pack with ID: "+b.packId+" not found in catalog.");if(0>=a)return generateErrObj("pack with ID: "+b.packId+" shouldn't have negative cost.");if(a>c)return generateFailObj("Not enough HC.");c=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:a});updateCurrencySpentStatistic("HC",a);h=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});
a={};a[h.VirtualCurrency]=h.Balance;a[c.VirtualCurrency]=c.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:a});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(b){b=CheckMaintenanceAndVersion(b);return"OK"!=b?generateMaintenanceOrUpdateObj(b):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(b){b=server.GetUserInventory({PlayFabId:currentPlayerId});var g=Number(b.VirtualCurrency.SC);if(isNaN(g)||0>g)g=0;var a=Number(b.VirtualCurrency.HC);if(isNaN(a)||0>a)a=0;var d=[];d.push({StatisticName:"CurrentMoney",Version:"0",Value:g});d.push({StatisticName:"CurrentGold",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:d});for(var g=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),
d=!1,e=0;e<b.Inventory.length;e++)if("CarsProgress"==b.Inventory[e].CatalogVersion){var d=!0,c=checkCarDataValidity(b.Inventory[e],g);if("PlayFabError"==c||void 0===c)return generateErrObj("PlayfabError");"OK"==c?log.debug("Data for "+b.Inventory[e].ItemId+" OK"):b.Inventory[e].CustomData=c;b.Inventory[e].CustomData.Pr=recalculateCarPr(b.Inventory[e].CustomData,b.Inventory[e].ItemId,g,a);c={};c.Pr=b.Inventory[e].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[e].ItemInstanceId,
Data:c})}return!1===d?(b=[],b.push("FordFocus"),b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b}),g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:g}),g={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,
Data:g}),g={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:g}),generateErrObj("UserHasNoCars ... reiniting")):b};
handlers.retrieveBlackMarket=function(b,g){var a=CheckMaintenanceAndVersion(b);if(!0===b.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=[];d.push("BMTime");for(var e=0;4>e;e++)d.push("BMItem"+e);e=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:d});if(void 0===e.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var d=new Date,c=[];c.push("BlackMarketResetMinutes");c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:c});if(!0===b.reset){a="HC";e=200;d=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==d.Data.BlackMarketResetCost&&(e=d.Data.BlackMarketResetCost.split("_"),a=e[0],e=Number(e[1]));if(0<e){d=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,e,d.VirtualCurrency.SC,d.VirtualCurrency.HC))return generateFailObj("not enough money");d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:e});updateCurrencySpentStatistic(a,e);a=GenerateBlackMarket(currentPlayerId);e={};e[d.VirtualCurrency]=d.Balance;e={VirtualCurrency:e};
a.InventoryChange=e;return a}return GenerateBlackMarket(currentPlayerId)}return d.getTime()-parseInt(e.Data.BMTime.Value)>6E4*parseInt(c.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,e),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,e)};
handlers.rewardUsers=function(b,g){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,d=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),e=0;0>=d&&(a=Number(a)/3E3,e=Number(Math.floor(800*a)));d=Number(d)+e;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:d}]});return d};
handlers.startGame=function(b,g){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=server.GetTitleData({Key:"LeagueSubdivisions SubdivisionTrophyRanges TrophyGainRange TrophyLoseRange SubdivisionPrRanges TrophyDifferenceLimit".split(" ")}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TotalGames"]}).Statistics,a=GetValueFromStatistics(a,"TotalGames",0),a=Number(a)+1;1==b.debug&&log.debug("totalGamesStartedIs: "+a);var e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]}),c=0;0!=e.Statistics.length&&(c=e.Statistics[0].Value);for(var c=Number(c),k=JSON.parse(d.Data.SubdivisionTrophyRanges),f=JSON.parse(d.Data.LeagueSubdivisions),h=JSON.parse(d.Data.SubdivisionPrRanges),e=JSON.parse(d.Data.TrophyDifferenceLimit),l=Number(e.trophyReadjustRange),n=Number(e.maxDifference),p=e.subDivisionsToExclude,r=43,A=43,E,z=d.Data.TrophyGainRange.split("_"),t=d.Data.TrophyLoseRange.split("_"),e=Number(z[0]),d=Number(z[1]),z=Number(t[0]),t=Number(t[1]),
m=0;m<k.subdivisions.length;m++)if(c<Number(k.subdivisions[m])){r=m;m<k.subdivisions.length-1&&(A=m+1);break}E=Number(k.subdivisions[A])-Number(k.subdivisions[r]);0>=E&&(E=400);var q=server.GetTitleInternalData({Keys:"RecSubDivision"+r}).Data["RecSubDivision"+r],u=!1;void 0==q&&(u=!0);var B,v,C,I="noop",w="noop",m=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp","quitLastGame"]});v="false;";void 0!=m.Data.quitLastGame&&(v=m.Data.quitLastGame.Value);A=!1;void 0==v&&(v="false");
"true"==v&&(A=!0);if(void 0==m.Data||void 0==m.Data.lastOpp)w=I="noop";else for(v=m.Data.lastOpp.Value.split(","),m=0;m<v.length;m++)0==m&&(I=v[m]),1==m&&(w=v[m]);B=0==u?JSON.parse(q):[];var G=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>B.length&&(u=!0);var H=Array(B.length),D=0,q=Array(B.length);v=0;C=Array(B.length);for(var F=0,m=0;m<B.length;m++)1==u&&(G[5*Number(B[m].e)+Number(B[m].c)]=1),B[m].uId!=currentPlayerId&&(H[D]=B[m],D++,B[m].uId!=I&&(q[v]=B[m],v++,B[m].uId!=w&&(C[F]=B[m],F++)));if(1==u){u=[];
for(m=0;m<G.length;m++)0==G[m]&&u.push(m);u=u[Math.floor(Math.random()*u.length)];m=Math.floor(u/5);u%=5;w=server.GetTitleData({Keys:"MasterUser"});if(void 0!=w.Data.MasterUser&&(w=server.GetUserReadOnlyData({PlayFabId:w.Data.MasterUser,Keys:[m+"_"+u+"_RecPos",m+"_"+u+"_RecRot",m+"_"+u+"_RecHeader"]}),void 0!=w.Data&&void 0!=w.Data[m+"_"+u+"_RecPos"]&&void 0!=w.Data[m+"_"+u+"_RecRot"]&&void 0!=w.Data[m+"_"+u+"_RecHeader"])){f=!0;0==c?(c=d,f=!1):c-=z;1>=c&&(c=1);var x=[],c={StatisticName:"TrophyCount",
Version:"0",Value:c};x.push(c);c={StatisticName:"League",Version:"0",Value:y};x.push(c);c={StatisticName:"TotalGames",Version:"0",Value:a};x.push(c);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:x});a={trophyWin:Math.floor((Number(d)+Number(e))/2),trophyLose:Math.floor((Number(t)+Number(z))/2),quitLastGame:"true"};0==f&&(a.trophyWin=0,a.trophyLose=0);1==A&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:"TheStig",
PosData:w.Data[m+"_"+u+"_RecPos"].Value,RotData:w.Data[m+"_"+u+"_RecRot"].Value,HeaderData:w.Data[m+"_"+u+"_RecHeader"].Value,TrophyLose:z,TrophyWin:d,Opp:"TheStig"}}}if(0==D)return generateErrObj("no valid recording found for this subdivision");y=H;0<v&&(D=v,y=q);0<F&&(D=F,y=C);q=Math.floor(Math.random()*D);q>=D&&(q=D-1);v=Math.min(D,3);C=Array(v);for(m=0;m<v;m++)C[m]=0>=q?y[m]:q>=D-1?y[D-1-m]:y[q-Math.floor(v/2)+m];y=Math.floor(Math.random()*v);v=C[y].uId;q=C[y].e;C=C[y].c;F=server.GetUserReadOnlyData({PlayFabId:v,
Keys:[q+"_"+C+"_RecPos",q+"_"+C+"_RecRot",q+"_"+C+"_RecHeader"]});if(void 0==F)return generateErrObj("Did not find recording for this user: "+v);var D=server.GetPlayerCombinedInfo({PlayFabId:v,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),u=c,y=Number(calculateLeague(c)),H="UserGenerated",w=0<y?Number(k.subdivisions[f.leagues[y-
1]]):0,G=y>=f.leagues.length-1?2*w:Number(k.subdivisions[f.leagues[y]]);1==b.debug&&log.debug("I bet it will crash after this");k=JSON.parse(F.Data[q+"_"+C+"_RecHeader"].Value);1==b.debug&&log.debug("or not");void 0!=k&&(x=k.Trophies);x=Number(x);B=!0;1==b.debug&&log.debug("Adjusting trophies");if(void 0!=p)for(1==b.debug&&log.debug("excludedSubdivisionsFromTrophyAdjustment: "+p),m=0;m<p.length;m++)if(r==Number(p[m])){1==b.debug&&log.debug("in excluded subdivision: "+r);B=!1;break}1==B&&Number(Math.abs(u-
x))>=n&&(1==b.debug&&log.debug("generating new trophies. Reason: user trophies: "+u+" vs opponent trophies: "+x),x=u-l+Math.floor(Math.random()*l*2),k.Trophies=x,1==b.debug&&log.debug("performing stringify on recordingData header"),F.Data[q+"_"+C+"_RecHeader"].Value=JSON.stringify(k));0>=G-w?(l=t,n=e):Number(Math.abs(u-x))>Number(E)?(l=Math.floor((z+t)/2)-1+Math.floor(3*Math.random()),n=Math.floor((d+e)/2)-1+Math.floor(3*Math.random())):(l=z+Math.floor((t-z)/2*((u-x)/(G-w)+1)),n=e+Math.floor((d-e)/
2*((x-u)/(G-w)+1)));1==b.debug&&log.debug("Opponent's PR is TOO DAMN HIGH! "+k.Pr+" vs "+Number(h.subdivisions[Number(f.leagues[y-1])+1])+". You are in subdivision: "+Number(f.leagues[y-1]+1));k.Pr>Number(h.subdivisions[Number(f.leagues[y-1])+1])&&(l=Math.floor((z+t)/2)-1+Math.floor(3*Math.random()),n=Math.floor((d+e)/2)-1+Math.floor(3*Math.random()),H="MobyDick");e=!0;0==c?(e=!1,c=d):(c-=Number(l),1>=c&&(c=1));x=[];c={StatisticName:"TrophyCount",Version:"0",Value:c};x.push(c);c={StatisticName:"League",
Version:"0",Value:y};x.push(c);c={StatisticName:"TotalGames",Version:"0",Value:a};x.push(c);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:x});a={trophyWin:n,trophyLose:l,lastOpp:v+","+I,quitLastGame:"true"};0==e&&(a.trophyWin=0,a.trophyLose=0);1==A&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:H,PosData:F.Data[q+"_"+C+"_RecPos"].Value,RotData:F.Data[q+"_"+C+"_RecRot"].Value,HeaderData:F.Data[q+"_"+C+"_RecHeader"].Value,
TrophyLose:l,TrophyWin:n,Opp:D.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(b,g){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var d=server.GetUserInventory({PlayFabId:currentPlayerId}),e=[],c="-1",k={},f={PaintJobs:{itemOwned:"no",itemCustData:b.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:b.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:b.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:b.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:b.wsId,carItemId:"WindshieldId"}},a=0;a<d.Inventory.length;a++)d.Inventory[a].ItemId==b.carId&&"CarsProgress"==d.Inventory[a].CatalogVersion&&(c=d.Inventory[a].ItemInstanceId),d.Inventory[a].ItemId in f&&(f[d.Inventory[a].ItemId].itemOwned="yes",f[d.Inventory[a].ItemId].itemCustData in d.Inventory[a].CustomData?k[f[d.Inventory[a].ItemId].carItemId]=f[d.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+d.Inventory[a].ItemId+" "+f[d.Inventory[a].ItemId].itemCustData));if("-1"==
c)return generateFailObj("User does not own car with id: "+b.carId);for(var h in f)f.hasOwnProperty(h)&&"no"==f[h].itemOwned&&e.push(h);if(k=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c,Data:k});h=[{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:k}];if(0<e.length)for(e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e}),d={0:"Owned"},
a=0;a<e.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[a].ItemInstanceId,Data:d});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:h}}};
function upgradeCar(b,g,a,d){for(var e=server.GetCatalogItems({CatalogVersion:"CarCards"}),c=!1,k,f=0;f<g.Inventory.length;f++)if(g.Inventory[f].ItemId==b.carId&&"CarsProgress"==g.Inventory[f].CatalogVersion){c=!0;k=g.Inventory[f];break}for(var h,f=0;f<e.Catalog.length;f++)if(e.Catalog[f].ItemId==b.carId){h=JSON.parse(e.Catalog[f].CustomData);break}if(void 0===h)return generateErrObj("CardNotFoundForCarwithID: "+b.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===c){var l=parseInt(k.CustomData.CarLvl)+1;if(l>=Number(h.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var n=getObjectValueFromLevel(h,"currCostPerLvl",l),f=checkBalance(h.currType,n,a,d);if("OK"!=f)return f;a=getObjectValueFromLevel(h,"cardCostPerLvl",l);k.CustomData.CarLvl=l;for(var c=!1,p,f=0;f<g.Inventory.length;f++)if(g.Inventory[f].ItemId==b.carId&&"CarCards"==g.Inventory[f].CatalogVersion){c=!0;try{if(void 0===g.Inventory[f].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===g.Inventory[f].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(g.Inventory[f].CustomData.Amount)>=a)g.Inventory[f].CustomData.Amount-=a,p={Amount:g.Inventory[f].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.Inventory[f].ItemInstanceId,Data:p});else return generateFailObj("Insufficient cards for real: "+g.Inventory[f].CustomData.Amount+" vs "+a)}catch(A){return generateFailObj("Insufficient cards")}break}if(!1===
c)return generateFailObj("No cards found");g=recalculateCarPr(k.CustomData,k.ItemId,e,void 0);f={CarLvl:l,Pr:g};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemInstanceId,Data:f});var r;0<n&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h.currType,Amount:n}),updateCurrencySpentStatistic(h.currType,n));b=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:f}];p=
{};f={Inventory:b};void 0!=r&&(p[r.VirtualCurrency]=r.Balance,f.VirtualCurrency=p);f.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+h.rarity,l,!0);return generateInventoryChange("InventoryUpdate",f)}c=!1;for(f=0;f<g.Inventory.length;f++)if(g.Inventory[f].ItemId==b.carId&&"CarCards"==g.Inventory[f].CatalogVersion){c=!0;try{if(void 0===g.Inventory[f].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===g.Inventory[f].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(g.Inventory[f].CustomData.Amount)>=Number(h.cardCostPerLvl[1]))n=g.Inventory[f].ItemInstanceId,g.Inventory[f].CustomData.Amount-=h.cardCostPerLvl[1],p={Amount:g.Inventory[f].CustomData.Amount};else return generateFailObj("Insufficient cards: "+g.Inventory[f].CustomData.Amount+" vs "+h.cardCostPerLvl[1]+".")}catch(A){return generateFailObj("Insufficient cards: "+A)}break}if(0==c)return generateFailObj("No cards found");f=checkBalance(h.currType,h.currCostPerLvl[1],a,d);if("OK"!=f)return f;
k=[];k.push(b.carId);k=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:k});if(!1===k.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:n,Data:p});0<h.currCostPerLvl[1]&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:h.currType,Amount:h.currCostPerLvl[1]}),updateCurrencySpentStatistic(h.currType,h.currCostPerLvl[1]));f={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:f});f={TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,
Data:f});f={PlatesId:"0",WindshieldId:"0",Pr:Number(h.basePr)+h.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:f});e=k=!1;for(f=0;f<g.Inventory.length;f++)if("PaintJobs"==g.Inventory[f].ItemId){e=!0;void 0!=g.Inventory[f].CustomData?h.defaultPaintID in g.Inventory[f].CustomData?k=!0:(l={},l[h.defaultPaintID]="Owned"):(l={},l[h.defaultPaintID]="Owned");void 0!=l&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:g.Inventory[f].ItemInstanceId,Data:l});break}0==e&&(paintToGive=[],paintToGive.push("PaintJobs"),g=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),l={},l[h.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:l}));f={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,
DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:Number(h.basePr)+h.prPerLvl[1]};b=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:f}];0==k&&(p={},p[h.defaultPaintID]="Owned",b.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:p}));p={};f={Inventory:b};void 0!=r&&(p[r.VirtualCurrency]=r.Balance,f.VirtualCurrency=p);f.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+h.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",
f)}
function upgradePart(b,g,a,d){for(var e=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),c=!1,k=0;k<e.Catalog.length;k++)if(e.Catalog[k].ItemId==b.carId){c=!0;break}if(!1===c)return generateErrObj("car with ID: "+b.carId+" not found in catalog.");for(var e=server.GetCatalogItems({CatalogVersion:"PartCards"}),c=!1,f,k=0;k<e.Catalog.length;k++)if(e.Catalog[k].ItemId==b.partId){f=JSON.parse(e.Catalog[k].CustomData);c=!0;break}if(0==c)return generateErrObj("part with ID: "+b.partId+" not found in catalog.");for(var c=
!1,h,k=0;k<g.Inventory.length;k++)if(g.Inventory[k].ItemId==b.carId&&"CarsProgress"==g.Inventory[k].CatalogVersion){c=!0;h=g.Inventory[k];break}if(!1===c)return generateFailObj("car with ID: "+b.carId+" not found in user inventory.");for(var l=!1,c=0,n={},k=0;k<g.Inventory.length;k++)if(g.Inventory[k].ItemId==b.partId&&"PartCards"==g.Inventory[k].CatalogVersion){var l=!0,p={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},c=
parseInt(h.CustomData[p[b.partId]])+1;if(c>=Number(f.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var r=getObjectValueFromLevel(f,"cardCostPerLvl",c),A=getObjectValueFromLevel(f,"currCostPerLvl",c);n[p[b.partId]]=c;h.CustomData[p[b.partId]]=c;var E;a=checkBalance(f.currType,A,a,d);if("OK"!=a)return a;try{if(void 0!==g.Inventory[k].CustomData&&void 0!==g.Inventory[k].CustomData.Amount&&g.Inventory[k].CustomData.Amount>=r)g.Inventory[k].CustomData.Amount-=r,E={Amount:g.Inventory[k].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.Inventory[k].ItemInstanceId,Data:E});else return generateFailObj("Insufficient cards")}catch(t){return generateFailObj("Insufficient cards")}break}if(0==l)return generateFailObj("Part not found");var z;0<A&&(z=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:f.currType,Amount:A}),updateCurrencySpentStatistic(f.currType,A));k=recalculateCarPr(h.CustomData,h.ItemId,void 0,e);n.Pr=k;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:h.ItemInstanceId,Data:n});h={};k={Inventory:[{ItemId:b.partId,CatalogVersion:"PartCards",CustomData:E},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:n}]};void 0!==z&&(h[z.VirtualCurrency]=z.Balance,k.VirtualCurrency=h);k.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+f.rarity,c,!0);return generateInventoryChange("InventoryUpdatePart",k)};
