function checkCarDataValidity(c,k){if(void 0==c.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});for(var b=0,f=0;f<k.Catalog.length;f++)if(k.Catalog[f].ItemId==c.ItemId){var e=
JSON.parse(k.Catalog[f].CustomData),b=parseInt(e.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:b};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a})}catch(h){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:b}}return"OK"}function generateFailObj(c){return{Result:"Failed",Message:c}}
function generateErrObj(c){return{Result:"Error",Message:c}}
function CheckMaintenanceAndVersion(c){var k=!1,a="A.0.0.1";void 0!=c&&(k=c.debug,a=c.cVersion);if(void 0==a)return"update";c=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var b=c.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(b=c.Data.MinimumGameVersionActual_IOS);if(void 0==b)return"maintenance";for(var f=!1,b=b.split("."),e=0;3>e;e++){var h=0;a.length>e+1&&(h=Number(a[e+1]));var d=0;b.length>e&&
(d=Number(b[e]));if(h<d){f=!0;break}}return 1==f?"update":1==k?"OK":c.Data.Maintenance?"false"==c.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(c){return"maintenance"==c?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(c,k){return{Result:"OK",Message:c,InventoryChange:k}}
function updateCurrencySpentStatistic(c,k){var a=[],b,f=0,e=Number(k);if(!(isNaN(e)||0>=e)&&("SC"==c&&(b="MoneySpent"),"HC"==c&&(b="GoldSpent"),void 0!=b)){var h=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:[b]});0<h.Statistics.length&&(f=Number(h.Statistics[0].Value));a.push({StatisticName:b,Version:"0",Value:f+e});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a})}}
function checkBalance(c,k,a,b){if("SC"==c){if(a<k)return generateFailObj("NotEnoughSC")}else if(b<k)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(c){var k=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==k.Data.LeagueSubdivisions||void 0==k.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(k.Data.LeagueSubdivisions).leagues,k=JSON.parse(k.Data.SubdivisionTrophyRanges).subdivisions,b=0;b<a.length;b++)if(!(Number(c)>Number(k[a[b]])))return b;return a.length-1}
function recalculateCarPr(c,k,a,b){var f=0,e;e=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<e.Catalog.length;a++)if(e.Catalog[a].ItemId==k){f=JSON.parse(e.Catalog[a].CustomData);f=parseInt(f.basePr)+getObjectValueFromLevel(f,"prPerLvl",c.CarLvl);break}b=void 0===b?server.GetCatalogItems({CatalogVersion:"PartCards"}):b;c={Exhaust:c.ExhaustLvl,Engine:c.EngineLvl,Gearbox:c.GearboxLvl,Suspension:c.SuspensionLvl,Tires:c.TiresLvl,Turbo:c.TurboLvl};for(a=0;a<b.Catalog.length;a++)k=
JSON.parse(b.Catalog[a].CustomData),f+=getObjectValueFromLevel(k,"prPerLvl",Number(c[b.Catalog[a].ItemId]));return f}
function GenerateBlackMarket(c){var k=1,a=server.GetPlayerStatistics({PlayFabId:c,StatisticNames:["League"]});0!=a.Statistics.length&&(k=a.Statistics[0].Value.toString());0>=Number(k)&&(k=1);for(var b=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:c,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),f=JSON.parse(a.Data.BlackMarketRarityBias),e,h=[],d=[],g=[],l=0;l<b.Catalog.length;l++){e=JSON.parse(b.Catalog[l].CustomData);if(void 0==e)return generateErrObj("Part card "+
b.Catalog[l].ItemId+" has no custom data.");0==e.rarity&&h.push(b.Catalog[l].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy);1==e.rarity&&d.push(b.Catalog[l].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy);2==e.rarity&&g.push(b.Catalog[l].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy)}b={};b.BMTime=(new Date).getTime();l=Math.floor(Math.random()*h.length);b.BMItem0=h[l];2<=h.length&&h.splice(l,1);Math.floor(100*Math.random())<Number(f.parts[2])?
h=g:(l=Number(f.parts[0])+Number(f.parts[1]),Math.floor(Math.random()*l)>=Number(f.parts[0])&&(h=d));b.BMItem1=h[Math.floor(Math.random()*h.length)];e=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var m,h=[],d=[],g=[],l=0;l<e.Catalog.length;l++){m=JSON.parse(e.Catalog[l].CustomData);if(void 0==m)return generateErrObj("Car card "+e.Catalog[l].ItemId+" has no custom data.");Number(m.unlockedAtRank)>=Number(k)+1||("0"==m.rarity&&h.push(e.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+
"_0_"+m.BMpriceIncrPerBuy),"1"==m.rarity&&d.push(e.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy),"2"==m.rarity&&g.push(e.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy))}k=Math.floor(Math.random()*h.length);b.BMItem2=h[k];2<=h.length&&h.splice(k,1);0>=d.length&&(0>=g.length?g=d=h:d=g);0>=g.length&&(g=d);Math.floor(100*Math.random())<Number(f.cars[2])?h=g:(l=Number(f.cars[0])+Number(f.cars[1]),Math.floor(Math.random()*l)>=Number(f.cars[0])&&
(h=d));k=Math.floor(Math.random()*h.length);b.BMItem3=h[k];server.UpdateUserInternalData({PlayFabId:c,Data:b});b.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return b}function GetCurrentBlackMarket(c,k){var a={},b=new Date,f=[];f.push("BlackMarketResetMinutes");f=server.GetTitleData({PlayFabId:c,Keys:f});a.BMTime=60*parseInt(f.Data.BlackMarketResetMinutes)-Math.floor((b.getTime()-k.Data.BMTime.Value)/1E3);for(b=0;4>b;b++)a["BMItem"+b]=k.Data["BMItem"+b].Value;return a}
function GetValueFromStatistics(c,k,a){for(var b,f=0;f<c.length;f++)c[f].StatisticName===k&&(b=c[f]);log.debug("Stat with name statisticsName: "+k+" is "+b);return void 0===b?void 0!==a?a:0:Number(b.Value)}function getCatalogItem(c,k){for(var a=server.GetCatalogItems({CatalogVersion:c}),b=0;b<a.Catalog.length;b++)if(a.Catalog[b].ItemId===k)return a.Catalog[b]}
function getObjectValueFromLevel(c,k,a,b){b||(b=0);if(!c[k]||!c[k].length)return b;var f=Number(c[k].length);a>=f&&(a=f-1);return Number(c[k][a])||b}
handlers.buyChest=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(c.curr,c.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<c.cost){a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.curr,Amount:c.cost});updateCurrencySpentStatistic(c.curr,c.cost);var b={};b[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",
{VirtualCurrency:b})}return generateInventoryChange("ChestBought",{})};
handlers.claimDailyMission=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a=Number(c.mIdx),b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==b.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var b=JSON.parse(b.Data.DailyMissionStatus.Value),f=b.dailyMissionClaimStatus;if(a>=f.length)return generateErrObj("Unlock index is out of bounds of playerData claim mission status array");if(1==
f[a])return generateFailObj("Mission already claimed");f[a]=1;b={DailyMissionStatus:JSON.stringify({DailyStatus:b.DailyStatus,dailyMissionClaimStatus:f,timeStamp:b.timeStamp})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});b=JSON.parse(b.Data.DailyMissionData);if(a>=b.missionData.length)return generateErrObj("Unlock index is out of bounds of titleData claim mission reward array");a=b.missionData[a].split("_");
a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:Number(a[2])});b={};b[a.VirtualCurrency]=a.Balance;return generateInventoryChange("MissionClaimed",{VirtualCurrency:b})};
handlers.endDaily=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==a.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");for(var b=JSON.parse(a.Data.DailyMissionStatus.Value),a=b.dailyMissionClaimStatus,f,e=-1,h=0;h<b.dailyMissionClaimStatus.length;h++)if(0==a[h])return generateErrObj("Not all missions were claimed!");
a=[0,0,0,0,0,0,0,0];f=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});tParsed=JSON.parse(f.Data.DailyMissionData);var h=Number(tParsed.minutesToRefresh),d=new Date;d.getTime()-Number(b.timeStamp)>6E4*Number(h)?(f=2,b=d.getTime()):(f=0,e=60*Number(h)-Math.floor((d.getTime()-Number(b.timeStamp))/1E3),b=b.timeStamp);b={DailyMissionStatus:JSON.stringify({DailyStatus:f,dailyMissionClaimStatus:a,timeStamp:b})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});
var b=server.GetUserInventory({PlayFabId:currentPlayerId}),g;for(g in c.currencyReq)0<c.currencyReq[g]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g,Amount:c.currencyReq[g]});for(g in c.carCardsRequest)if(c.carCardsRequest.hasOwnProperty(g)){d=!1;for(h=0;h<b.Inventory.length;h++)if(b.Inventory[h].ItemId==g&&"CarCards"==b.Inventory[h].CatalogVersion){d=void 0==b.Inventory[h].CustomData?Number(c.carCardsRequest[g]):void 0==b.Inventory[h].CustomData.Amount?Number(c.carCardsRequest[g]):
isNaN(Number(b.Inventory[h].CustomData.Amount))?Number(c.carCardsRequest[g]):Number(b.Inventory[h].CustomData.Amount)+Number(c.carCardsRequest[g]);d={Amount:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[h].ItemInstanceId,Data:d});d=!0;break}0==d&&(h=[g],h=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:h}),d={Amount:c.carCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,
Data:d}))}for(g in c.partCardsRequest)if(c.partCardsRequest.hasOwnProperty(g)){d=!1;for(h=0;h<b.Inventory.length;h++)if(b.Inventory[h].ItemId==g&&"PartCards"==b.Inventory[h].CatalogVersion){d=void 0==b.Inventory[h].CustomData?Number(c.partCardsRequest[g]):void 0==b.Inventory[h].CustomData.Amount?Number(c.partCardsRequest[g]):isNaN(Number(b.Inventory[h].CustomData.Amount))?Number(c.partCardsRequest[g]):Number(b.Inventory[h].CustomData.Amount)+Number(c.partCardsRequest[g]);d={Amount:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.Inventory[h].ItemInstanceId,Data:d});d=!0;break}0==d&&(h=[g],h=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:h}),d={Amount:c.partCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:d}))}return{Result:"OK",Message:"DailyCompleted",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId}),DailyStatus:{status:f,claimStatus:a,timeRemaining:e}}};
handlers.endGame=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b="01",f,e="0";"rWin"==c.outcome&&(e="1");a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=a.Statistics.length&&(f=a.Statistics[0].Value.toString(),b=Number(f).toString(2));var a=0,h;h=Array(b.length);for(var d=0;d<h.length-1;d++)h[d]=b[d];h[h.length-1]=e;b=h;h=b.length;for(var g=e=0,d=1;d<b.length;d++)"1"==b[d]?(a++,g++):(g>e&&(e=g),g=0);
h=Math.round(a/h*100);var l=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),a=0,d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=d.Statistics.length&&(a=d.Statistics[0].Value,log.debug("getting trophy count "+d.Statistics[0].Value));g=a=Number(a);d=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose","trophyWin"]});d=void 0==d.Data.trophyLose||void 0==d.Data.trophyWin?45:Number(d.Data.trophyLose.Value)+Number(d.Data.trophyWin.Value);
"rWin"==c.outcome&&(a+=d);var m=JSON.parse(c.recordingHeader),d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Wins","TotalGamesCompleted","LongestWinStreak","BestDriftScore"]}).Statistics,p=GetValueFromStatistics(d,"TotalGamesCompleted",0),p=Number(p)+1,r=GetValueFromStatistics(d,"Wins",0);"rWin"==c.outcome&&(r=Number(r)+1);var u=GetValueFromStatistics(d,"LongestWinStreak",0);e>u&&(u=e);var D=GetValueFromStatistics(d,"BestDriftScore",0);Number(m.Score)>D&&(D=Number(m.Score));
e=calculateLeague(a);for(d=f=0;d<b.length;d++)"1"==b[d]&&(f+=Math.pow(2,d));d=[];d.push({StatisticName:"WinLoss",Version:"0",Value:f});b={StatisticName:"TrophyCount",Version:"0",Value:a};d.push(b);b={StatisticName:"League",Version:"0",Value:e};d.push(b);b={StatisticName:"Wins",Version:"0",Value:r};d.push(b);b={StatisticName:"TotalGamesCompleted",Version:"0",Value:p};d.push(b);b={StatisticName:"LongestWinStreak",Version:"0",Value:u};d.push(b);b={StatisticName:"BestDriftScore",Version:"0",Value:D};
d.push(b);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:d});if(10>=Number(m.Score))return a={TrophyCount:a,League:e},{Result:a};l=JSON.parse(l.Data.SubdivisionTrophyRanges);b=43;for(d=0;d<l.subdivisions.length;d++)if(g<l.subdivisions[d]){b=d;break}d=[];d.push({Key:c.envIndex+"_"+c.courseIndex+"_RecPos",Value:c.recordingPos});d.push({Key:c.envIndex+"_"+c.courseIndex+"_RecRot",Value:c.recordingRot});d.push({Key:c.envIndex+"_"+c.courseIndex+"_RecHeader",Value:c.recordingHeader});
server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:d});d=server.GetTitleInternalData({Key:"RecSubDivision"+b}).Data["RecSubDivision"+b];if(void 0==d)g=[],h={wl:h,e:c.envIndex,c:c.courseIndex,uId:currentPlayerId},g.push(h);else{g=JSON.parse(d);h={wl:h,e:c.envIndex,c:c.courseIndex,uId:currentPlayerId};l=!1;for(d=m=0;d<g.length;d++)g[d].uId==currentPlayerId&&m++;if(2<m)return a={TrophyCount:a,League:e},{Result:a};for(d=0;d<g.length;d++)if(g[d].e==c.envIndex&&g[d].c==c.courseIndex){l=!0;g[d]=
h;if(1==g.length)break;if(0<d)if(g[d].wl>g[d-1].wl){if(d==g.length-1)break;for(m=d+1;m<g.length;m++)if(g[m-1].wl>g[m].wl)p=g[m],g[m]=g[m-1],g[m-1]=p;else break}else for(m=d-1;0<=m;m--)if(g[m+1].wl<g[m].wl)p=g[m],g[m]=g[m+1],g[m+1]=p;else break;else for(m=d+1;m<g.length;m++)if(g[m-1].wl>g[m].wl)p=g[m],g[m]=g[m-1],g[m-1]=p;else break}0==l&&g.push(h)}d=JSON.stringify(g);server.SetTitleInternalData({Key:"RecSubDivision"+b,Value:d});a={TrophyCount:a,League:e};return{Result:a}};
function UpdateExperience(c,k,a,b,f,e){c=JSON.parse(getCatalogItem(c,k).CustomData)[a];k=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;k=k[k.length-1];e=e||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;e=GetValueFromStatistics(e,"Experience",0);if(e>=k)return k;if(isNaN(Number(c)))a=Number(c.length),b>=a&&(b=a-1),b=Number(c[b]);else if(b=Number(c),0===b)return e;e=Math.min(e+b,k);if(!f)return e;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:e}]});return e}
handlers.generateDaily=function(c,k){var a,b=new Date;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var f=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(f.DailyStatus);if(0==a){var b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e;tParsed=JSON.parse(b.Data.DailyMissionData);e=Number(tParsed.minutesToRefresh);b=new Date;b.getTime()-Number(f.timeStamp)>6E4*Number(e)&&(a=1)}if(1!=a)return generateErrObj("DailyStatus is: "+
a+". Should be 1")}a=2;b=b.getTime();a={DailyMissionStatus:JSON.stringify({DailyStatus:a,dailyMissionClaimStatus:[0,0,0,0,0,0,0,0],timeStamp:b})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK"}};
handlers.getDailyMissionStatus=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b,a=[0,0,0,0,0,0,0,0],f=-1;b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=b.Data.DailyMissionStatus){var e=JSON.parse(b.Data.DailyMissionStatus.Value);b=Number(e.DailyStatus);var h=a.length;h>e.dailyMissionClaimStatus.length&&(h=e.dailyMissionClaimStatus.length);for(var d=0;d<h;d++)a[d]=e.dailyMissionClaimStatus[d];
0==b&&(h=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),tParsed=JSON.parse(h.Data.DailyMissionData),h=Number(tParsed.minutesToRefresh),d=new Date,d.getTime()-Number(e.timeStamp)>6E4*Number(h)?(b=2,a=[0,0,0,0,0,0,0,0],e=d.getTime(),e={DailyStatus:b,dailyMissionClaimStatus:a,timeStamp:e},e=JSON.stringify(e),e={DailyMissionStatus:e},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:e})):f=60*Number(h)-Math.floor((d.getTime()-Number(e.timeStamp))/1E3))}else b=2,
d=new Date,e=d.getTime(),e={DailyStatus:b,dailyMissionClaimStatus:a,timeStamp:e},e=JSON.stringify(e),e={DailyMissionStatus:e},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:e});return{Result:"OK",Message:" ",DailyStatus:{status:b,claimStatus:a,timeRemaining:f}}};handlers.getServerTime=function(c,k){return{time:new Date}};handlers.iapMade=function(c,k){};
handlers.initServerData=function(c){c=[];var k={StatisticName:"TrophyCount",Version:"0",Value:"0"};c.push(k);k={StatisticName:"League",Version:"0",Value:"0"};c.push(k);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});c=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var k={0:"Owned"},a=0;a<c.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[a].ItemInstanceId,Data:k});c=[];c.push("FordFocus");c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c});k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k});k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k});k={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k});k=[];k.push("Engine");k=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});k={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k})};
handlers.openChest=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<c.levelUpRewardIndex){var b=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),f={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:f}):b=a.Data.LastLevelReward.Value;var e=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,h=GetValueFromStatistics(a,"Experience",0);0==h&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var d=e.length,a=0;a<e.length;a++)if(!(h>=e[a])){d=a;break}if(Number(c.levelUpRewardIndex)<=Number(d))b=Number(c.levelUpRewardIndex),f.LastLevelReward=b,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:f}),a=""+b,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",
PlayFabId:currentPlayerId,ItemIds:a});else return generateFailObj("already got reward for level: "+b)}b=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<c.currCost){if("OK"!=checkBalance(c.currType,c.currCost,b.VirtualCurrency.SC,b.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.currType,Amount:c.currCost});updateCurrencySpentStatistic(c.currType,c.currCost)}for(var g in c.currencyReq)0<c.currencyReq[g]&&
server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g,Amount:c.currencyReq[g]});for(g in c.carCardsRequest)if(c.carCardsRequest.hasOwnProperty(g)){f=!1;for(a=0;a<b.Inventory.length;a++)if(b.Inventory[a].ItemId==g&&"CarCards"==b.Inventory[a].CatalogVersion){f=void 0==b.Inventory[a].CustomData?Number(c.carCardsRequest[g]):void 0==b.Inventory[a].CustomData.Amount?Number(c.carCardsRequest[g]):isNaN(Number(b.Inventory[a].CustomData.Amount))?Number(c.carCardsRequest[g]):Number(b.Inventory[a].CustomData.Amount)+
Number(c.carCardsRequest[g]);f={Amount:f};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[a].ItemInstanceId,Data:f});f=!0;break}0==f&&(a=[g],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),f={Amount:c.carCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:f}))}for(g in c.partCardsRequest)if(c.partCardsRequest.hasOwnProperty(g)){f=
!1;for(a=0;a<b.Inventory.length;a++)if(b.Inventory[a].ItemId==g&&"PartCards"==b.Inventory[a].CatalogVersion){f=void 0==b.Inventory[a].CustomData?Number(c.partCardsRequest[g]):void 0==b.Inventory[a].CustomData.Amount?Number(c.partCardsRequest[g]):isNaN(Number(b.Inventory[a].CustomData.Amount))?Number(c.partCardsRequest[g]):Number(b.Inventory[a].CustomData.Amount)+Number(c.partCardsRequest[g]);f={Amount:f};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[a].ItemInstanceId,
Data:f});f=!0;break}0==f&&(a=[g],a=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:a}),f={Amount:c.partCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:f}))}g=server.GetUserInventory({PlayFabId:currentPlayerId});c.chestId&&0>=c.levelUpRewardIndex&&(a=UpdateExperience("Chests",c.chestId,"xpGain",0,!0),g.Experience=a);return generateInventoryChange("InventoryUpdated",g)};
handlers.purchaseBMItem=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>c.itemId||3<c.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+c.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),b=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+c.itemId].Value.split("_"),f=b.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var e;e=2>c.itemId?"PartCards":"CarCards";var h=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),f=checkBalance(a[1],h,f,f);if("OK"!=f)return f;for(var d,g,f=0;f<b.Inventory.length;f++)if(b.Inventory[f].ItemId==a[0]&&b.Inventory[f].CatalogVersion==e){d=b.Inventory[f].ItemInstanceId;void 0===b.Inventory[f].CustomData?g={Amount:1}:void 0===b.Inventory[f].CustomData.Amount?g={Amount:1}:(g=Number(b.Inventory[f].CustomData.Amount)+1,isNaN(g)&&(g=1),g={Amount:g});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:d,Data:g});break}void 0===d&&(d=[],d.push(a[0]),d=server.GrantItemsToUser({CatalogVersion:e,PlayFabId:currentPlayerId,ItemIds:d}).ItemGrantResults[0].ItemInstanceId,void 0===d?generateErrObj("grantRequest denied"):(g={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d,Data:g})));d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:h});updateCurrencySpentStatistic(a[1],h);h=a[0]+"_"+a[1]+"_"+a[2]+"_"+
(parseInt(a[3])+1)+"_"+a[4];b={};b["BMItem"+c.itemId]=h;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});g=[{ItemId:a[0],CatalogVersion:e,CustomData:g}];e={};e[d.VirtualCurrency]=d.Balance;a=c.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];f={Inventory:g,VirtualCurrency:e};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:f,BMItemChange:a}};
handlers.purchaseItems=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=server.GetUserInventory({PlayFabId:currentPlayerId}),f=b.VirtualCurrency.SC,e=b.VirtualCurrency.HC;switch(c.purchaseType){case "carUpgrade":return upgradeCar(c,b,f,e);case "partUpgrade":return upgradePart(c,b,f,e);case "custPurchase":for(var h=server.GetCatalogItems({CatalogVersion:"Customization"}),d,g=0,a="SC",l=0;l<h.Catalog.length;l++)if(h.Catalog[l].ItemId==c.custId){d=
h.Catalog[l];cardInfo=JSON.parse(h.Catalog[l].CustomData);g=c.custVal+",Cost";a=cardInfo[c.custVal+",Curr"];g=cardInfo[g];e=checkBalance(a,g,f,e);if("OK"!=e)return e;break}if(void 0==d)return generateErrObj("Customization does not exist in catalog.");for(var m,p,l=0;l<b.Inventory.length;l++)if(b.Inventory[l].ItemId==c.custId){m=b.Inventory[l];p=b.Inventory[l].ItemInstanceId;if(void 0!=m.CustomData&&String(c.custVal)in m.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
m){log.info("user doesn't have customization category. Granting ... ");e=[];e.push(c.custId);e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e});if(0==e.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");p=e.ItemGrantResults[0].ItemInstanceId}e={};e[String(c.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:p,Data:e});p=[{ItemId:c.custId,
CatalogVersion:"Customization",CustomData:e}];0<g?(e=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:g}),updateCurrencySpentStatistic(a,g),a={},a[e.VirtualCurrency]=e.Balance,l={Inventory:p,VirtualCurrency:a}):l={Inventory:p};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":g=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});p=!1;for(l=a=0;l<g.Catalog.length;l++)if(g.Catalog[l].ItemId==c.packId){a=g.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(g.Catalog[l].CustomData);p=!0;break}if(0==p)return generateErrObj("pack with ID: "+c.packId+" not found in catalog.");if(0>=a)return generateErrObj("pack with ID: "+c.packId+" shouldn't have negative cost.");if(a>e)return generateFailObj("Not enough HC.");e=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:a});updateCurrencySpentStatistic("HC",a);g=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});
a={};a[g.VirtualCurrency]=g.Balance;a[e.VirtualCurrency]=e.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:a});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(c){c=CheckMaintenanceAndVersion(c);return"OK"!=c?generateMaintenanceOrUpdateObj(c):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(c){c=server.GetUserInventory({PlayFabId:currentPlayerId});var k=Number(c.VirtualCurrency.SC);if(isNaN(k)||0>k)k=0;var a=Number(c.VirtualCurrency.HC);if(isNaN(a)||0>a)a=0;var b=[];b.push({StatisticName:"CurrentMoney",Version:"0",Value:k});b.push({StatisticName:"CurrentGold",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});for(var k=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),
b=!1,f=0;f<c.Inventory.length;f++)if("CarsProgress"==c.Inventory[f].CatalogVersion){var b=!0,e=checkCarDataValidity(c.Inventory[f],k);if("PlayFabError"==e||void 0===e)return generateErrObj("PlayfabError");"OK"==e?log.debug("Data for "+c.Inventory[f].ItemId+" OK"):c.Inventory[f].CustomData=e;c.Inventory[f].CustomData.Pr=recalculateCarPr(c.Inventory[f].CustomData,c.Inventory[f].ItemId,k,a);e={};e.Pr=c.Inventory[f].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[f].ItemInstanceId,
Data:e})}return!1===b?(c=[],c.push("FordFocus"),c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c}),k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k}),k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,
Data:k}),k={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k}),generateErrObj("UserHasNoCars ... reiniting")):c};
handlers.retrieveBlackMarket=function(c,k){var a=CheckMaintenanceAndVersion(c);if(!0===c.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=[];b.push("BMTime");for(var f=0;4>f;f++)b.push("BMItem"+f);f=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:b});if(void 0===f.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var b=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:e});if(!0===c.reset){a="HC";f=200;b=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==b.Data.BlackMarketResetCost&&(f=b.Data.BlackMarketResetCost.split("_"),a=f[0],f=Number(f[1]));if(0<f){b=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,f,b.VirtualCurrency.SC,b.VirtualCurrency.HC))return generateFailObj("not enough money");b=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:f});updateCurrencySpentStatistic(a,f);a=GenerateBlackMarket(currentPlayerId);f={};f[b.VirtualCurrency]=b.Balance;f={VirtualCurrency:f};
a.InventoryChange=f;return a}return GenerateBlackMarket(currentPlayerId)}return b.getTime()-parseInt(f.Data.BMTime.Value)>6E4*parseInt(e.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,f),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,f)};
handlers.rewardUsers=function(c,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,b=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),f=0;0>=b&&(a=Number(a)/3E3,f=Number(Math.floor(800*a)));b=Number(b)+f;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:b}]});return b};
handlers.startGame=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=server.GetTitleData({Key:"LeagueSubdivisions SubdivisionTrophyRanges TrophyGainRange TrophyLoseRange SubdivisionPrRanges TrophyDifferenceLimit".split(" ")}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TotalGames"]}).Statistics,a=GetValueFromStatistics(a,"TotalGames",0),a=Number(a)+1;1==c.debug&&log.debug("totalGamesStartedIs: "+a);var f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]}),e=0;0!=f.Statistics.length&&(e=f.Statistics[0].Value);for(var e=Number(e),h=JSON.parse(b.Data.SubdivisionTrophyRanges),d=JSON.parse(b.Data.LeagueSubdivisions),g=JSON.parse(b.Data.SubdivisionPrRanges),f=JSON.parse(b.Data.TrophyDifferenceLimit),l=Number(f.trophyReadjustRange),m=Number(f.maxDifference),p=f.subDivisionsToExclude,r=43,u=43,D,B=b.Data.TrophyGainRange.split("_"),F=b.Data.TrophyLoseRange.split("_"),f=Number(B[0]),b=Number(B[1]),B=Number(F[0]),F=Number(F[1]),
n=0;n<h.subdivisions.length;n++)if(e<Number(h.subdivisions[n])){r=n;n<h.subdivisions.length-1&&(u=n+1);break}D=Number(h.subdivisions[u])-Number(h.subdivisions[r]);0>=D&&(D=400);var t=server.GetTitleInternalData({Keys:"RecSubDivision"+r}).Data["RecSubDivision"+r],q=!1;void 0==t&&(q=!0);var z,v,A,w=u="noop",n=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp"]});if(void 0==n.Data||void 0==n.Data.lastOpp)w=u="noop";else for(v=n.Data.lastOpp.Value.split(","),n=0;n<v.length;n++)0==n&&
(u=v[n]),1==n&&(w=v[n]);z=0==q?JSON.parse(t):[];var G=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>z.length&&(q=!0);var H=Array(z.length),C=0,t=Array(z.length);v=0;A=Array(z.length);for(var E=0,n=0;n<z.length;n++)1==q&&(G[5*Number(z[n].e)+Number(z[n].c)]=1),z[n].uId!=currentPlayerId&&(H[C]=z[n],C++,z[n].uId!=u&&(t[v]=z[n],v++,z[n].uId!=w&&(A[E]=z[n],E++)));if(1==q){q=[];for(n=0;n<G.length;n++)0==G[n]&&q.push(n);q=q[Math.floor(Math.random()*q.length)];n=Math.floor(q/5);q%=5;w=server.GetTitleData({Keys:"MasterUser"});
if(void 0!=w.Data.MasterUser&&(w=server.GetUserReadOnlyData({PlayFabId:w.Data.MasterUser,Keys:[n+"_"+q+"_RecPos",n+"_"+q+"_RecRot",n+"_"+q+"_RecHeader"]}),void 0!=w.Data&&void 0!=w.Data[n+"_"+q+"_RecPos"]&&void 0!=w.Data[n+"_"+q+"_RecRot"]&&void 0!=w.Data[n+"_"+q+"_RecHeader"])){d=!0;0==e?(e=b,d=!1):e-=B;1>=e&&(e=1);var x=[],e={StatisticName:"TrophyCount",Version:"0",Value:e};x.push(e);e={StatisticName:"League",Version:"0",Value:y};x.push(e);e={StatisticName:"TotalGames",Version:"0",Value:a};x.push(e);
server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:x});a={trophyWin:Math.floor((Number(b)+Number(f))/2),trophyLose:Math.floor((Number(F)+Number(B))/2)};0==d&&(a.trophyWin=0,a.trophyLose=0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:"TheStig",PosData:w.Data[n+"_"+q+"_RecPos"].Value,RotData:w.Data[n+"_"+q+"_RecRot"].Value,HeaderData:w.Data[n+"_"+q+"_RecHeader"].Value,TrophyLose:B,TrophyWin:b,Opp:"TheStig"}}}if(0==C)return generateErrObj("no valid recording found for this subdivision");
y=H;0<v&&(C=v,y=t);0<E&&(C=E,y=A);t=Math.floor(Math.random()*C);t>=C&&(t=C-1);v=Math.min(C,3);A=Array(v);for(n=0;n<v;n++)A[n]=0>=t?y[n]:t>=C-1?y[C-1-n]:y[t-Math.floor(v/2)+n];y=Math.floor(Math.random()*v);v=A[y].uId;t=A[y].e;A=A[y].c;E=server.GetUserReadOnlyData({PlayFabId:v,Keys:[t+"_"+A+"_RecPos",t+"_"+A+"_RecRot",t+"_"+A+"_RecHeader"]});if(void 0==E)return generateErrObj("Did not find recording for this user: "+v);var C=server.GetPlayerCombinedInfo({PlayFabId:v,InfoRequestParameters:{GetUserAccountInfo:!0,
GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),q=e,y=Number(calculateLeague(e)),H="UserGenerated",w=0<y?Number(h.subdivisions[d.leagues[y-1]]):0,G=y>=d.leagues.length-1?2*w:Number(h.subdivisions[d.leagues[y]]);1==c.debug&&log.debug("I bet it will crash after this");h=JSON.parse(E.Data[t+"_"+A+"_RecHeader"].Value);1==c.debug&&log.debug("or not");void 0!=h&&(x=h.Trophies);x=
Number(x);z=!0;1==c.debug&&log.debug("Adjusting trophies");if(void 0!=p)for(1==c.debug&&log.debug("excludedSubdivisionsFromTrophyAdjustment: "+p),n=0;n<p.length;n++)if(r==Number(p[n])){1==c.debug&&log.debug("in excluded subdivision: "+r);z=!1;break}1==z&&Number(Math.abs(q-x))>=m&&(1==c.debug&&log.debug("generating new trophies. Reason: user trophies: "+q+" vs opponent trophies: "+x),x=q-l+Math.floor(Math.random()*l*2),h.Trophies=x,1==c.debug&&log.debug("performing stringify on recordingData header"),
E.Data[t+"_"+A+"_RecHeader"].Value=JSON.stringify(h));0>=G-w?(l=F,m=f):Number(Math.abs(q-x))>Number(D)?(l=Math.floor((B+F)/2)-1+Math.floor(3*Math.random()),m=Math.floor((b+f)/2)-1+Math.floor(3*Math.random())):(l=B+Math.floor((F-B)/2*((q-x)/(G-w)+1)),m=f+Math.floor((b-f)/2*((x-q)/(G-w)+1)));1==c.debug&&log.debug("Opponent's PR is TOO DAMN HIGH! "+h.Pr+" vs "+Number(g.subdivisions[Number(d.leagues[y-1])+1])+". You are in subdivision: "+Number(d.leagues[y-1]+1));h.Pr>Number(g.subdivisions[Number(d.leagues[y-
1])+1])&&(l=Math.floor((B+F)/2)-1+Math.floor(3*Math.random()),m=Math.floor((b+f)/2)-1+Math.floor(3*Math.random()),H="MobyDick");f=!0;0==e?(f=!1,e=b):(e-=Number(l),1>=e&&(e=1));x=[];e={StatisticName:"TrophyCount",Version:"0",Value:e};x.push(e);e={StatisticName:"League",Version:"0",Value:y};x.push(e);e={StatisticName:"TotalGames",Version:"0",Value:a};x.push(e);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:x});a={trophyWin:m,trophyLose:l,lastOpp:v+","+u};0==f&&(a.trophyWin=0,a.trophyLose=
0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:H,PosData:E.Data[t+"_"+A+"_RecPos"].Value,RotData:E.Data[t+"_"+A+"_RecRot"].Value,HeaderData:E.Data[t+"_"+A+"_RecHeader"].Value,TrophyLose:l,TrophyWin:m,Opp:C.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var b=server.GetUserInventory({PlayFabId:currentPlayerId}),f=[],e="-1",h={},d={PaintJobs:{itemOwned:"no",itemCustData:c.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:c.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:c.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:c.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:c.wsId,carItemId:"WindshieldId"}},a=0;a<b.Inventory.length;a++)b.Inventory[a].ItemId==c.carId&&"CarsProgress"==b.Inventory[a].CatalogVersion&&(e=b.Inventory[a].ItemInstanceId),b.Inventory[a].ItemId in d&&(d[b.Inventory[a].ItemId].itemOwned="yes",d[b.Inventory[a].ItemId].itemCustData in b.Inventory[a].CustomData?h[d[b.Inventory[a].ItemId].carItemId]=d[b.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+b.Inventory[a].ItemId+" "+d[b.Inventory[a].ItemId].itemCustData));if("-1"==
e)return generateFailObj("User does not own car with id: "+c.carId);for(var g in d)d.hasOwnProperty(g)&&"no"==d[g].itemOwned&&f.push(g);if(h=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e,Data:h});g=[{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:h}];if(0<f.length)for(f=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:f}),b={0:"Owned"},
a=0;a<f.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[a].ItemInstanceId,Data:b});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:g}}};
function upgradeCar(c,k,a,b){for(var f=server.GetCatalogItems({CatalogVersion:"CarCards"}),e=!1,h,d=0;d<k.Inventory.length;d++)if(k.Inventory[d].ItemId==c.carId&&"CarsProgress"==k.Inventory[d].CatalogVersion){e=!0;h=k.Inventory[d];break}for(var g,d=0;d<f.Catalog.length;d++)if(f.Catalog[d].ItemId==c.carId){g=JSON.parse(f.Catalog[d].CustomData);break}if(void 0===g)return generateErrObj("CardNotFoundForCarwithID: "+c.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===e){var l=parseInt(h.CustomData.CarLvl)+1;if(l>=Number(g.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var m=getObjectValueFromLevel(g,"currCostPerLvl",l),d=checkBalance(g.currType,m,a,b);if("OK"!=d)return d;a=getObjectValueFromLevel(g,"cardCostPerLvl",l);h.CustomData.CarLvl=l;for(var e=!1,p,d=0;d<k.Inventory.length;d++)if(k.Inventory[d].ItemId==c.carId&&"CarCards"==k.Inventory[d].CatalogVersion){e=!0;try{if(void 0===k.Inventory[d].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===k.Inventory[d].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(k.Inventory[d].CustomData.Amount)>=a)k.Inventory[d].CustomData.Amount-=a,p={Amount:k.Inventory[d].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[d].ItemInstanceId,Data:p});else return generateFailObj("Insufficient cards for real: "+k.Inventory[d].CustomData.Amount+" vs "+a)}catch(u){return generateFailObj("Insufficient cards")}break}if(!1===
e)return generateFailObj("No cards found");k=recalculateCarPr(h.CustomData,h.ItemId,f,void 0);d={CarLvl:l,Pr:k};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemInstanceId,Data:d});var r;0<m&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g.currType,Amount:m}),updateCurrencySpentStatistic(g.currType,m));c=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:d}];p=
{};d={Inventory:c};void 0!=r&&(p[r.VirtualCurrency]=r.Balance,d.VirtualCurrency=p);d.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+g.rarity,l,!0);return generateInventoryChange("InventoryUpdate",d)}e=!1;for(d=0;d<k.Inventory.length;d++)if(k.Inventory[d].ItemId==c.carId&&"CarCards"==k.Inventory[d].CatalogVersion){e=!0;try{if(void 0===k.Inventory[d].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===k.Inventory[d].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(k.Inventory[d].CustomData.Amount)>=Number(g.cardCostPerLvl[1]))m=k.Inventory[d].ItemInstanceId,k.Inventory[d].CustomData.Amount-=g.cardCostPerLvl[1],p={Amount:k.Inventory[d].CustomData.Amount};else return generateFailObj("Insufficient cards: "+k.Inventory[d].CustomData.Amount+" vs "+g.cardCostPerLvl[1]+".")}catch(u){return generateFailObj("Insufficient cards: "+u)}break}if(0==e)return generateFailObj("No cards found");d=checkBalance(g.currType,g.currCostPerLvl[1],a,b);if("OK"!=d)return d;
h=[];h.push(c.carId);h=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:h});if(!1===h.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:m,Data:p});0<g.currCostPerLvl[1]&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:g.currType,Amount:g.currCostPerLvl[1]}),updateCurrencySpentStatistic(g.currType,g.currCostPerLvl[1]));d={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:d});d={TiresLvl:"0",TurboLvl:"0",PaintId:g.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,
Data:d});d={PlatesId:"0",WindshieldId:"0",Pr:Number(g.basePr)+g.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:d});f=h=!1;for(d=0;d<k.Inventory.length;d++)if("PaintJobs"==k.Inventory[d].ItemId){f=!0;void 0!=k.Inventory[d].CustomData?g.defaultPaintID in k.Inventory[d].CustomData?h=!0:(l={},l[g.defaultPaintID]="Owned"):(l={},l[g.defaultPaintID]="Owned");void 0!=l&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:k.Inventory[d].ItemInstanceId,Data:l});break}0==f&&(paintToGive=[],paintToGive.push("PaintJobs"),k=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),l={},l[g.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:l}));d={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:g.defaultPaintID,
DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:Number(g.basePr)+g.prPerLvl[1]};c=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:d}];0==h&&(p={},p[g.defaultPaintID]="Owned",c.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:p}));p={};d={Inventory:c};void 0!=r&&(p[r.VirtualCurrency]=r.Balance,d.VirtualCurrency=p);d.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+g.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",
d)}
function upgradePart(c,k,a,b){for(var f=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),e=!1,h=0;h<f.Catalog.length;h++)if(f.Catalog[h].ItemId==c.carId){e=!0;break}if(!1===e)return generateErrObj("car with ID: "+c.carId+" not found in catalog.");for(var f=server.GetCatalogItems({CatalogVersion:"PartCards"}),e=!1,d,h=0;h<f.Catalog.length;h++)if(f.Catalog[h].ItemId==c.partId){d=JSON.parse(f.Catalog[h].CustomData);e=!0;break}if(0==e)return generateErrObj("part with ID: "+c.partId+" not found in catalog.");for(var e=
!1,g,h=0;h<k.Inventory.length;h++)if(k.Inventory[h].ItemId==c.carId&&"CarsProgress"==k.Inventory[h].CatalogVersion){e=!0;g=k.Inventory[h];break}if(!1===e)return generateFailObj("car with ID: "+c.carId+" not found in user inventory.");for(var l=!1,e=0,m={},h=0;h<k.Inventory.length;h++)if(k.Inventory[h].ItemId==c.partId&&"PartCards"==k.Inventory[h].CatalogVersion){var l=!0,p={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},e=
parseInt(g.CustomData[p[c.partId]])+1;if(e>=Number(d.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var r=getObjectValueFromLevel(d,"cardCostPerLvl",e),u=getObjectValueFromLevel(d,"currCostPerLvl",e);m[p[c.partId]]=e;g.CustomData[p[c.partId]]=e;var D;a=checkBalance(d.currType,u,a,b);if("OK"!=a)return a;try{if(void 0!==k.Inventory[h].CustomData&&void 0!==k.Inventory[h].CustomData.Amount&&k.Inventory[h].CustomData.Amount>=r)k.Inventory[h].CustomData.Amount-=r,D={Amount:k.Inventory[h].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[h].ItemInstanceId,Data:D});else return generateFailObj("Insufficient cards")}catch(F){return generateFailObj("Insufficient cards")}break}if(0==l)return generateFailObj("Part not found");var B;0<u&&(B=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:d.currType,Amount:u}),updateCurrencySpentStatistic(d.currType,u));h=recalculateCarPr(g.CustomData,g.ItemId,void 0,f);m.Pr=h;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:g.ItemInstanceId,Data:m});g={};h={Inventory:[{ItemId:c.partId,CatalogVersion:"PartCards",CustomData:D},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:m}]};void 0!==B&&(g[B.VirtualCurrency]=B.Balance,h.VirtualCurrency=g);h.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+d.rarity,e,!0);return generateInventoryChange("InventoryUpdatePart",h)};
