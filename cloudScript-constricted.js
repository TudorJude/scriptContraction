function checkCarDataValidity(b,h){if(void 0==b.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});for(var c=0,e=0;e<h.Catalog.length;e++)if(h.Catalog[e].ItemId==b.ItemId){var f=
JSON.parse(h.Catalog[e].CustomData),c=parseInt(f.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a})}catch(d){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:c}}return"OK"}function generateFailObj(b){return{Result:"Failed",Message:b}}
function generateErrObj(b){return{Result:"Error",Message:b}}
function CheckMaintenanceAndVersion(b){var h=!1,a="A.0.0.1";void 0!=b&&(h=b.debug,a=b.cVersion);if(void 0==a)return"update";b=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var c=b.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(c=b.Data.MinimumGameVersionActual_IOS);if(void 0==c)return"maintenance";for(var e=!1,c=c.split("."),f=0;3>f;f++){var d=0;a.length>f+1&&(d=Number(a[f+1]));var g=0;c.length>f&&
(g=Number(c[f]));if(d<g){e=!0;break}}return 1==e?"update":1==h?"OK":b.Data.Maintenance?"false"==b.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(b){return"maintenance"==b?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(b,h){return{Result:"OK",Message:b,InventoryChange:h}}
function updateCurrencySpentStatistic(b,h){var a=[],c,e=0,f=Number(h);if(!(isNaN(f)||0>=f)&&("SC"==b&&(c="MoneySpent"),"HC"==b&&(c="GoldSpent"),void 0!=c)){var d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:[c]});0<d.Statistics.length&&(e=Number(d.Statistics[0].Value));a.push({StatisticName:c,Version:"0",Value:e+f});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a})}}
function checkBalance(b,h,a,c){if("SC"==b){if(a<h)return generateFailObj("NotEnoughSC")}else if(c<h)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(b){var h=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==h.Data.LeagueSubdivisions||void 0==h.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(h.Data.LeagueSubdivisions).leagues,h=JSON.parse(h.Data.SubdivisionTrophyRanges).subdivisions,c=0;c<a.length;c++)if(!(Number(b)>Number(h[a[c]])))return c;return a.length-1}
function recalculateCarPr(b,h,a,c){var e=0,f;f=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<f.Catalog.length;a++)if(f.Catalog[a].ItemId==h){e=JSON.parse(f.Catalog[a].CustomData);e=parseInt(e.basePr)+getObjectValueFromLevel(e,"prPerLvl",b.CarLvl);break}c=void 0===c?server.GetCatalogItems({CatalogVersion:"PartCards"}):c;b={Exhaust:b.ExhaustLvl,Engine:b.EngineLvl,Gearbox:b.GearboxLvl,Suspension:b.SuspensionLvl,Tires:b.TiresLvl,Turbo:b.TurboLvl};for(a=0;a<c.Catalog.length;a++)h=
JSON.parse(c.Catalog[a].CustomData),e+=getObjectValueFromLevel(h,"prPerLvl",Number(b[c.Catalog[a].ItemId]));return e}
function GenerateBlackMarket(b){var h=1,a=server.GetPlayerStatistics({PlayFabId:b,StatisticNames:["League"]});0!=a.Statistics.length&&(h=a.Statistics[0].Value.toString());0>=Number(h)&&(h=1);for(var c=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:b,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),e=JSON.parse(a.Data.BlackMarketRarityBias),f,d=[],g=[],k=[],l=0;l<c.Catalog.length;l++){f=JSON.parse(c.Catalog[l].CustomData);if(void 0==f)return generateErrObj("Part card "+
c.Catalog[l].ItemId+" has no custom data.");0==f.rarity&&d.push(c.Catalog[l].ItemId+"_"+f.BMCurrType+"_"+f.BMbasePrice+"_0_"+f.BMpriceIncrPerBuy);1==f.rarity&&g.push(c.Catalog[l].ItemId+"_"+f.BMCurrType+"_"+f.BMbasePrice+"_0_"+f.BMpriceIncrPerBuy);2==f.rarity&&k.push(c.Catalog[l].ItemId+"_"+f.BMCurrType+"_"+f.BMbasePrice+"_0_"+f.BMpriceIncrPerBuy)}c={};c.BMTime=(new Date).getTime();l=Math.floor(Math.random()*d.length);c.BMItem0=d[l];2<=d.length&&d.splice(l,1);Math.floor(100*Math.random())<Number(e.parts[2])?
d=k:(l=Number(e.parts[0])+Number(e.parts[1]),Math.floor(Math.random()*l)>=Number(e.parts[0])&&(d=g));c.BMItem1=d[Math.floor(Math.random()*d.length)];f=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var n,d=[],g=[],k=[],l=0;l<f.Catalog.length;l++){n=JSON.parse(f.Catalog[l].CustomData);if(void 0==n)return generateErrObj("Car card "+f.Catalog[l].ItemId+" has no custom data.");Number(n.unlockedAtRank)>=Number(h)+1||("0"==n.rarity&&d.push(f.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+
"_0_"+n.BMpriceIncrPerBuy),"1"==n.rarity&&g.push(f.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy),"2"==n.rarity&&k.push(f.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy))}h=Math.floor(Math.random()*d.length);c.BMItem2=d[h];2<=d.length&&d.splice(h,1);0>=g.length&&(0>=k.length?k=g=d:g=k);0>=k.length&&(k=g);Math.floor(100*Math.random())<Number(e.cars[2])?d=k:(l=Number(e.cars[0])+Number(e.cars[1]),Math.floor(Math.random()*l)>=Number(e.cars[0])&&
(d=g));h=Math.floor(Math.random()*d.length);c.BMItem3=d[h];server.UpdateUserInternalData({PlayFabId:b,Data:c});c.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return c}function GetCurrentBlackMarket(b,h){var a={},c=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:b,Keys:e});a.BMTime=60*parseInt(e.Data.BlackMarketResetMinutes)-Math.floor((c.getTime()-h.Data.BMTime.Value)/1E3);for(c=0;4>c;c++)a["BMItem"+c]=h.Data["BMItem"+c].Value;return a}
function GetValueFromStatistics(b,h,a){for(var c,e=0;e<b.length;e++)b[e].StatisticName===h&&(c=b[e]);return void 0===c?void 0!==a?a:0:Number(c.Value)}function GetVersionFromStatistics(b,h,a){for(var c,e=0;e<b.length;e++)b[e].StatisticName===h&&(c=b[e]);return void 0===c?void 0!==a?a:0:Number(c.Version)}function getCatalogItem(b,h){for(var a=server.GetCatalogItems({CatalogVersion:b}),c=0;c<a.Catalog.length;c++)if(a.Catalog[c].ItemId===h)return a.Catalog[c]}
function getObjectValueFromLevel(b,h,a,c){c||(c=0);if(!b[h]||!b[h].length)return c;var e=Number(b[h].length);a>=e&&(a=e-1);return Number(b[h][a])||c}function GiveUserPart(b,h,a,c){GiveUserCard(b,"PartsCards",h,a,c)}function GiveUserCarCard(b,h,a,c){GiveUserCard(b,"CarCards",h,a,c)}
function GiveUserCard(b,h,a,c,e){a=Number(a)<Number(c)?Number(a)+Math.floor(Math.random()*(Number(c)-Number(a))):Number(a);var f,d;for(c=0;c<e.Inventory.length;c++)if(e.Inventory[c].ItemId==b&&e.Inventory[c].CatalogVersion==h){f=e.Inventory[c].ItemInstanceId;d=void 0==e.Inventory[c].CustomData?a:void 0==e.Inventory[c].CustomData.Amount?e.Inventory[c].CustomData.Amount:isNaN(Number(e.Inventory[c].CustomData.Amount))?a:Number(e.Inventory[c].CustomData.Amount)+Number(d);break}if(void 0==f&&(f=[],f.push(b),
f=server.GrantItemsToUser({CatalogVersion:h,PlayFabId:currentPlayerId,ItemIds:f}).ItemGrantResults[0].ItemInstanceId,void 0===f))return generateErrObj("grantRequest denied");d={Amount:d};server.UpdateUserInventoryItemCustomData({PlayFabId:e.PlayFabId,ItemInstanceId:f,Data:d});return{ItemId:b,CatalogVersion:h,CustomData:d}}
handlers.buyChest=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(b.curr,b.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<b.cost){a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.cost});updateCurrencySpentStatistic(b.curr,b.cost);var c={};c[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",
{VirtualCurrency:c})}return generateInventoryChange("ChestBought",{})};
handlers.claimDailyMission=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a=Number(b.mIdx),c=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==c.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var c=JSON.parse(c.Data.DailyMissionStatus.Value),e=c.dailyMissionClaimStatus;if(a>=e.length)return generateErrObj("Unlock index is out of bounds of playerData claim mission status array");if(1==
e[a])return generateFailObj("Mission already claimed");e[a]=1;c={DailyMissionStatus:JSON.stringify({DailyStatus:c.DailyStatus,dailyMissionClaimStatus:e,timeStamp:c.timeStamp})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});c=JSON.parse(c.Data.DailyMissionData);if(a>=c.missionData.length)return generateErrObj("Unlock index is out of bounds of titleData claim mission reward array");a=c.missionData[a].split("_");
a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:Number(a[2])});c={};c[a.VirtualCurrency]=a.Balance;return generateInventoryChange("MissionClaimed",{VirtualCurrency:c})};
handlers.endDaily=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==a.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");for(var c=JSON.parse(a.Data.DailyMissionStatus.Value),a=c.dailyMissionClaimStatus,e,f=-1,d=0;d<c.dailyMissionClaimStatus.length;d++)if(0==a[d])return generateErrObj("Not all missions were claimed!");
a=[0,0,0,0,0,0,0,0];e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});tParsed=JSON.parse(e.Data.DailyMissionData);var d=Number(tParsed.minutesToRefresh),g=new Date;g.getTime()-Number(c.timeStamp)>6E4*Number(d)?(e=2,c=g.getTime()):(e=0,f=60*Number(d)-Math.floor((g.getTime()-Number(c.timeStamp))/1E3),c=c.timeStamp);c={DailyMissionStatus:JSON.stringify({DailyStatus:e,dailyMissionClaimStatus:a,timeStamp:c})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});
var c=server.GetUserInventory({PlayFabId:currentPlayerId}),k;for(k in b.currencyReq)0<b.currencyReq[k]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:k,Amount:b.currencyReq[k]});for(k in b.carCardsRequest)if(b.carCardsRequest.hasOwnProperty(k)){g=!1;for(d=0;d<c.Inventory.length;d++)if(c.Inventory[d].ItemId==k&&"CarCards"==c.Inventory[d].CatalogVersion){g=void 0==c.Inventory[d].CustomData?Number(b.carCardsRequest[k]):void 0==c.Inventory[d].CustomData.Amount?Number(b.carCardsRequest[k]):
isNaN(Number(c.Inventory[d].CustomData.Amount))?Number(b.carCardsRequest[k]):Number(c.Inventory[d].CustomData.Amount)+Number(b.carCardsRequest[k]);g={Amount:g};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[d].ItemInstanceId,Data:g});g=!0;break}0==g&&(d=[k],d=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:d}),g={Amount:b.carCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,
Data:g}))}for(k in b.partCardsRequest)if(b.partCardsRequest.hasOwnProperty(k)){g=!1;for(d=0;d<c.Inventory.length;d++)if(c.Inventory[d].ItemId==k&&"PartCards"==c.Inventory[d].CatalogVersion){g=void 0==c.Inventory[d].CustomData?Number(b.partCardsRequest[k]):void 0==c.Inventory[d].CustomData.Amount?Number(b.partCardsRequest[k]):isNaN(Number(c.Inventory[d].CustomData.Amount))?Number(b.partCardsRequest[k]):Number(c.Inventory[d].CustomData.Amount)+Number(b.partCardsRequest[k]);g={Amount:g};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.Inventory[d].ItemInstanceId,Data:g});g=!0;break}0==g&&(d=[k],d=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:d}),g={Amount:b.partCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:g}))}return{Result:"OK",Message:"DailyCompleted",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId}),DailyStatus:{status:e,claimStatus:a,timeRemaining:f}}};
handlers.endGame=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),a=0,e,f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=f.Statistics.length&&(a=f.Statistics[0].Value,1==b.debug&&log.debug("getting trophy count "+f.Statistics[0].Value));e=a=Number(a);var d=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose",
"trophyWin","LastGameOutcome","LatestStreak"]}),g;g=void 0==d.Data.trophyLose||void 0==d.Data.trophyWin?45:Number(d.Data.trophyLose.Value)+Number(d.Data.trophyWin.Value);var f=0,k="Loss";void 0!=d.Data.LatestStreak&&(f=Number(d.Data.LatestStreak.Value));1==isNaN(f)&&(f=0);void 0!=d.Data.LatestStreak&&(k=d.Data.LastGameOutcome.Value);void 0==k&&(k="Loss");d={quitLastGame:"false",LastGameOutcome:"Loss"};"rWin"==b.outcome&&(a+=g,d.LastGameOutcome="Win","Loss"==k?f=1:f++);d.LatestStreak=f;server.UpdateUserInternalData({PlayFabId:currentPlayerId,
Data:d});g=JSON.parse(b.recordingHeader);var l=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Wins","TotalGamesCompleted","LongestWinStreak","BestDriftScore","HighestLeagueReached"]}).Statistics,k=GetValueFromStatistics(l,"TotalGamesCompleted",0),k=Number(k)+1,d=GetValueFromStatistics(l,"Wins",0);"rWin"==b.outcome&&(d=Number(d)+1);var n=GetValueFromStatistics(l,"LongestWinStreak",0);GetVersionFromStatistics(l,"LongestWinStreak",0);Number(n)<f&&(n=f);var p=GetValueFromStatistics(l,
"BestDriftScore",0);Number(g.Score)>p&&(p=Number(g.Score));f=calculateLeague(a);l=GetValueFromStatistics(l,"HighestLeagueReached",1);f>l&&(l=f);var r=[];r.push({StatisticName:"TrophyCount",Value:a});r.push({StatisticName:"League",Value:f});r.push({StatisticName:"Wins",Value:d});r.push({StatisticName:"TotalGamesCompleted",Value:k});r.push({StatisticName:"LongestWinStreak",Value:n});r.push({StatisticName:"BestDriftScore",Value:p});r.push({StatisticName:"HighestLeagueReached",Value:l});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:r});if(100>=Number(g.Score))return a={TrophyCount:a,League:f},{Result:a};k=JSON.parse(c.Data.SubdivisionTrophyRanges);c=43;for(g=0;g<k.subdivisions.length;g++)if(e<k.subdivisions[g]){c=g;break}e=[];e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecPos",Value:b.recordingPos});e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecRot",Value:b.recordingRot});e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecHeader",Value:b.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e});
e=server.GetTitleInternalData({Key:"RecSubDivision"+c}).Data["RecSubDivision"+c];if(void 0==e)e=[],k={e:b.envIndex,c:b.courseIndex,uId:currentPlayerId},e.push(k);else{e=JSON.parse(e);k={e:b.envIndex,c:b.courseIndex,uId:currentPlayerId};d=!1;for(g=n=0;g<e.length;g++)e[g].uId==currentPlayerId&&n++;if(2<n)return a={TrophyCount:a,League:f},{Result:a};for(g=0;g<e.length;g++)e[g].e==b.envIndex&&e[g].c==b.courseIndex&&(d=!0,e[g]=k);0==d&&e.push(k)}e=JSON.stringify(e);server.SetTitleInternalData({Key:"RecSubDivision"+
c,Value:e});a={TrophyCount:a,League:f};return{Result:a}};
function UpdateExperience(b,h,a,c,e,f){b=JSON.parse(getCatalogItem(b,h).CustomData)[a];h=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;h=h[h.length-1];f=f||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;f=GetValueFromStatistics(f,"Experience",0);if(f>=h)return h;if(isNaN(Number(b)))a=Number(b.length),c>=a&&(c=a-1),c=Number(b[c]);else if(c=Number(b),0===c)return f;f=Math.min(f+c,h);if(!e)return f;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:f}]});return f}
handlers.generateDaily=function(b,h){var a,c=new Date;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var e=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(e.DailyStatus);if(0==a){var c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),f;tParsed=JSON.parse(c.Data.DailyMissionData);f=Number(tParsed.minutesToRefresh);c=new Date;c.getTime()-Number(e.timeStamp)>6E4*Number(f)&&(a=1)}if(1!=a)return generateErrObj("DailyStatus is: "+
a+". Should be 1")}a=2;c=c.getTime();a={DailyMissionStatus:JSON.stringify({DailyStatus:a,dailyMissionClaimStatus:[0,0,0,0,0,0,0,0],timeStamp:c})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK"}};
handlers.getDailyMissionStatus=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c,a=[0,0,0,0,0,0,0,0],e=-1;c=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=c.Data.DailyMissionStatus){var f=JSON.parse(c.Data.DailyMissionStatus.Value);c=Number(f.DailyStatus);var d=a.length;d>f.dailyMissionClaimStatus.length&&(d=f.dailyMissionClaimStatus.length);for(var g=0;g<d;g++)a[g]=f.dailyMissionClaimStatus[g];
0==c&&(d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),tParsed=JSON.parse(d.Data.DailyMissionData),d=Number(tParsed.minutesToRefresh),g=new Date,g.getTime()-Number(f.timeStamp)>6E4*Number(d)?(c=2,a=[0,0,0,0,0,0,0,0],f=g.getTime(),f={DailyStatus:c,dailyMissionClaimStatus:a,timeStamp:f},f=JSON.stringify(f),f={DailyMissionStatus:f},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:f})):e=60*Number(d)-Math.floor((g.getTime()-Number(f.timeStamp))/1E3))}else c=2,
g=new Date,f=g.getTime(),f={DailyStatus:c,dailyMissionClaimStatus:a,timeStamp:f},f=JSON.stringify(f),f={DailyMissionStatus:f},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:f});return{Result:"OK",Message:" ",DailyStatus:{status:c,claimStatus:a,timeRemaining:e}}};handlers.getServerTime=function(b,h){return{time:new Date}};
handlers.iapMade=function(b,h){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["IAPValue"]}).Statistics,c=Number(GetValueFromStatistics(a,"IAPValue",0));switch(b.bundle){case "co.tamatem.downshiftdrift.gold01":c+=99;break;case "co.tamatem.downshiftdrift.gold02":c+=499;break;case "co.tamatem.downshiftdrift.gold03":c+=999;break;case "co.tamatem.downshiftdrift.gold04":c+=1999;break;case "co.tamatem.downshiftdrift.gold05":c+=4999;break;case "co.tamatem.downshiftdrift.gold06":c+=
9999;break;case "co.tamatem.downshiftdrift.bundle01":var c=c+599,e=server.GetUserInventory({PlayFabId:currentPlayerId}),f=server.GetCatalogItems({CatalogVersion:"BMBundleInfo"}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["HighestLeagueReached"]}).Statistics,a=Number(GetValueFromStatistics(a,"HighestLeagueReached",1)),d="bundle01league",d=10>a?d+"0"+a:d+a;1==b.debug&&log.debug("consuming: "+d);for(var g,a=0;a<f.Catalog.length;a++)if(f.Catalog[a].ItemId==d){g=JSON.parse(f.Catalog[a].CustomData);
break}if(void 0==g)return generateErrObj("Catalog item: "+d+" not found");for(a=0;a<e.Inventory.length;a++)if(1==b.debug&&log.debug("ItemId: "+e.Inventory[a].ItemId+" , ItemInstanceId: "+e.Inventory[a].ItemInstanceId),e.Inventory[a].ItemId==b.bundle){try{server.ConsumeItem({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[a].ItemInstanceId,ConsumeCount:1})}catch(k){return generateErrObj("err: "+k)}f=[];if(void 0!=g.HCRange){1==b.debug&&log.debug("found HCRange: "+g.HCRange);d=g.HCRange.split(",");
if(2<=d.length)d=Number(d[0])<Number(d[1])?Number(d[0])+Math.floor(Math.random()*(Number(d[1])-Number(d[0]))):Number(d[0]);else return generateErrObj("Catalog data corrupt");0<d&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:d}))}if(void 0!=g.SCRange){1==b.debug&&log.debug("found SCRange: "+g.SCRange);d=g.SCRange.split(",");if(2<=d.length)d=Number(d[0])<Number(d[1])?Number(d[0])+Math.floor(Math.random()*(Number(d[1])-Number(d[0]))):Number(d[0]);
else return generateErrObj("Catalog data corrupt");0<d&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:d}))}if(void 0!=g.Engine)if(1==b.debug&&log.debug("found Engine: "+g.Engine),d=g.Engine.split(","),2<=d.length)d=GiveUserPart("Engine",d[0],d[1],e),f.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=g.Exhaust)if(1==b.debug&&log.debug("found Exhaust: "+g.Exhaust),d=g.Engine.split(","),2<=d.length)d=GiveUserPart("Exhaust",
d[0],d[1],e),f.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=g.Gearbox)if(1==b.debug&&log.debug("found Gearbox: "+g.Gearbox),d=g.Engine.split(","),2<=d.length)d=GiveUserPart("Gearbox",d[0],d[1],e),f.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=g.Suspension)if(1==b.debug&&log.debug("found Suspension: "+g.Suspension),d=g.Engine.split(","),2<=d.length)d=GiveUserPart("Suspension",d[0],d[1],e),f.push(d);else return generateErrObj("Catalog data corrupt");
if(void 0!=g.Tires)if(1==b.debug&&log.debug("found Tires: "+g.Tires),d=g.Engine.split(","),2<=d.length)d=GiveUserPart("Tires",d[0],d[1],e),f.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=g.Turbo)if(1==b.debug&&log.debug("found Turbo: "+g.Turbo),d=g.Engine.split(","),2<=d.length)d=GiveUserPart("Turbo",d[0],d[1],e),f.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=g.CarCard&&(1==b.debug&&log.debug("found CarCard: "+g.CarCard),void 0!=g.CarCardAmount))if(1==
b.debug&&log.debug("found CarCardAmount: "+g.CarCardAmount),d=g.CarCardAmount.split(","),2<=d.length)d=GiveUserCarCard(g.CarCard,d[0],d[1],e),f.push(d);else return generateErrObj("Catalog data corrupt");void 0!=g.ChestModel&&1==b.debug&&log.debug("found ChestModel: "+g.ChestModel)}e=[];g={StatisticName:"IAPValue",Value:c};e.push(g);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});break;default:1==b.debug&&log.debug("InvalidPurchaseParameter")}e=[];g={StatisticName:"IAPValue",
Value:c};e.push(g);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e})};
handlers.initServerData=function(b){b=[];var h={StatisticName:"TrophyCount",Version:"0",Value:"0"};b.push(h);h={StatisticName:"League",Version:"0",Value:"0"};b.push(h);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var h={0:"Owned"},a=0;a<b.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[a].ItemInstanceId,Data:h});b=[];b.push("FordFocus");b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b});h={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:h});h={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:h});h={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:h});h=[];h.push("Engine");h=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:h});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});h={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:h})};
handlers.openChest=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<b.levelUpRewardIndex){var c=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),e={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}):c=a.Data.LastLevelReward.Value;var f=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,d=GetValueFromStatistics(a,"Experience",0);0==d&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var g=f.length,a=0;a<f.length;a++)if(!(d>=f[a])){g=a;break}if(Number(b.levelUpRewardIndex)<=Number(c))return generateFailObj("already got reward for level: "+c);if(Number(b.levelUpRewardIndex)<=Number(g))c=Number(b.levelUpRewardIndex),e.LastLevelReward=c,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:e}),a=""+c,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",PlayFabId:currentPlayerId,ItemIds:a});else return generateFailObj("You haven't reached this level yet")}c=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<b.currCost){if("OK"!=checkBalance(b.currType,b.currCost,c.VirtualCurrency.SC,c.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.currType,
Amount:b.currCost});updateCurrencySpentStatistic(b.currType,b.currCost)}for(var k in b.currencyReq)0<b.currencyReq[k]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:k,Amount:b.currencyReq[k]});for(k in b.carCardsRequest)if(b.carCardsRequest.hasOwnProperty(k)){e=!1;for(a=0;a<c.Inventory.length;a++)if(c.Inventory[a].ItemId==k&&"CarCards"==c.Inventory[a].CatalogVersion){e=void 0==c.Inventory[a].CustomData?Number(b.carCardsRequest[k]):void 0==c.Inventory[a].CustomData.Amount?
Number(b.carCardsRequest[k]):isNaN(Number(c.Inventory[a].CustomData.Amount))?Number(b.carCardsRequest[k]):Number(c.Inventory[a].CustomData.Amount)+Number(b.carCardsRequest[k]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[k],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:b.carCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}for(k in b.partCardsRequest)if(b.partCardsRequest.hasOwnProperty(k)){e=!1;for(a=0;a<c.Inventory.length;a++)if(c.Inventory[a].ItemId==k&&"PartCards"==c.Inventory[a].CatalogVersion){e=void 0==c.Inventory[a].CustomData?Number(b.partCardsRequest[k]):void 0==c.Inventory[a].CustomData.Amount?Number(b.partCardsRequest[k]):isNaN(Number(c.Inventory[a].CustomData.Amount))?Number(b.partCardsRequest[k]):Number(c.Inventory[a].CustomData.Amount)+Number(b.partCardsRequest[k]);
e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[k],a=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:b.partCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}k=server.GetUserInventory({PlayFabId:currentPlayerId});b.chestId&&0>=b.levelUpRewardIndex&&
(c=UpdateExperience("Chests",b.chestId,"xpGain",0,!0),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["ChestsOpened"]}).Statistics,e=Number(GetValueFromStatistics(a,"ChestsOpened",0)),e++,a=[],a.push({StatisticName:"ChestsOpened",Value:e}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}),k.Experience=c);return generateInventoryChange("InventoryUpdated",k)};
handlers.purchaseBMItem=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>b.itemId||3<b.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+b.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),c=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+b.itemId].Value.split("_"),e=c.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var f;f=2>b.itemId?"PartCards":"CarCards";var d=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),e=checkBalance(a[1],d,e,e);if("OK"!=e)return e;for(var g,k,e=0;e<c.Inventory.length;e++)if(c.Inventory[e].ItemId==a[0]&&c.Inventory[e].CatalogVersion==f){g=c.Inventory[e].ItemInstanceId;void 0===c.Inventory[e].CustomData?k={Amount:1}:void 0===c.Inventory[e].CustomData.Amount?k={Amount:1}:(k=Number(c.Inventory[e].CustomData.Amount)+1,isNaN(k)&&(k=1),k={Amount:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:g,Data:k});break}void 0===g&&(g=[],g.push(a[0]),g=server.GrantItemsToUser({CatalogVersion:f,PlayFabId:currentPlayerId,ItemIds:g}).ItemGrantResults[0].ItemInstanceId,void 0===g?generateErrObj("grantRequest denied"):(k={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g,Data:k})));g=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:d});updateCurrencySpentStatistic(a[1],d);d=a[0]+"_"+a[1]+"_"+a[2]+"_"+
(parseInt(a[3])+1)+"_"+a[4];c={};c["BMItem"+b.itemId]=d;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});k=[{ItemId:a[0],CatalogVersion:f,CustomData:k}];f={};f[g.VirtualCurrency]=g.Balance;a=b.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];e={Inventory:k,VirtualCurrency:f};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:e,BMItemChange:a}};
handlers.purchaseItems=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetUserInventory({PlayFabId:currentPlayerId}),e=c.VirtualCurrency.SC,f=c.VirtualCurrency.HC;switch(b.purchaseType){case "carUpgrade":return upgradeCar(b,c,e,f);case "partUpgrade":return upgradePart(b,c,e,f);case "custPurchase":for(var d=server.GetCatalogItems({CatalogVersion:"Customization"}),g,k=0,a="SC",l=0;l<d.Catalog.length;l++)if(d.Catalog[l].ItemId==b.custId){g=
d.Catalog[l];cardInfo=JSON.parse(d.Catalog[l].CustomData);k=b.custVal+",Cost";a=cardInfo[b.custVal+",Curr"];k=cardInfo[k];f=checkBalance(a,k,e,f);if("OK"!=f)return f;break}if(void 0==g)return generateErrObj("Customization does not exist in catalog.");for(var n,p,l=0;l<c.Inventory.length;l++)if(c.Inventory[l].ItemId==b.custId){n=c.Inventory[l];p=c.Inventory[l].ItemInstanceId;if(void 0!=n.CustomData&&String(b.custVal)in n.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
n){log.info("user doesn't have customization category. Granting ... ");f=[];f.push(b.custId);f=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:f});if(0==f.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");p=f.ItemGrantResults[0].ItemInstanceId}f={};f[String(b.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:p,Data:f});p=[{ItemId:b.custId,
CatalogVersion:"Customization",CustomData:f}];0<k?(f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:k}),updateCurrencySpentStatistic(a,k),a={},a[f.VirtualCurrency]=f.Balance,l={Inventory:p,VirtualCurrency:a}):l={Inventory:p};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":k=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});p=!1;for(l=a=0;l<k.Catalog.length;l++)if(k.Catalog[l].ItemId==b.packId){a=k.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(k.Catalog[l].CustomData);p=!0;break}if(0==p)return generateErrObj("pack with ID: "+b.packId+" not found in catalog.");if(0>=a)return generateErrObj("pack with ID: "+b.packId+" shouldn't have negative cost.");if(a>f)return generateFailObj("Not enough HC.");f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:a});updateCurrencySpentStatistic("HC",a);k=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});
a={};a[k.VirtualCurrency]=k.Balance;a[f.VirtualCurrency]=f.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:a});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(b){b=CheckMaintenanceAndVersion(b);return"OK"!=b?generateMaintenanceOrUpdateObj(b):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(b){b=server.GetUserInventory({PlayFabId:currentPlayerId});var h=Number(b.VirtualCurrency.SC);if(isNaN(h)||0>h)h=0;var a=Number(b.VirtualCurrency.HC);if(isNaN(a)||0>a)a=0;var c=[];c.push({StatisticName:"CurrentMoney",Version:"0",Value:h});c.push({StatisticName:"CurrentGold",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});for(var h=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),
c=!1,e=0;e<b.Inventory.length;e++)if("CarsProgress"==b.Inventory[e].CatalogVersion){var c=!0,f=checkCarDataValidity(b.Inventory[e],h);if("PlayFabError"==f||void 0===f)return generateErrObj("PlayfabError");"OK"==f?log.debug("Data for "+b.Inventory[e].ItemId+" OK"):b.Inventory[e].CustomData=f;b.Inventory[e].CustomData.Pr=recalculateCarPr(b.Inventory[e].CustomData,b.Inventory[e].ItemId,h,a);f={};f.Pr=b.Inventory[e].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[e].ItemInstanceId,
Data:f})}return!1===c?(b=[],b.push("FordFocus"),b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b}),h={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:h}),h={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,
Data:h}),h={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:h}),generateErrObj("UserHasNoCars ... reiniting")):b};
handlers.retrieveBlackMarket=function(b,h){var a=CheckMaintenanceAndVersion(b);if(!0===b.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=[];c.push("BMTime");for(var e=0;4>e;e++)c.push("BMItem"+e);e=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:c});if(void 0===e.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var c=new Date,f=[];f.push("BlackMarketResetMinutes");f=server.GetTitleData({PlayFabId:currentPlayerId,Keys:f});if(!0===b.reset){a="HC";e=200;c=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==c.Data.BlackMarketResetCost&&(e=c.Data.BlackMarketResetCost.split("_"),a=e[0],e=Number(e[1]));if(0<e){c=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,e,c.VirtualCurrency.SC,c.VirtualCurrency.HC))return generateFailObj("not enough money");c=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:e});updateCurrencySpentStatistic(a,e);a=GenerateBlackMarket(currentPlayerId);e={};e[c.VirtualCurrency]=c.Balance;e={VirtualCurrency:e};
a.InventoryChange=e;return a}return GenerateBlackMarket(currentPlayerId)}return c.getTime()-parseInt(e.Data.BMTime.Value)>6E4*parseInt(f.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,e),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,e)};
handlers.rewardUsers=function(b,h){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,c=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),e=0;0>=c&&(a=Number(a)/3E3,e=Number(Math.floor(800*a)));c=Number(c)+e;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:c}]});return c};
handlers.startGame=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetTitleData({Key:"LeagueSubdivisions SubdivisionTrophyRanges TrophyGainRange TrophyLoseRange SubdivisionPrRanges TrophyDifferenceLimit".split(" ")}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TotalGames"]}).Statistics,a=GetValueFromStatistics(a,"TotalGames",0),a=Number(a)+1;1==b.debug&&log.debug("totalGamesStartedIs: "+a);var e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]}),f=0;0!=e.Statistics.length&&(f=e.Statistics[0].Value);for(var f=Number(f),d=JSON.parse(c.Data.SubdivisionTrophyRanges),g=JSON.parse(c.Data.LeagueSubdivisions),k=JSON.parse(c.Data.SubdivisionPrRanges),e=JSON.parse(c.Data.TrophyDifferenceLimit),l=Number(e.trophyReadjustRange),n=Number(e.maxDifference),p=e.subDivisionsToExclude,r=43,B=43,F,A=c.Data.TrophyGainRange.split("_"),E=c.Data.TrophyLoseRange.split("_"),e=Number(A[0]),c=Number(A[1]),A=Number(E[0]),E=Number(E[1]),
m=0;m<d.subdivisions.length;m++)if(f<Number(d.subdivisions[m])){r=m;m<d.subdivisions.length-1&&(B=m+1);break}F=Number(d.subdivisions[B])-Number(d.subdivisions[r]);0>=F&&(F=400);var u=server.GetTitleInternalData({Keys:"RecSubDivision"+r}).Data["RecSubDivision"+r],q=!1;void 0==u&&(q=!0);var y,t,z,I="noop",v="noop",m=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp","quitLastGame"]});t="false;";void 0!=m.Data.quitLastGame&&(t=m.Data.quitLastGame.Value);1==b.debug&&log.debug("didQuitLastGame: "+
t);B=!1;void 0==t&&(t="false");"true"==t&&(B=!0);if(void 0==m.Data||void 0==m.Data.lastOpp)v=I="noop";else for(t=m.Data.lastOpp.Value.split(","),m=0;m<t.length;m++)0==m&&(I=t[m]),1==m&&(v=t[m]);y=0==q?JSON.parse(u):[];var G=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>y.length&&(q=!0);var H=Array(y.length),C=0,u=Array(y.length);t=0;z=Array(y.length);for(var D=0,m=0;m<y.length;m++)1==q&&(G[5*Number(y[m].e)+Number(y[m].c)]=1),y[m].uId!=currentPlayerId&&(H[C]=y[m],C++,y[m].uId!=I&&(u[t]=y[m],t++,y[m].uId!=v&&
(z[D]=y[m],D++)));if(1==q){q=[];for(m=0;m<G.length;m++)0==G[m]&&q.push(m);q=q[Math.floor(Math.random()*q.length)];m=Math.floor(q/5);q%=5;v=server.GetTitleData({Keys:"MasterUser"});if(void 0!=v.Data.MasterUser&&(v=server.GetUserReadOnlyData({PlayFabId:v.Data.MasterUser,Keys:[m+"_"+q+"_RecPos",m+"_"+q+"_RecRot",m+"_"+q+"_RecHeader"]}),void 0!=v.Data&&void 0!=v.Data[m+"_"+q+"_RecPos"]&&void 0!=v.Data[m+"_"+q+"_RecRot"]&&void 0!=v.Data[m+"_"+q+"_RecHeader"])){g=!0;0==f?(f=c,g=!1):f-=A;1>=f&&(f=1);var w=
[],f={StatisticName:"TrophyCount",Version:"0",Value:f};w.push(f);f={StatisticName:"League",Version:"0",Value:x};w.push(f);f={StatisticName:"TotalGames",Version:"0",Value:a};w.push(f);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:w});a={trophyWin:Math.floor((Number(c)+Number(e))/2),trophyLose:Math.floor((Number(E)+Number(A))/2),quitLastGame:"true"};0==g&&(a.trophyWin=0,a.trophyLose=0);1==B&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});
return{Result:"OK",RecType:"TheStig",PosData:v.Data[m+"_"+q+"_RecPos"].Value,RotData:v.Data[m+"_"+q+"_RecRot"].Value,HeaderData:v.Data[m+"_"+q+"_RecHeader"].Value,TrophyLose:A,TrophyWin:c,Opp:"TheStig"}}}if(0==C)return generateErrObj("no valid recording found for this subdivision");x=H;0<t&&(C=t,x=u);0<D&&(C=D,x=z);u=Math.floor(Math.random()*C);u>=C&&(u=C-1);t=Math.min(C,3);z=Array(t);for(m=0;m<t;m++)z[m]=0>=u?x[m]:u>=C-1?x[C-1-m]:x[u-Math.floor(t/2)+m];x=Math.floor(Math.random()*t);t=z[x].uId;u=
z[x].e;z=z[x].c;D=server.GetUserReadOnlyData({PlayFabId:t,Keys:[u+"_"+z+"_RecPos",u+"_"+z+"_RecRot",u+"_"+z+"_RecHeader"]});if(void 0==D)return generateErrObj("Did not find recording for this user: "+t);var C=server.GetPlayerCombinedInfo({PlayFabId:t,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),q=f,x=Number(calculateLeague(f)),
H="UserGenerated",v=0<x?Number(d.subdivisions[g.leagues[x-1]]):0,G=x>=g.leagues.length-1?2*v:Number(d.subdivisions[g.leagues[x]]);1==b.debug&&log.debug("I bet it will crash after this");d=JSON.parse(D.Data[u+"_"+z+"_RecHeader"].Value);1==b.debug&&log.debug("or not");void 0!=d&&(w=d.Trophies);w=Number(w);y=!0;1==b.debug&&log.debug("Adjusting trophies");if(void 0!=p)for(1==b.debug&&log.debug("excludedSubdivisionsFromTrophyAdjustment: "+p),m=0;m<p.length;m++)if(r==Number(p[m])){1==b.debug&&log.debug("in excluded subdivision: "+
r);y=!1;break}1==y&&Number(Math.abs(q-w))>=n&&(1==b.debug&&log.debug("generating new trophies. Reason: user trophies: "+q+" vs opponent trophies: "+w),w=q-l+Math.floor(Math.random()*l*2),d.Trophies=w,1==b.debug&&log.debug("performing stringify on recordingData header"),D.Data[u+"_"+z+"_RecHeader"].Value=JSON.stringify(d));0>=G-v?(l=E,n=e):Number(Math.abs(q-w))>Number(F)?(l=Math.floor((A+E)/2)-1+Math.floor(3*Math.random()),n=Math.floor((c+e)/2)-1+Math.floor(3*Math.random())):(l=A+Math.floor((E-A)/
2*((q-w)/(G-v)+1)),n=e+Math.floor((c-e)/2*((w-q)/(G-v)+1)));1==b.debug&&log.debug("Opponent's PR is TOO DAMN HIGH! "+d.Pr+" vs "+Number(k.subdivisions[Number(g.leagues[x-1])+1])+". You are in subdivision: "+Number(g.leagues[x-1]+1));d.Pr>Number(k.subdivisions[Number(g.leagues[x-1])+1])&&(l=Math.floor((A+E)/2)-1+Math.floor(3*Math.random()),n=Math.floor((c+e)/2)-1+Math.floor(3*Math.random()),H="MobyDick");e=!0;0==f?(e=!1,f=c):(f-=Number(l),1>=f&&(f=1));w=[];f={StatisticName:"TrophyCount",Version:"0",
Value:f};w.push(f);f={StatisticName:"League",Version:"0",Value:x};w.push(f);f={StatisticName:"TotalGames",Version:"0",Value:a};w.push(f);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:w});a={trophyWin:n,trophyLose:l,lastOpp:t+","+I,quitLastGame:"true"};0==e&&(a.trophyWin=0,a.trophyLose=0);1==B&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:H,PosData:D.Data[u+"_"+z+"_RecPos"].Value,RotData:D.Data[u+"_"+z+
"_RecRot"].Value,HeaderData:D.Data[u+"_"+z+"_RecHeader"].Value,TrophyLose:l,TrophyWin:n,Opp:C.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var c=server.GetUserInventory({PlayFabId:currentPlayerId}),e=[],f="-1",d={},g={PaintJobs:{itemOwned:"no",itemCustData:b.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:b.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:b.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:b.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:b.wsId,carItemId:"WindshieldId"}},a=0;a<c.Inventory.length;a++)c.Inventory[a].ItemId==b.carId&&"CarsProgress"==c.Inventory[a].CatalogVersion&&(f=c.Inventory[a].ItemInstanceId),c.Inventory[a].ItemId in g&&(g[c.Inventory[a].ItemId].itemOwned="yes",g[c.Inventory[a].ItemId].itemCustData in c.Inventory[a].CustomData?d[g[c.Inventory[a].ItemId].carItemId]=g[c.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+c.Inventory[a].ItemId+" "+g[c.Inventory[a].ItemId].itemCustData));if("-1"==
f)return generateFailObj("User does not own car with id: "+b.carId);for(var k in g)g.hasOwnProperty(k)&&"no"==g[k].itemOwned&&e.push(k);if(d=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:d});k=[{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:d}];if(0<e.length)for(e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e}),c={0:"Owned"},
a=0;a<e.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[a].ItemInstanceId,Data:c});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:k}}};
function upgradeCar(b,h,a,c){for(var e=server.GetCatalogItems({CatalogVersion:"CarCards"}),f=!1,d,g=0;g<h.Inventory.length;g++)if(h.Inventory[g].ItemId==b.carId&&"CarsProgress"==h.Inventory[g].CatalogVersion){f=!0;d=h.Inventory[g];break}for(var k,g=0;g<e.Catalog.length;g++)if(e.Catalog[g].ItemId==b.carId){k=JSON.parse(e.Catalog[g].CustomData);break}if(void 0===k)return generateErrObj("CardNotFoundForCarwithID: "+b.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===f){var l=parseInt(d.CustomData.CarLvl)+1;if(l>=Number(k.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var n=getObjectValueFromLevel(k,"currCostPerLvl",l),g=checkBalance(k.currType,n,a,c);if("OK"!=g)return g;a=getObjectValueFromLevel(k,"cardCostPerLvl",l);d.CustomData.CarLvl=l;for(var f=!1,p,g=0;g<h.Inventory.length;g++)if(h.Inventory[g].ItemId==b.carId&&"CarCards"==h.Inventory[g].CatalogVersion){f=!0;try{if(void 0===h.Inventory[g].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===h.Inventory[g].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(h.Inventory[g].CustomData.Amount)>=a)h.Inventory[g].CustomData.Amount-=a,p={Amount:h.Inventory[g].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.Inventory[g].ItemInstanceId,Data:p});else return generateFailObj("Insufficient cards for real: "+h.Inventory[g].CustomData.Amount+" vs "+a)}catch(B){return generateFailObj("Insufficient cards")}break}if(!1===
f)return generateFailObj("No cards found");h=recalculateCarPr(d.CustomData,d.ItemId,e,void 0);g={CarLvl:l,Pr:h};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemInstanceId,Data:g});var r;0<n&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:k.currType,Amount:n}),updateCurrencySpentStatistic(k.currType,n));b=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:g}];p=
{};g={Inventory:b};void 0!=r&&(p[r.VirtualCurrency]=r.Balance,g.VirtualCurrency=p);g.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+k.rarity,l,!0);return generateInventoryChange("InventoryUpdate",g)}f=!1;for(g=0;g<h.Inventory.length;g++)if(h.Inventory[g].ItemId==b.carId&&"CarCards"==h.Inventory[g].CatalogVersion){f=!0;try{if(void 0===h.Inventory[g].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===h.Inventory[g].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(h.Inventory[g].CustomData.Amount)>=Number(k.cardCostPerLvl[1]))n=h.Inventory[g].ItemInstanceId,h.Inventory[g].CustomData.Amount-=k.cardCostPerLvl[1],p={Amount:h.Inventory[g].CustomData.Amount};else return generateFailObj("Insufficient cards: "+h.Inventory[g].CustomData.Amount+" vs "+k.cardCostPerLvl[1]+".")}catch(B){return generateFailObj("Insufficient cards: "+B)}break}if(0==f)return generateFailObj("No cards found");g=checkBalance(k.currType,k.currCostPerLvl[1],a,c);if("OK"!=g)return g;
d=[];d.push(b.carId);d=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:d});if(!1===d.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:n,Data:p});0<k.currCostPerLvl[1]&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:k.currType,Amount:k.currCostPerLvl[1]}),updateCurrencySpentStatistic(k.currType,k.currCostPerLvl[1]));g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:g});g={TiresLvl:"0",TurboLvl:"0",PaintId:k.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,
Data:g});g={PlatesId:"0",WindshieldId:"0",Pr:Number(k.basePr)+k.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:g});e=d=!1;for(g=0;g<h.Inventory.length;g++)if("PaintJobs"==h.Inventory[g].ItemId){e=!0;void 0!=h.Inventory[g].CustomData?k.defaultPaintID in h.Inventory[g].CustomData?d=!0:(l={},l[k.defaultPaintID]="Owned"):(l={},l[k.defaultPaintID]="Owned");void 0!=l&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:h.Inventory[g].ItemInstanceId,Data:l});break}0==e&&(paintToGive=[],paintToGive.push("PaintJobs"),h=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),l={},l[k.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:l}));g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:k.defaultPaintID,
DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:Number(k.basePr)+k.prPerLvl[1]};b=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:g}];0==d&&(p={},p[k.defaultPaintID]="Owned",b.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:p}));p={};g={Inventory:b};void 0!=r&&(p[r.VirtualCurrency]=r.Balance,g.VirtualCurrency=p);g.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+k.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",
g)}
function upgradePart(b,h,a,c){for(var e=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),f=!1,d=0;d<e.Catalog.length;d++)if(e.Catalog[d].ItemId==b.carId){f=!0;break}if(!1===f)return generateErrObj("car with ID: "+b.carId+" not found in catalog.");for(var e=server.GetCatalogItems({CatalogVersion:"PartCards"}),f=!1,g,d=0;d<e.Catalog.length;d++)if(e.Catalog[d].ItemId==b.partId){g=JSON.parse(e.Catalog[d].CustomData);f=!0;break}if(0==f)return generateErrObj("part with ID: "+b.partId+" not found in catalog.");for(var f=
!1,k,d=0;d<h.Inventory.length;d++)if(h.Inventory[d].ItemId==b.carId&&"CarsProgress"==h.Inventory[d].CatalogVersion){f=!0;k=h.Inventory[d];break}if(!1===f)return generateFailObj("car with ID: "+b.carId+" not found in user inventory.");for(var l=!1,f=0,n={},d=0;d<h.Inventory.length;d++)if(h.Inventory[d].ItemId==b.partId&&"PartCards"==h.Inventory[d].CatalogVersion){var l=!0,p={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},f=
parseInt(k.CustomData[p[b.partId]])+1;if(f>=Number(g.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var r=getObjectValueFromLevel(g,"cardCostPerLvl",f),B=getObjectValueFromLevel(g,"currCostPerLvl",f);n[p[b.partId]]=f;k.CustomData[p[b.partId]]=f;var F;a=checkBalance(g.currType,B,a,c);if("OK"!=a)return a;try{if(void 0!==h.Inventory[d].CustomData&&void 0!==h.Inventory[d].CustomData.Amount&&h.Inventory[d].CustomData.Amount>=r)h.Inventory[d].CustomData.Amount-=r,F={Amount:h.Inventory[d].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.Inventory[d].ItemInstanceId,Data:F});else return generateFailObj("Insufficient cards")}catch(E){return generateFailObj("Insufficient cards")}break}if(0==l)return generateFailObj("Part not found");var A;0<B&&(A=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g.currType,Amount:B}),updateCurrencySpentStatistic(g.currType,B));d=recalculateCarPr(k.CustomData,k.ItemId,void 0,e);n.Pr=d;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:k.ItemInstanceId,Data:n});k={};d={Inventory:[{ItemId:b.partId,CatalogVersion:"PartCards",CustomData:F},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:n}]};void 0!==A&&(k[A.VirtualCurrency]=A.Balance,d.VirtualCurrency=k);d.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+g.rarity,f,!0);return generateInventoryChange("InventoryUpdatePart",d)};
