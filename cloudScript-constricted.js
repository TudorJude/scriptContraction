function checkCarDataValidity(b,k){if(void 0==b.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});for(var d=0,e=0;e<k.Catalog.length;e++)if(k.Catalog[e].ItemId==b.ItemId){var c=
JSON.parse(k.Catalog[e].CustomData),d=parseInt(c.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a})}catch(h){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:d}}return"OK"}function generateFailObj(b){return{Result:"Failed",Message:b}}
function generateErrObj(b){return{Result:"Error",Message:b}}
function CheckMaintenanceAndVersion(b){var k=!1,a="A.0.0.1";void 0!=b&&(k=b.debug,a=b.cVersion);if(void 0==a)return"update";b=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var d=b.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(d=b.Data.MinimumGameVersionActual_IOS);if(void 0==d)return"maintenance";for(var e=!1,d=d.split("."),c=0;3>c;c++){var h=0;a.length>c+1&&(h=Number(a[c+1]));var f=0;d.length>c&&
(f=Number(d[c]));if(h!=f){h<f&&(e=!0);break}}return 1==e?"update":1==k?"OK":b.Data.Maintenance?"false"==b.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(b){return"maintenance"==b?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(b,k){return{Result:"OK",Message:b,InventoryChange:k}}
function publishToLiveFeed(b,k,a){var d=server.GetTitleData({Keys:["LiveFeedDictionary"]});if(void 0!=d.Data.LiveFeedDictionary){var e=JSON.parse(d.Data.LiveFeedDictionary),c=d=0,h=1,f=1,g=k,l=a,m=0,q=0,r=!1,u={};u.ts=(new Date).getTime();try{m=Number(e.MetaData.HealthDecayPerMinute),q=Number(e.MetaData.MaxFeedHistory)}catch(v){log.debug("invalid metadata");return}try{var d=d+Number(e.ActorData.Base.health),c=c+Number(e.ActorData.Base.damage),D=server.GetPlayerStatistics({PlayFabId:b,StatisticNames:["IAPValue",
"Trophies"]}).Statistics,A=Number(GetValueFromStatistics(D,"IAPValue",0)),C=Number(GetValueFromStatistics(D,"Trophies",0)),d=d+Number(e.ActorData.IAPValue.health)*A,c=c+Number(e.ActorData.IAPValue.damage)*A,d=d+Number(e.ActorData.Trophies.health)*C,c=c+Number(e.ActorData.Trophies.damage)*C}catch(v){log.debug("error at liveFeed actor: "+v);return}try{void 0!=e.ActionsData[k]&&(d+=Number(e.ActionsData[k].health),c+=Number(e.ActionsData[k].damage),g=e.ActionsData[k].id,"true"==e.ActionsData[k].isUnique&&
(r=!0),e.ActionsData[k].valMultiplier&&(h=Number(e.ActionsData[k].valMultiplier.health),f=Number(e.ActionsData[k].valMultiplier.damage)))}catch(v){log.debug("error at liveFeed action: "+v);return}try{1==isNaN(a)?void 0!=e.DirectObjectData[a]&&(d+=Number(e.DirectObjectData[a].health),c+=Number(e.DirectObjectData[a].damage),l=e.DirectObjectData[a].id):(d+=h*Number(a),c+=f*Number(a),l=a)}catch(v){log.debug("error at liveFeed object: "+v);return}k=server.GetPlayerCombinedInfo({PlayFabId:b,InfoRequestParameters:{GetUserAccountInfo:!0}});
var n;try{n=k.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}catch(v){log.debug("error at liveFeed nameget: "+v);return}log.debug("10");u.health=d;u.currentHealth=d;u.UserId=b;u.UserName=n;u.Action=g;u.Object=l;b=server.GetTitleInternalData({Keys:["LiveFeed"]});log.debug("11");if(void 0!=b.Data.LiveFeed&&(log.debug("12"),b=JSON.parse(b.Data.LiveFeed),"OK"==ApplyDamageOverTimeToFeed(b,m))){var t;try{if(Number(q)<=Number(b.length)||1==r){log.debug("13");t=Array(b.length);for(var m=!1,p=0;p<b.length;p++)if(b[p].Action==
g&&1==r||b[p].currentHealth<c&&0==r){m=!0;b.splice(p,1);break}0==m&&b.splice(t.length-1,1);for(p=0;p<b.length;p++)if(b[p].currentHealth<d){b.splice(p,0,u);t=b;break}}else for(t=Array(b.length+1),t[b.length]=u,p=0;p<b.length;p++)if(t[p]=b[p],b[p].currentHealth<d){for(t[p]=u;p<b.length;p++)t[p+1]=b[p];break}}catch(v){log.debug("found error at feed replace/add: "+v);return}t=JSON.stringify(t);server.SetTitleInternalData({Key:"LiveFeed",Value:t})}}}
function ApplyDamageOverTimeToFeed(b,k){if(void 0==b.length)return"Error";for(var a=(new Date).getTime(),d=0,e=0;e<b.length;e++)try{d=Math.abs(Number(b[e].ts)-Number(a))*Number(k),d/=6E4,d=Math.floor(d),b[e].currentHealth=Math.max(Number(b[e].health)-Number(d),0)}catch(c){b.splice(e,1)}return"OK"}
function updateUserProfileInfo(b,k){var a={};a.CarData=k;log.debug("carInfo is: "+k);var d=[];d.push({Key:"UserProfileInfo",Value:JSON.stringify(a)});a=server.UpdateUserReadOnlyData({PlayFabId:b,Data:d,Permission:"Public"});log.debug("playerData is: "+a)}
function updateCurrencySpentStatistic(b,k){var a=[],d,e=0,c=Number(k);if(!(isNaN(c)||0>=c)&&("SC"==b&&(d="MoneySpent"),"HC"==b&&(d="GoldSpent"),void 0!=d)){var h=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:[d]});0<h.Statistics.length&&(e=Number(h.Statistics[0].Value));a.push({StatisticName:d,Version:"0",Value:e+c});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a})}}
function checkBalance(b,k,a,d){if("SC"==b){if(a<k)return generateFailObj("NotEnoughSC")}else if(d<k)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(b){var k=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==k.Data.LeagueSubdivisions||void 0==k.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(k.Data.LeagueSubdivisions).leagues,k=JSON.parse(k.Data.SubdivisionTrophyRanges).subdivisions,d=0;d<a.length;d++)if(!(Number(b)>Number(k[a[d]])))return d;return a.length-1}
function recalculateCarPr(b,k,a,d){var e=0,c;c=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<c.Catalog.length;a++)if(c.Catalog[a].ItemId==k){e=JSON.parse(c.Catalog[a].CustomData);e=parseInt(e.basePr)+getObjectValueFromLevel(e,"prPerLvl",b.CarLvl);break}d=void 0===d?server.GetCatalogItems({CatalogVersion:"PartCards"}):d;b={Exhaust:b.ExhaustLvl,Engine:b.EngineLvl,Gearbox:b.GearboxLvl,Suspension:b.SuspensionLvl,Tires:b.TiresLvl,Turbo:b.TurboLvl};for(a=0;a<d.Catalog.length;a++)k=
JSON.parse(d.Catalog[a].CustomData),e+=getObjectValueFromLevel(k,"prPerLvl",Number(b[d.Catalog[a].ItemId]));return e}
function GenerateBlackMarket(b){var k=1,a=server.GetPlayerStatistics({PlayFabId:b,StatisticNames:["League"]});0!=a.Statistics.length&&(k=a.Statistics[0].Value.toString());0>=Number(k)&&(k=1);for(var d=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:b,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),e=JSON.parse(a.Data.BlackMarketRarityBias),c,h=[],f=[],g=[],l=0;l<d.Catalog.length;l++){c=JSON.parse(d.Catalog[l].CustomData);if(void 0==c)return generateErrObj("Part card "+
d.Catalog[l].ItemId+" has no custom data.");0==c.rarity&&h.push(d.Catalog[l].ItemId+"_"+c.BMCurrType+"_"+c.BMbasePrice+"_0_"+c.BMpriceIncrPerBuy);1==c.rarity&&f.push(d.Catalog[l].ItemId+"_"+c.BMCurrType+"_"+c.BMbasePrice+"_0_"+c.BMpriceIncrPerBuy);2==c.rarity&&g.push(d.Catalog[l].ItemId+"_"+c.BMCurrType+"_"+c.BMbasePrice+"_0_"+c.BMpriceIncrPerBuy)}d={};d.BMTime=(new Date).getTime();l=Math.floor(Math.random()*h.length);d.BMItem0=h[l];2<=h.length&&h.splice(l,1);Math.floor(100*Math.random())<Number(e.parts[2])?
h=g:(l=Number(e.parts[0])+Number(e.parts[1]),Math.floor(Math.random()*l)>=Number(e.parts[0])&&(h=f));d.BMItem1=h[Math.floor(Math.random()*h.length)];c=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var m,h=[],f=[],g=[],l=0;l<c.Catalog.length;l++){m=JSON.parse(c.Catalog[l].CustomData);if(void 0==m)return generateErrObj("Car card "+c.Catalog[l].ItemId+" has no custom data.");Number(m.unlockedAtRank)>=Number(k)+1||("0"==m.rarity&&h.push(c.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+
"_0_"+m.BMpriceIncrPerBuy),"1"==m.rarity&&f.push(c.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy),"2"==m.rarity&&g.push(c.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy))}k=Math.floor(Math.random()*h.length);d.BMItem2=h[k];2<=h.length&&h.splice(k,1);0>=f.length&&(0>=g.length?g=f=h:f=g);0>=g.length&&(g=f);Math.floor(100*Math.random())<Number(e.cars[2])?h=g:(l=Number(e.cars[0])+Number(e.cars[1]),Math.floor(Math.random()*l)>=Number(e.cars[0])&&
(h=f));k=Math.floor(Math.random()*h.length);d.BMItem3=h[k];server.UpdateUserInternalData({PlayFabId:b,Data:d});d.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return d}function GetCurrentBlackMarket(b,k){var a={},d=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:b,Keys:e});a.BMTime=60*parseInt(e.Data.BlackMarketResetMinutes)-Math.floor((d.getTime()-k.Data.BMTime.Value)/1E3);for(d=0;4>d;d++)a["BMItem"+d]=k.Data["BMItem"+d].Value;return a}
function GetValueFromStatistics(b,k,a){for(var d,e=0;e<b.length;e++)b[e].StatisticName===k&&(d=b[e]);return void 0===d?void 0!==a?a:0:Number(d.Value)}function GetVersionFromStatistics(b,k,a){for(var d,e=0;e<b.length;e++)b[e].StatisticName===k&&(d=b[e]);return void 0===d?void 0!==a?a:0:Number(d.Version)}function getCatalogItem(b,k){for(var a=server.GetCatalogItems({CatalogVersion:b}),d=0;d<a.Catalog.length;d++)if(a.Catalog[d].ItemId===k)return a.Catalog[d]}
function getObjectValueFromLevel(b,k,a,d){d||(d=0);if(!b[k]||!b[k].length)return d;var e=Number(b[k].length);a>=e&&(a=e-1);return Number(b[k][a])||d}function GiveUserPart(b,k,a,d){GiveUserCard(b,"PartsCards",k,a,d)}function GiveUserCarCard(b,k,a,d){GiveUserCard(b,"CarCards",k,a,d)}
function GiveUserCard(b,k,a,d,e){a=Number(a)<Number(d)?Number(a)+Math.floor(Math.random()*(Number(d)-Number(a))):Number(a);log.debug("cardsAmount: "+a);var c,h;for(d=0;d<e.Inventory.length;d++)if(e.Inventory[d].ItemId==b&&e.Inventory[d].CatalogVersion==k){c=e.Inventory[d].ItemInstanceId;h=void 0==e.Inventory[d].CustomData?a:void 0==e.Inventory[d].CustomData.Amount?a:isNaN(Number(e.Inventory[d].CustomData.Amount))?a:Number(e.Inventory[d].CustomData.Amount)+Number(h);break}if(void 0==c&&(h=a,c=[],c.push(b),
c=server.GrantItemsToUser({CatalogVersion:k,PlayFabId:e.PlayFabId,ItemIds:c}).ItemGrantResults[0].ItemInstanceId,void 0===c))return generateErrObj("grantRequest denied");a={Amount:h};log.debug("new amount is: "+h);server.UpdateUserInventoryItemCustomData({PlayFabId:e.PlayFabId,ItemInstanceId:c,Data:a});return{ItemId:b,CatalogVersion:k,CustomData:a}}
handlers.buyChest=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(b.curr,b.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<b.cost){a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.cost});updateCurrencySpentStatistic(b.curr,b.cost);var d={};d[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",
{VirtualCurrency:d})}return generateInventoryChange("ChestBought",{})};
handlers.claimDailyMission=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a=Number(b.mIdx),d=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==d.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e=JSON.parse(e.Data.DailyMissionData),c=e.missionData[a].split("_"),d=JSON.parse(d.Data.DailyMissionStatus.Value),
h=d.dailyMissionClaimStatus;if(a>=h.length)return generateErrObj("Unlock index is out of bounds of playerData claim mission status array");if(1==h[a])return generateFailObj("Mission already claimed");h[a]=1;d={DailyMissionStatus:JSON.stringify({DailyStatus:d.DailyStatus,dailyMissionClaimStatus:h,timeStamp:d.timeStamp})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});if(a>=e.missionData.length)return generateErrObj("Unlock index is out of bounds of titleData claim mission reward array");
a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c[1],Amount:Number(c[2])});e={};e[a.VirtualCurrency]=a.Balance;return generateInventoryChange("MissionClaimed",{VirtualCurrency:e})};
handlers.endDaily=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==a.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e;tParsed=JSON.parse(d.Data.DailyMissionData);e=Number(tParsed.minutesToRefresh);for(var c=JSON.parse(a.Data.DailyMissionStatus.Value),
a=c.dailyMissionClaimStatus,h,d=-1,f=0;f<tParsed.missionData.length;f++)h=tParsed.missionData[f].split("_"),4>h.length&&generateErrObj("Title data is invalid!"),"OFF"==h[3]&&(a[f]=-1);for(f=0;f<c.dailyMissionClaimStatus.length;f++)if(-1!=a[f]&&0==a[f])return generateErrObj("Not all missions were claimed!");a=[0,0,0,0,0,0,0,0];f=new Date;f.getTime()-Number(c.timeStamp)>6E4*Number(e)?(h=2,f=f.getTime()):(h=0,d=60*Number(e)-Math.floor((f.getTime()-Number(c.timeStamp))/1E3),f=c.timeStamp);f={DailyMissionStatus:JSON.stringify({DailyStatus:h,
dailyMissionClaimStatus:a,timeStamp:f})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:f});e=server.GetUserInventory({PlayFabId:currentPlayerId});for(var g in b.currencyReq)0<b.currencyReq[g]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g,Amount:b.currencyReq[g]});for(g in b.carCardsRequest)if(b.carCardsRequest.hasOwnProperty(g)){c=!1;for(f=0;f<e.Inventory.length;f++)if(e.Inventory[f].ItemId==g&&"CarCards"==e.Inventory[f].CatalogVersion){c=void 0==e.Inventory[f].CustomData?
Number(b.carCardsRequest[g]):void 0==e.Inventory[f].CustomData.Amount?Number(b.carCardsRequest[g]):isNaN(Number(e.Inventory[f].CustomData.Amount))?Number(b.carCardsRequest[g]):Number(e.Inventory[f].CustomData.Amount)+Number(b.carCardsRequest[g]);c={Amount:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[f].ItemInstanceId,Data:c});c=!0;break}0==c&&(f=[g],f=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:f}),c={Amount:b.carCardsRequest[g]},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:c}))}for(g in b.partCardsRequest)if(b.partCardsRequest.hasOwnProperty(g)){c=!1;for(f=0;f<e.Inventory.length;f++)if(e.Inventory[f].ItemId==g&&"PartCards"==e.Inventory[f].CatalogVersion){c=void 0==e.Inventory[f].CustomData?Number(b.partCardsRequest[g]):void 0==e.Inventory[f].CustomData.Amount?Number(b.partCardsRequest[g]):isNaN(Number(e.Inventory[f].CustomData.Amount))?Number(b.partCardsRequest[g]):
Number(e.Inventory[f].CustomData.Amount)+Number(b.partCardsRequest[g]);c={Amount:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[f].ItemInstanceId,Data:c});c=!0;break}0==c&&(f=[g],f=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:f}),c={Amount:b.partCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:c}))}return{Result:"OK",
Message:"DailyCompleted",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId}),DailyStatus:{status:h,claimStatus:a,timeRemaining:d}}};
handlers.endGame=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),a=0,e,c=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=c.Statistics.length&&(a=c.Statistics[0].Value,1==b.debug&&log.debug("getting trophy count "+c.Statistics[0].Value));e=a=Number(a);var h=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose",
"trophyWin","LastGameOutcome","LatestStreak"]}),c=void 0==h.Data.trophyLose||void 0==h.Data.trophyWin?45:Number(h.Data.trophyLose.Value)+Number(h.Data.trophyWin.Value),f=0,g="Loss";void 0!=h.Data.LatestStreak&&(f=Number(h.Data.LatestStreak.Value));1==isNaN(f)&&(f=0);void 0!=h.Data.LatestStreak&&(g=h.Data.LastGameOutcome.Value);void 0==g&&(g="Loss");h={quitLastGame:"false",LastGameOutcome:"Loss"};"rWin"==b.outcome&&(a+=c,h.LastGameOutcome="Win","Loss"==g?f=1:f++,ldata=server.GetLeaderboard({StatisticName:"TrophyCount",
StartPosition:0,MaxResultsCount:1}),null!=ldata.Leaderboard&&(1==b.debug&&log.debug("leaderboardData: "+ldata.Leaderboard[0]),ldata.Leaderboard[0].PlayFabId==currentPlayerId?1==b.debug&&log.debug("ALREADY IN FIRST PLACE IN LEADERBOARD"):(1==b.debug&&log.debug("WASN'T FIRST PLACE"),Number(ldata.Leaderboard[0].StatValue)<a&&(1==b.debug&&log.debug("BUT HE IS NOW!"),publishToLiveFeed(currentPlayerId,"topPlayer",a)),1==b.debug&&log.debug("DIFF: "+Number(ldata.Leaderboard[0].StatValue)+" vs "+a))));h.LatestStreak=
f;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:h});var g=JSON.parse(b.recordingHeader),l=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Wins","TotalGamesCompleted","LongestWinStreak","BestDriftScore","HighestLeagueReached"]}).Statistics,c=calculateLeague(a),h=GetValueFromStatistics(l,"TotalGamesCompleted",0),h=Number(h)+1,m=GetValueFromStatistics(l,"Wins",0);"rWin"==b.outcome&&(m=Number(m)+1);var q=GetValueFromStatistics(l,"LongestWinStreak",0);GetVersionFromStatistics(l,
"LongestWinStreak",0);Number(q)<f&&(q=f,2<c&&(10==Number(q)&&publishToLiveFeed(currentPlayerId,"winStreak",10),15==Number(q)&&publishToLiveFeed(currentPlayerId,"winStreak",15),20==Number(q)&&publishToLiveFeed(currentPlayerId,"winStreak",20)));f=GetValueFromStatistics(l,"BestDriftScore",0);Number(g.Score)>f&&(f=Number(g.Score));l=GetValueFromStatistics(l,"HighestLeagueReached",1);Number(c)>Number(l)&&(l=c,2<l&&publishToLiveFeed(currentPlayerId,"arenaUnlocked",Number(c)));var r=[];r.push({StatisticName:"TrophyCount",
Value:a});r.push({StatisticName:"League",Value:c});r.push({StatisticName:"Wins",Value:m});r.push({StatisticName:"TotalGamesCompleted",Value:h});r.push({StatisticName:"LongestWinStreak",Value:q});r.push({StatisticName:"BestDriftScore",Value:f});r.push({StatisticName:"HighestLeagueReached",Value:l});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:r});if(100>=Number(g.Score))return a={TrophyCount:a,League:c},{Result:a};g=JSON.parse(d.Data.SubdivisionTrophyRanges);d=43;for(f=0;f<g.subdivisions.length;f++)if(e<
g.subdivisions[f]){d=f;break}e=[];e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecPos",Value:b.recordingPos});e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecRot",Value:b.recordingRot});e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecHeader",Value:b.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e});e=server.GetTitleInternalData({Key:"RecSubDivision"+d}).Data["RecSubDivision"+d];if(void 0==e)e=[],g={e:b.envIndex,c:b.courseIndex,uId:currentPlayerId},e.push(g);else{e=JSON.parse(e);
g={e:b.envIndex,c:b.courseIndex,uId:currentPlayerId};h=!1;for(f=m=0;f<e.length;f++)e[f].uId==currentPlayerId&&m++;if(2<m)return a={TrophyCount:a,League:c},{Result:a};for(f=0;f<e.length;f++)e[f].e==b.envIndex&&e[f].c==b.courseIndex&&(h=!0,e[f]=g);0==h&&e.push(g)}e=JSON.stringify(e);server.SetTitleInternalData({Key:"RecSubDivision"+d,Value:e});a={TrophyCount:a,League:c};return{Result:a}};
function UpdateExperience(b,k,a,d,e,c){b=JSON.parse(getCatalogItem(b,k).CustomData)[a];k=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;k=k[k.length-1];c=c||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;c=GetValueFromStatistics(c,"Experience",0);if(c>=k)return k;if(isNaN(Number(b)))a=Number(b.length),d>=a&&(d=a-1),d=Number(b[d]);else if(d=Number(b),0===d)return c;c=Math.min(c+d,k);if(!e)return c;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:c}]});return c}
handlers.generateDaily=function(b,k){var a,d=new Date;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var e=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(e.DailyStatus);if(0==a){var d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),c;tParsed=JSON.parse(d.Data.DailyMissionData);c=Number(tParsed.minutesToRefresh);d=new Date;d.getTime()-Number(e.timeStamp)>6E4*Number(c)&&(a=1)}if(1!=a)return generateErrObj("DailyStatus is: "+
a+". Should be 1")}a=2;d=d.getTime();a={DailyMissionStatus:JSON.stringify({DailyStatus:a,dailyMissionClaimStatus:[0,0,0,0,0,0,0,0],timeStamp:d})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK"}};
handlers.getDailyMissionStatus=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d,a=[0,0,0,0,0,0,0,0],e=-1;d=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=d.Data.DailyMissionStatus){var c=JSON.parse(d.Data.DailyMissionStatus.Value);d=Number(c.DailyStatus);var h=a.length;h>c.dailyMissionClaimStatus.length&&(h=c.dailyMissionClaimStatus.length);for(var f=0;f<h;f++)a[f]=c.dailyMissionClaimStatus[f];
0==d&&(h=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),tParsed=JSON.parse(h.Data.DailyMissionData),h=Number(tParsed.minutesToRefresh),f=new Date,f.getTime()-Number(c.timeStamp)>6E4*Number(h)?(d=2,a=[0,0,0,0,0,0,0,0],c=f.getTime(),c={DailyStatus:d,dailyMissionClaimStatus:a,timeStamp:c},c=JSON.stringify(c),c={DailyMissionStatus:c},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c})):e=60*Number(h)-Math.floor((f.getTime()-Number(c.timeStamp))/1E3))}else d=2,
f=new Date,c=f.getTime(),c={DailyStatus:d,dailyMissionClaimStatus:a,timeStamp:c},c=JSON.stringify(c),c={DailyMissionStatus:c},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});return{Result:"OK",Message:" ",DailyStatus:{status:d,claimStatus:a,timeRemaining:e}}};
handlers.getLiveFeed=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetTitleInternalData({Keys:"LiveFeed"});return void 0==a||void 0==a.Data.LiveFeed?generateErrObj("No LivefeedFound"):{Result:"OK",Feed:JSON.parse(a.Data.LiveFeed)}};handlers.getServerTime=function(b,k){return{time:new Date}};
handlers.iapMade=function(b,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["IAPValue"]}).Statistics,d=Number(GetValueFromStatistics(a,"IAPValue",0));switch(b.bundle){case "co.tamatem.downshiftdrift.gold01":d+=99;break;case "co.tamatem.downshiftdrift.gold02":d+=499;break;case "co.tamatem.downshiftdrift.gold03":d+=2499;break;case "co.tamatem.downshiftdrift.gold04":d+=2499;break;case "co.tamatem.downshiftdrift.gold05":d+=4999;break;case "co.tamatem.downshiftdrift.gold06":d+=
9999;break;case "co.tamatem.downshiftdrift.bundle01":var d=d+599,e=server.GetUserInventory({PlayFabId:currentPlayerId}),c=server.GetCatalogItems({CatalogVersion:"BMBundleInfo"}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["HighestLeagueReached"]}).Statistics,a=Number(GetValueFromStatistics(a,"HighestLeagueReached",1)),h="bundle01league",h=10>a?h+"0"+a:h+a;1==b.debug&&log.debug("consuming: "+h);for(var f,a=0;a<c.Catalog.length;a++)if(c.Catalog[a].ItemId==h){f=JSON.parse(c.Catalog[a].CustomData);
break}if(void 0==f)return generateErrObj("Catalog item: "+h+" not found");for(a=0;a<e.Inventory.length;a++)if(e.Inventory[a].ItemId==b.bundle){try{server.ConsumeItem({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[a].ItemInstanceId,ConsumeCount:1})}catch(m){return generateErrObj("err: "+m)}var g;g=[];var l={};if(void 0!=f.HCRange){1==b.debug&&log.debug("found HCRange: "+f.HCRange);c=f.HCRange.split(",");if(2<=c.length)c=Number(c[0])<Number(c[1])?Number(c[0])+Math.floor(Math.random()*(Number(c[1])-
Number(c[0]))):Number(c[0]);else return generateErrObj("Catalog data corrupt");0<c&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:c}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.SCRange){1==b.debug&&log.debug("found SCRange: "+f.SCRange);c=f.SCRange.split(",");if(2<=c.length)c=Number(c[0])<Number(c[1])?Number(c[0])+Math.floor(Math.random()*(Number(c[1])-Number(c[0]))):Number(c[0]);else return generateErrObj("Catalog data corrupt");
0<c&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:c}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.Engine)if(1==b.debug&&log.debug("found Engine: "+f.Engine),c=f.Engine.split(","),2<=c.length)c=GiveUserPart("Engine",c[0],c[1],e),g.push(c);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Exhaust)if(1==b.debug&&log.debug("found Exhaust: "+f.Exhaust),c=f.Exhaust.split(","),2<=c.length)c=
GiveUserPart("Exhaust",c[0],c[1],e),g.push(c);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Gearbox)if(1==b.debug&&log.debug("found Gearbox: "+f.Gearbox),c=f.Gearbox.split(","),2<=c.length)c=GiveUserPart("Gearbox",c[0],c[1],e),g.push(c);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Suspension)if(1==b.debug&&log.debug("found Suspension: "+f.Suspension),c=f.Suspension.split(","),2<=c.length)c=GiveUserPart("Suspension",c[0],c[1],e),g.push(c);else return generateErrObj("Catalog data corrupt");
if(void 0!=f.Tires)if(1==b.debug&&log.debug("found Tires: "+f.Tires),c=f.Tires.split(","),2<=c.length)c=GiveUserPart("Tires",c[0],c[1],e),g.push(c);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Turbo)if(1==b.debug&&log.debug("found Turbo: "+f.Turbo),c=f.Turbo.split(","),2<=c.length)c=GiveUserPart("Turbo",c[0],c[1],e),g.push(c);else return generateErrObj("Catalog data corrupt");if(void 0!=f.CarCard&&(1==b.debug&&log.debug("found CarCard: "+f.CarCard),void 0!=f.CarCardAmount))if(1==
b.debug&&log.debug("found CarCardAmount: "+f.CarCardAmount),c=f.CarCardAmount.split(","),2<=c.length)c=GiveUserCarCard(f.CarCard,c[0],c[1],e),g.push(c);else return generateErrObj("Catalog data corrupt");void 0!=f.ChestModel&&1==b.debug&&log.debug("found ChestModel: "+f.ChestModel)}e=[];d={StatisticName:"IAPValue",Value:d};e.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});g={Inventory:g,VirtualCurrency:l};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:g};
default:1==b.debug&&log.debug("InvalidPurchaseParameter")}e=[];d={StatisticName:"IAPValue",Value:d};e.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});publishToLiveFeed(currentPlayerId,"boughtIAP",b.bundle)};
handlers.initServerData=function(b){b=[];var k={StatisticName:"TrophyCount",Version:"0",Value:"0"};b.push(k);k={StatisticName:"League",Version:"0",Value:"0"};b.push(k);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var k={0:"Owned"},a=0;a<b.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[a].ItemInstanceId,Data:k});b=[];b.push("FordFocus");b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b});k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k});k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k});k={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k});k=[];k.push("Engine");k=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});k={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k})};
handlers.openChest=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<b.levelUpRewardIndex){var d=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),e={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}):d=a.Data.LastLevelReward.Value;var c=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,h=GetValueFromStatistics(a,"Experience",0);0==h&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var f=c.length,a=0;a<c.length;a++)if(!(h>=c[a])){f=a;break}if(Number(b.levelUpRewardIndex)<=Number(d))return generateFailObj("already got reward for level: "+d);if(Number(b.levelUpRewardIndex)<=Number(f))d=Number(b.levelUpRewardIndex),e.LastLevelReward=d,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:e}),a=""+d,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",PlayFabId:currentPlayerId,ItemIds:a}),2<Number(f)&&publishToLiveFeed(currentPlayerId,"levelUp",Number(f));else return generateFailObj("You haven't reached this level yet")}d=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<b.currCost){if("OK"!=checkBalance(b.currType,b.currCost,d.VirtualCurrency.SC,d.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:b.currType,Amount:b.currCost});updateCurrencySpentStatistic(b.currType,b.currCost)}for(var g in b.currencyReq)0<b.currencyReq[g]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g,Amount:b.currencyReq[g]});for(g in b.carCardsRequest)if(b.carCardsRequest.hasOwnProperty(g)){e=!1;for(a=0;a<d.Inventory.length;a++)if(d.Inventory[a].ItemId==g&&"CarCards"==d.Inventory[a].CatalogVersion){e=void 0==d.Inventory[a].CustomData?Number(b.carCardsRequest[g]):void 0==d.Inventory[a].CustomData.Amount?
Number(b.carCardsRequest[g]):isNaN(Number(d.Inventory[a].CustomData.Amount))?Number(b.carCardsRequest[g]):Number(d.Inventory[a].CustomData.Amount)+Number(b.carCardsRequest[g]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[g],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:b.carCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}for(g in b.partCardsRequest)if(b.partCardsRequest.hasOwnProperty(g)){e=!1;for(a=0;a<d.Inventory.length;a++)if(d.Inventory[a].ItemId==g&&"PartCards"==d.Inventory[a].CatalogVersion){e=void 0==d.Inventory[a].CustomData?Number(b.partCardsRequest[g]):void 0==d.Inventory[a].CustomData.Amount?Number(b.partCardsRequest[g]):isNaN(Number(d.Inventory[a].CustomData.Amount))?Number(b.partCardsRequest[g]):Number(d.Inventory[a].CustomData.Amount)+Number(b.partCardsRequest[g]);
e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[g],a=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:b.partCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}g=server.GetUserInventory({PlayFabId:currentPlayerId});b.chestId&&0>=b.levelUpRewardIndex&&
(d=UpdateExperience("Chests",b.chestId,"xpGain",0,!0),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["ChestsOpened"]}).Statistics,e=Number(GetValueFromStatistics(a,"ChestsOpened",0)),e++,a=[],a.push({StatisticName:"ChestsOpened",Value:e}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}),g.Experience=d);"DiamondChest"!=b.chestId&&"BigGoldChest"!=b.chestId&&"BigSilverChest"!=b.chestId||publishToLiveFeed(currentPlayerId,"unlockedChest",b.chestId);return generateInventoryChange("InventoryUpdated",
g)};
handlers.purchaseBMItem=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>b.itemId||3<b.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+b.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),d=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+b.itemId].Value.split("_"),e=d.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");var c;
c=2>b.itemId?"PartCards":"CarCards";var h=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),e=checkBalance(a[1],h,e,e);if("OK"!=e)return e;for(var f,g,e=0;e<d.Inventory.length;e++)if(d.Inventory[e].ItemId==a[0]&&d.Inventory[e].CatalogVersion==c){f=d.Inventory[e].ItemInstanceId;void 0===d.Inventory[e].CustomData?g={Amount:1}:void 0===d.Inventory[e].CustomData.Amount?g={Amount:1}:(g=Number(d.Inventory[e].CustomData.Amount)+1,isNaN(g)&&(g=1),g={Amount:g});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:f,Data:g});break}void 0===f&&(f=[],f.push(a[0]),f=server.GrantItemsToUser({CatalogVersion:c,PlayFabId:currentPlayerId,ItemIds:f}).ItemGrantResults[0].ItemInstanceId,void 0===f?generateErrObj("grantRequest denied"):(g={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:g})));f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:h});updateCurrencySpentStatistic(a[1],h);h=a[0]+"_"+a[1]+"_"+a[2]+"_"+
(parseInt(a[3])+1)+"_"+a[4];d={};d["BMItem"+b.itemId]=h;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});g=[{ItemId:a[0],CatalogVersion:c,CustomData:g}];c={};c[f.VirtualCurrency]=f.Balance;a=b.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];e={Inventory:g,VirtualCurrency:c};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:e,BMItemChange:a}};
handlers.purchaseItems=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=server.GetUserInventory({PlayFabId:currentPlayerId}),e=d.VirtualCurrency.SC,c=d.VirtualCurrency.HC;switch(b.purchaseType){case "carUpgrade":return upgradeCar(b,k,d,e,c);case "partUpgrade":return upgradePart(b,k,d,e,c);case "custPurchase":for(var h=server.GetCatalogItems({CatalogVersion:"Customization"}),f,g=0,a="SC",l=0;l<h.Catalog.length;l++)if(h.Catalog[l].ItemId==b.custId){f=
h.Catalog[l];cardInfo=JSON.parse(h.Catalog[l].CustomData);g=b.custVal+",Cost";a=cardInfo[b.custVal+",Curr"];g=cardInfo[g];c=checkBalance(a,g,e,c);if("OK"!=c)return c;break}if(void 0==f)return generateErrObj("Customization does not exist in catalog.");for(var m,q,l=0;l<d.Inventory.length;l++)if(d.Inventory[l].ItemId==b.custId){m=d.Inventory[l];q=d.Inventory[l].ItemInstanceId;if(void 0!=m.CustomData&&String(b.custVal)in m.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
m){log.info("user doesn't have customization category. Granting ... ");c=[];c.push(b.custId);c=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:c});if(0==c.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");q=c.ItemGrantResults[0].ItemInstanceId}c={};c[String(b.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:q,Data:c});q=[{ItemId:b.custId,
CatalogVersion:"Customization",CustomData:c}];0<g?(c=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:g}),updateCurrencySpentStatistic(a,g),a={},a[c.VirtualCurrency]=c.Balance,l={Inventory:q,VirtualCurrency:a}):l={Inventory:q};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":g=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});q=!1;for(l=a=0;l<g.Catalog.length;l++)if(g.Catalog[l].ItemId==b.packId){a=g.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(g.Catalog[l].CustomData);q=!0;break}if(0==q)return generateErrObj("pack with ID: "+b.packId+" not found in catalog.");if(0>=a)return generateErrObj("pack with ID: "+b.packId+" shouldn't have negative cost.");if(a>c)return generateFailObj("Not enough HC.");c=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:a});updateCurrencySpentStatistic("HC",a);g=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});
a={};a[g.VirtualCurrency]=g.Balance;a[c.VirtualCurrency]=c.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:a});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(b){b=CheckMaintenanceAndVersion(b);return"OK"!=b?generateMaintenanceOrUpdateObj(b):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(b){b=server.GetUserInventory({PlayFabId:currentPlayerId});var k=Number(b.VirtualCurrency.SC);if(isNaN(k)||0>k)k=0;var a=Number(b.VirtualCurrency.HC);if(isNaN(a)||0>a)a=0;var d=[];d.push({StatisticName:"CurrentMoney",Version:"0",Value:k});d.push({StatisticName:"CurrentGold",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:d});for(var k=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),
d=!1,e=0;e<b.Inventory.length;e++)if("CarsProgress"==b.Inventory[e].CatalogVersion){var d=!0,c=checkCarDataValidity(b.Inventory[e],k);if("PlayFabError"==c||void 0===c)return generateErrObj("PlayfabError");"OK"==c?log.debug("Data for "+b.Inventory[e].ItemId+" OK"):b.Inventory[e].CustomData=c;b.Inventory[e].CustomData.Pr=recalculateCarPr(b.Inventory[e].CustomData,b.Inventory[e].ItemId,k,a);c={};c.Pr=b.Inventory[e].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[e].ItemInstanceId,
Data:c})}return!1===d?(b=[],b.push("FordFocus"),b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b}),k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k}),k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,
Data:k}),k={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k}),generateErrObj("UserHasNoCars ... reiniting")):b};
handlers.retrieveBlackMarket=function(b,k){var a=CheckMaintenanceAndVersion(b);if(!0===b.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=[];d.push("BMTime");for(var e=0;4>e;e++)d.push("BMItem"+e);e=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:d});if(void 0===e.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var d=new Date,c=[];c.push("BlackMarketResetMinutes");c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:c});if(!0===b.reset){a="HC";e=200;d=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==d.Data.BlackMarketResetCost&&(e=d.Data.BlackMarketResetCost.split("_"),a=e[0],e=Number(e[1]));if(0<e){d=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,e,d.VirtualCurrency.SC,d.VirtualCurrency.HC))return generateFailObj("not enough money");d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:e});updateCurrencySpentStatistic(a,e);a=GenerateBlackMarket(currentPlayerId);e={};e[d.VirtualCurrency]=d.Balance;e={VirtualCurrency:e};
a.InventoryChange=e;return a}return GenerateBlackMarket(currentPlayerId)}return d.getTime()-parseInt(e.Data.BMTime.Value)>6E4*parseInt(c.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,e),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,e)};
handlers.rewardUsers=function(b,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,d=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),e=0;0>=d&&(a=Number(a)/3E3,e=Number(Math.floor(800*a)));d=Number(d)+e;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:d}]});return d};
handlers.setMainCar=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);log.debug("ayyy lmayonaisse");for(var a=server.GetUserInventory({PlayFabId:currentPlayerId}),d={},e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.carId&&"CarsProgress"==a.Inventory[e].CatalogVersion){d.carId=a.Inventory[e].ItemId;d.carData=a.Inventory[e].CustomData;updateUserProfileInfo(currentPlayerId,d);break}};
function updateProfileCar(b,k){log.debug("ayyy lmao");log.debug("context: "+JSON.stringify(k));var a=server.GetUserReadOnlyData({PlayFabId:userId,Keys:["UserProfileInfo"]});void 0!=a.UserProfileInfo&&void 0!=a.UserProfileInfo.Value&&JSON.parse(a.UserProfileInfo.Value).CarData.carId==b.carId&&handlers.setMainCar(b,k)}
handlers.startGame=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=server.GetTitleData({Key:"LeagueSubdivisions SubdivisionTrophyRanges TrophyGainRange TrophyLoseRange SubdivisionPrRanges TrophyDifferenceLimit".split(" ")}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TotalGames"]}).Statistics,a=GetValueFromStatistics(a,"TotalGames",0),a=Number(a)+1;1==b.debug&&log.debug("totalGamesStartedIs: "+a);var e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]}),c=0;0!=e.Statistics.length&&(c=e.Statistics[0].Value);for(var c=Number(c),h=JSON.parse(d.Data.SubdivisionTrophyRanges),f=JSON.parse(d.Data.LeagueSubdivisions),g=JSON.parse(d.Data.SubdivisionPrRanges),e=JSON.parse(d.Data.TrophyDifferenceLimit),l=Number(e.trophyReadjustRange),m=Number(e.maxDifference),q=e.subDivisionsToExclude,r=43,u=43,D,A=d.Data.TrophyGainRange.split("_"),C=d.Data.TrophyLoseRange.split("_"),e=Number(A[0]),d=Number(A[1]),A=Number(C[0]),C=Number(C[1]),
n=0;n<h.subdivisions.length;n++)if(c<Number(h.subdivisions[n])){r=n;n<h.subdivisions.length-1&&(u=n+1);break}D=Number(h.subdivisions[u])-Number(h.subdivisions[r]);0>=D&&(D=400);var t=server.GetTitleInternalData({Keys:"RecSubDivision"+r}).Data["RecSubDivision"+r],p=!1;void 0==t&&(p=!0);var v,w,B,I="noop",x="noop",n=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp","quitLastGame"]});w="false;";void 0!=n.Data.quitLastGame&&(w=n.Data.quitLastGame.Value);u=!1;void 0==w&&(w="false");
"true"==w&&(u=!0);if(void 0==n.Data||void 0==n.Data.lastOpp)x=I="noop";else for(w=n.Data.lastOpp.Value.split(","),n=0;n<w.length;n++)0==n&&(I=w[n]),1==n&&(x=w[n]);v=0==p?JSON.parse(t):[];var G=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>v.length&&(p=!0);var H=Array(v.length),E=0,t=Array(v.length);w=0;B=Array(v.length);for(var F=0,n=0;n<v.length;n++)1==p&&(G[5*Number(v[n].e)+Number(v[n].c)]=1),v[n].uId!=currentPlayerId&&(H[E]=v[n],E++,v[n].uId!=I&&(t[w]=v[n],w++,v[n].uId!=x&&(B[F]=v[n],F++)));if(1==p){p=[];
for(n=0;n<G.length;n++)0==G[n]&&p.push(n);p=p[Math.floor(Math.random()*p.length)];n=Math.floor(p/5);p%=5;x=server.GetTitleData({Keys:"MasterUser"});if(void 0!=x.Data.MasterUser&&(x=server.GetUserReadOnlyData({PlayFabId:x.Data.MasterUser,Keys:[n+"_"+p+"_RecPos",n+"_"+p+"_RecRot",n+"_"+p+"_RecHeader"]}),void 0!=x.Data&&void 0!=x.Data[n+"_"+p+"_RecPos"]&&void 0!=x.Data[n+"_"+p+"_RecRot"]&&void 0!=x.Data[n+"_"+p+"_RecHeader"])){f=!0;0==c?(c=d,f=!1):c-=A;1>=c&&(c=1);var y=[],c={StatisticName:"TrophyCount",
Version:"0",Value:c};y.push(c);c={StatisticName:"League",Version:"0",Value:z};y.push(c);c={StatisticName:"TotalGames",Version:"0",Value:a};y.push(c);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:y});a={trophyWin:Math.floor((Number(d)+Number(e))/2),trophyLose:Math.floor((Number(C)+Number(A))/2),quitLastGame:"true"};0==f&&(a.trophyWin=0,a.trophyLose=0);1==u&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:"TheStig",
PosData:x.Data[n+"_"+p+"_RecPos"].Value,RotData:x.Data[n+"_"+p+"_RecRot"].Value,HeaderData:x.Data[n+"_"+p+"_RecHeader"].Value,TrophyLose:A,TrophyWin:d,Opp:"TheStig"}}}if(0==E)return generateErrObj("no valid recording found for this subdivision");z=H;0<w&&(E=w,z=t);0<F&&(E=F,z=B);t=Math.floor(Math.random()*E);t>=E&&(t=E-1);w=Math.min(E,3);B=Array(w);for(n=0;n<w;n++)B[n]=0>=t?z[n]:t>=E-1?z[E-1-n]:z[t-Math.floor(w/2)+n];z=Math.floor(Math.random()*w);w=B[z].uId;t=B[z].e;B=B[z].c;F=server.GetUserReadOnlyData({PlayFabId:w,
Keys:[t+"_"+B+"_RecPos",t+"_"+B+"_RecRot",t+"_"+B+"_RecHeader"]});if(void 0==F)return generateErrObj("Did not find recording for this user: "+w);var E=server.GetPlayerCombinedInfo({PlayFabId:w,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),p=c,z=Number(calculateLeague(c)),H="UserGenerated",x=0<z?Number(h.subdivisions[f.leagues[z-
1]]):0,G=z>=f.leagues.length-1?2*x:Number(h.subdivisions[f.leagues[z]]);1==b.debug&&log.debug("I bet it will crash after this");h=JSON.parse(F.Data[t+"_"+B+"_RecHeader"].Value);1==b.debug&&log.debug("or not");void 0!=h&&(y=h.Trophies);y=Number(y);v=!0;1==b.debug&&log.debug("Adjusting trophies");if(void 0!=q)for(1==b.debug&&log.debug("excludedSubdivisionsFromTrophyAdjustment: "+q),n=0;n<q.length;n++)if(r==Number(q[n])){1==b.debug&&log.debug("in excluded subdivision: "+r);v=!1;break}1==v&&Number(Math.abs(p-
y))>=m&&(1==b.debug&&log.debug("generating new trophies. Reason: user trophies: "+p+" vs opponent trophies: "+y),y=p-l+Math.floor(Math.random()*l*2),h.Trophies=y,1==b.debug&&log.debug("performing stringify on recordingData header"),F.Data[t+"_"+B+"_RecHeader"].Value=JSON.stringify(h));0>=G-x?(l=C,m=e):Number(Math.abs(p-y))>Number(D)?(l=Math.floor((A+C)/2)-1+Math.floor(3*Math.random()),m=Math.floor((d+e)/2)-1+Math.floor(3*Math.random())):(l=A+Math.floor((C-A)/2*((p-y)/(G-x)+1)),m=e+Math.floor((d-e)/
2*((y-p)/(G-x)+1)));1==b.debug&&log.debug("Opponent's PR is TOO DAMN HIGH! "+h.Pr+" vs "+Number(g.subdivisions[Number(f.leagues[z-1])+1])+". You are in subdivision: "+Number(f.leagues[z-1]+1));h.Pr>Number(g.subdivisions[Number(f.leagues[z-1])+1])&&(l=Math.floor((A+C)/2)-1+Math.floor(3*Math.random()),m=Math.floor((d+e)/2)-1+Math.floor(3*Math.random()),H="MobyDick");e=!0;0==c?(e=!1,c=d):(c-=Number(l),1>=c&&(c=1));y=[];c={StatisticName:"TrophyCount",Version:"0",Value:c};y.push(c);c={StatisticName:"League",
Version:"0",Value:z};y.push(c);c={StatisticName:"TotalGames",Version:"0",Value:a};y.push(c);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:y});a={trophyWin:m,trophyLose:l,lastOpp:w+","+I,quitLastGame:"true"};0==e&&(a.trophyWin=0,a.trophyLose=0);1==u&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:H,PosData:F.Data[t+"_"+B+"_RecPos"].Value,RotData:F.Data[t+"_"+B+"_RecRot"].Value,HeaderData:F.Data[t+"_"+B+"_RecHeader"].Value,
TrophyLose:l,TrophyWin:m,Opp:E.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var d=server.GetUserInventory({PlayFabId:currentPlayerId}),e=[],c="-1",h={},f={PaintJobs:{itemOwned:"no",itemCustData:b.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:b.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:b.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:b.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:b.wsId,carItemId:"WindshieldId"}},a=0;a<d.Inventory.length;a++)d.Inventory[a].ItemId==b.carId&&"CarsProgress"==d.Inventory[a].CatalogVersion&&(c=d.Inventory[a].ItemInstanceId),d.Inventory[a].ItemId in f&&(f[d.Inventory[a].ItemId].itemOwned="yes",f[d.Inventory[a].ItemId].itemCustData in d.Inventory[a].CustomData?h[f[d.Inventory[a].ItemId].carItemId]=f[d.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+d.Inventory[a].ItemId+" "+f[d.Inventory[a].ItemId].itemCustData));if("-1"==
c)return generateFailObj("User does not own car with id: "+b.carId);for(var g in f)f.hasOwnProperty(g)&&"no"==f[g].itemOwned&&e.push(g);if(h=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c,Data:h});updateProfileCar(b,k);g=[{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:h}];if(0<e.length)for(e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e}),
d={0:"Owned"},a=0;a<e.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[a].ItemInstanceId,Data:d});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:g}}};
function upgradeCar(b,k,a,d,e){for(var c=server.GetCatalogItems({CatalogVersion:"CarCards"}),h=!1,f,g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==b.carId&&"CarsProgress"==a.Inventory[g].CatalogVersion){h=!0;f=a.Inventory[g];break}for(var l,g=0;g<c.Catalog.length;g++)if(c.Catalog[g].ItemId==b.carId){l=JSON.parse(c.Catalog[g].CustomData);break}if(void 0===l)return generateErrObj("CardNotFoundForCarwithID: "+b.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===h){var m=parseInt(f.CustomData.CarLvl)+1;if(m>=Number(l.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var q=getObjectValueFromLevel(l,"currCostPerLvl",m),g=checkBalance(l.currType,q,d,e);if("OK"!=g)return g;d=getObjectValueFromLevel(l,"cardCostPerLvl",m);f.CustomData.CarLvl=m;for(var h=!1,r,g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==b.carId&&"CarCards"==a.Inventory[g].CatalogVersion){h=!0;try{if(void 0===a.Inventory[g].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===a.Inventory[g].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(a.Inventory[g].CustomData.Amount)>=d)a.Inventory[g].CustomData.Amount-=d,r={Amount:a.Inventory[g].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[g].ItemInstanceId,Data:r});else return generateFailObj("Insufficient cards for real: "+a.Inventory[g].CustomData.Amount+" vs "+d)}catch(D){return generateFailObj("Insufficient cards")}break}if(!1===
h)return generateFailObj("No cards found");a=recalculateCarPr(f.CustomData,f.ItemId,c,void 0);g={CarLvl:m,Pr:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemInstanceId,Data:g});updateProfileCar(b,k);var u;0<q&&(u=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:l.currType,Amount:q}),updateCurrencySpentStatistic(l.currType,q));r=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:r},{ItemId:b.carId,CatalogVersion:"CarsProgress",
CustomData:g}];a={};g={Inventory:r};void 0!=u&&(a[u.VirtualCurrency]=u.Balance,g.VirtualCurrency=a);g.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+l.rarity,m,!0);return generateInventoryChange("InventoryUpdate",g)}h=!1;for(g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==b.carId&&"CarCards"==a.Inventory[g].CatalogVersion){h=!0;try{if(void 0===a.Inventory[g].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===a.Inventory[g].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(a.Inventory[g].CustomData.Amount)>=Number(l.cardCostPerLvl[1]))q=a.Inventory[g].ItemInstanceId,a.Inventory[g].CustomData.Amount-=l.cardCostPerLvl[1],r={Amount:a.Inventory[g].CustomData.Amount};else return generateFailObj("Insufficient cards: "+a.Inventory[g].CustomData.Amount+" vs "+l.cardCostPerLvl[1]+".")}catch(D){return generateFailObj("Insufficient cards: "+D)}break}if(0==h)return generateFailObj("No cards found");g=checkBalance(l.currType,l.currCostPerLvl[1],d,e);if("OK"!=g)return g;
f=[];f.push(b.carId);f=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:f});if(!1===f.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:q,Data:r});0<l.currCostPerLvl[1]&&(u=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:l.currType,Amount:l.currCostPerLvl[1]}),updateCurrencySpentStatistic(l.currType,l.currCostPerLvl[1]));g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:g});g={TiresLvl:"0",TurboLvl:"0",PaintId:l.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,
Data:g});g={PlatesId:"0",WindshieldId:"0",Pr:Number(l.basePr)+l.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:g});c=f=!1;for(g=0;g<a.Inventory.length;g++)if("PaintJobs"==a.Inventory[g].ItemId){c=!0;void 0!=a.Inventory[g].CustomData?l.defaultPaintID in a.Inventory[g].CustomData?f=!0:(m={},m[l.defaultPaintID]="Owned"):(m={},m[l.defaultPaintID]="Owned");void 0!=m&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.Inventory[g].ItemInstanceId,Data:m});break}0==c&&(paintToGive=[],paintToGive.push("PaintJobs"),a=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),m={},m[l.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:m}));g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:l.defaultPaintID,
DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:Number(l.basePr)+l.prPerLvl[1]};r=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:r},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:g}];0==f&&(a={},a[l.defaultPaintID]="Owned",r.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:a}));a={};g={Inventory:r};void 0!=u&&(a[u.VirtualCurrency]=u.Balance,g.VirtualCurrency=a);updateProfileCar(b,k);g.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+l.rarity,
1,!0);return generateInventoryChange("InventoryUpdateNewCar",g)}
function upgradePart(b,k,a,d,e){for(var c=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),h=!1,f=0;f<c.Catalog.length;f++)if(c.Catalog[f].ItemId==b.carId){h=!0;break}if(!1===h)return generateErrObj("car with ID: "+b.carId+" not found in catalog.");for(var c=server.GetCatalogItems({CatalogVersion:"PartCards"}),h=!1,g,f=0;f<c.Catalog.length;f++)if(c.Catalog[f].ItemId==b.partId){g=JSON.parse(c.Catalog[f].CustomData);h=!0;break}if(0==h)return generateErrObj("part with ID: "+b.partId+" not found in catalog.");
for(var h=!1,l,f=0;f<a.Inventory.length;f++)if(a.Inventory[f].ItemId==b.carId&&"CarsProgress"==a.Inventory[f].CatalogVersion){h=!0;l=a.Inventory[f];break}if(!1===h)return generateFailObj("car with ID: "+b.carId+" not found in user inventory.");for(var m=!1,h=0,q={},f=0;f<a.Inventory.length;f++)if(a.Inventory[f].ItemId==b.partId&&"PartCards"==a.Inventory[f].CatalogVersion){var m=!0,r={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},
h=parseInt(l.CustomData[r[b.partId]])+1;if(h>=Number(g.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var u=getObjectValueFromLevel(g,"cardCostPerLvl",h),D=getObjectValueFromLevel(g,"currCostPerLvl",h);q[r[b.partId]]=h;l.CustomData[r[b.partId]]=h;var A;d=checkBalance(g.currType,D,d,e);if("OK"!=d)return d;try{if(void 0!==a.Inventory[f].CustomData&&void 0!==a.Inventory[f].CustomData.Amount&&a.Inventory[f].CustomData.Amount>=u)a.Inventory[f].CustomData.Amount-=u,A={Amount:a.Inventory[f].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[f].ItemInstanceId,Data:A});else return generateFailObj("Insufficient cards")}catch(n){return generateFailObj("Insufficient cards")}break}if(0==m)return generateFailObj("Part not found");var C;0<D&&(C=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g.currType,Amount:D}),updateCurrencySpentStatistic(g.currType,D));f=recalculateCarPr(l.CustomData,l.ItemId,void 0,c);q.Pr=f;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:l.ItemInstanceId,Data:q});l={};f={Inventory:[{ItemId:b.partId,CatalogVersion:"PartCards",CustomData:A},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:q}]};void 0!==C&&(l[C.VirtualCurrency]=C.Balance,f.VirtualCurrency=l);updateProfileCar(b,k);f.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+g.rarity,h,!0);return generateInventoryChange("InventoryUpdatePart",f)};
