function checkCarDataValidity(c,g){if(void 0==c.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});for(var d=0,e=0;e<g.Catalog.length;e++)if(g.Catalog[e].ItemId==c.ItemId){var f=
JSON.parse(g.Catalog[e].CustomData),d=parseInt(f.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a})}catch(h){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:d}}return"OK"}function generateFailObj(c){return{Result:"Failed",Message:c}}
function generateErrObj(c){return{Result:"Error",Message:c}}
function CheckMaintenanceAndVersion(c){var g=!1,a="A.0.0.1";void 0!=c&&(g=c.debug,a=c.cVersion);if(void 0==a)return"update";c=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var d=c.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(d=c.Data.MinimumGameVersionActual_IOS);if(void 0==d)return"maintenance";for(var e=!1,d=d.split("."),f=0;3>f;f++){var h=0;a.length>f+1&&(h=Number(a[f+1]));var b=0;d.length>f&&
(b=Number(d[f]));if(h<b){e=!0;break}}return 1==e?"update":1==g?"OK":c.Data.Maintenance?"false"==c.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(c){return"maintenance"==c?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(c,g){return{Result:"OK",Message:c,InventoryChange:g}}
function checkBalance(c,g,a,d){if("SC"==c){if(a<g)return generateFailObj("NotEnoughSC")}else if(d<g)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(c){var g=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==g.Data.LeagueSubdivisions||void 0==g.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(g.Data.LeagueSubdivisions).leagues,g=JSON.parse(g.Data.SubdivisionTrophyRanges).subdivisions,d=0;d<a.length;d++)if(!(Number(c)>Number(g[a[d]])))return d}
function recalculateCarPr(c,g,a,d){var e=0,f;f=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<f.Catalog.length;a++)if(f.Catalog[a].ItemId==g){e=JSON.parse(f.Catalog[a].CustomData);e=parseInt(e.basePr)+getObjectValueFromLevel(e,"prPerLvl",c.CarLvl);break}d=void 0===d?server.GetCatalogItems({CatalogVersion:"PartCards"}):d;c={Exhaust:c.ExhaustLvl,Engine:c.EngineLvl,Gearbox:c.GearboxLvl,Suspension:c.SuspensionLvl,Tires:c.TiresLvl,Turbo:c.TurboLvl};for(a=0;a<d.Catalog.length;a++)g=
JSON.parse(d.Catalog[a].CustomData),e+=getObjectValueFromLevel(g,"prPerLvl",Number(c[d.Catalog[a].ItemId]));return e}
function GenerateBlackMarket(c){var g=1,a=server.GetPlayerStatistics({PlayFabId:c,StatisticNames:["League"]});0!=a.Statistics.length&&(g=a.Statistics[0].Value.toString());0>=Number(g)&&(g=1);for(var d=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:c,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),e=JSON.parse(a.Data.BlackMarketRarityBias),f,h=[],b=[],k=[],l=0;l<d.Catalog.length;l++){f=JSON.parse(d.Catalog[l].CustomData);if(void 0==f)return generateErrObj("Part card "+
d.Catalog[l].ItemId+" has no custom data.");0==f.rarity&&h.push(d.Catalog[l].ItemId+"_"+f.BMCurrType+"_"+f.BMbasePrice+"_0_"+f.BMpriceIncrPerBuy);1==f.rarity&&b.push(d.Catalog[l].ItemId+"_"+f.BMCurrType+"_"+f.BMbasePrice+"_0_"+f.BMpriceIncrPerBuy);2==f.rarity&&k.push(d.Catalog[l].ItemId+"_"+f.BMCurrType+"_"+f.BMbasePrice+"_0_"+f.BMpriceIncrPerBuy)}d={};d.BMTime=(new Date).getTime();l=Math.floor(Math.random()*h.length);d.BMItem0=h[l];2<=h.length&&h.splice(l,1);Math.floor(100*Math.random())<Number(e.parts[2])?
h=k:(l=Number(e.parts[0])+Number(e.parts[1]),Math.floor(Math.random()*l)>=Number(e.parts[0])&&(h=b));d.BMItem1=h[Math.floor(Math.random()*h.length)];f=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var m,h=[],b=[],k=[],l=0;l<f.Catalog.length;l++){m=JSON.parse(f.Catalog[l].CustomData);if(void 0==m)return generateErrObj("Car card "+f.Catalog[l].ItemId+" has no custom data.");Number(m.unlockedAtRank)>=Number(g)+1||("0"==m.rarity&&h.push(f.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+
"_0_"+m.BMpriceIncrPerBuy),"1"==m.rarity&&b.push(f.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy),"2"==m.rarity&&k.push(f.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy))}g=Math.floor(Math.random()*h.length);d.BMItem2=h[g];2<=h.length&&h.splice(g,1);0>=b.length&&(0>=k.length?k=b=h:b=k);0>=k.length&&(k=b);Math.floor(100*Math.random())<Number(e.cars[2])?h=k:(l=Number(e.cars[0])+Number(e.cars[1]),Math.floor(Math.random()*l)>=Number(e.cars[0])&&
(h=b));g=Math.floor(Math.random()*h.length);d.BMItem3=h[g];server.UpdateUserInternalData({PlayFabId:c,Data:d});d.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return d}function GetCurrentBlackMarket(c,g){var a={},d=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:c,Keys:e});a.BMTime=60*parseInt(e.Data.BlackMarketResetMinutes)-Math.floor((d.getTime()-g.Data.BMTime.Value)/1E3);for(d=0;4>d;d++)a["BMItem"+d]=g.Data["BMItem"+d].Value;return a}
function GetValueFromStatistics(c,g,a){for(var d,e=0;e<c.length;e++)c[e].StatisticName===g&&(d=c[e]);return void 0===d?void 0!==a?a:0:Number(d.Value)}function getCatalogItem(c,g){for(var a=server.GetCatalogItems({CatalogVersion:c}),d=0;d<a.Catalog.length;d++)if(a.Catalog[d].ItemId===g)return a.Catalog[d]}function getObjectValueFromLevel(c,g,a,d){d||(d=0);if(!c[g]||!c[g].length)return d;var e=Number(c[g].length);a>=e&&(a=e-1);return Number(c[g][a])||d}
handlers.buyChest=function(c,g){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(c.curr,c.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<c.cost){var a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.curr,Amount:c.cost}),d={};d[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",{VirtualCurrency:d})}return generateInventoryChange("ChestBought",
{})};
handlers.endGame=function(c,g){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d="01",e,a="0";"rWin"==c.outcome&&(a="1");var f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=f.Statistics.length&&(e=f.Statistics[0].Value.toString(),d=Number(e).toString(2));var f=0,h;h=Array(d.length);for(var b=0;b<h.length-1;b++)h[b]=d[b];h[h.length-1]=a;d=h;a=d.length;for(b=0;b<d.length;b++)"1"==d[b]&&f++;h=Math.round(f/a*100);var k=
server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),a=0,l,f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=f.Statistics.length&&(a=f.Statistics[0].Value,log.debug("getting trophy count "+f.Statistics[0].Value));l=a=Number(a);f=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose","trophyWin"]});f=void 0==f.Data.trophyLose||void 0==f.Data.trophyWin?45:Number(f.Data.trophyLose.Value)+Number(f.Data.trophyWin.Value);
"rWin"==c.outcome&&(a+=f);log.debug("trophies change: "+l+" => "+a);f=calculateLeague(a);for(b=e=0;b<d.length;b++)"1"==d[b]&&(e+=Math.pow(2,b));b=[];b.push({StatisticName:"WinLoss",Version:"0",Value:e});d={StatisticName:"TrophyCount",Version:"0",Value:a};b.push(d);d={StatisticName:"League",Version:"0",Value:f};b.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=JSON.parse(c.recordingHeader);if(10>=Number(b.Score)){var m={TrophyCount:a,League:f};return{Result:m}}b=JSON.parse(c.recordingHeader);
log.debug("score: "+b.Score);d=JSON.parse(k.Data.SubdivisionTrophyRanges);for(b=0;b<d.subdivisions.length;b++)if(l<d.subdivisions[b]){m=b;break}b=[];b.push({Key:c.envIndex+"_"+c.courseIndex+"_RecPos",Value:c.recordingPos});b.push({Key:c.envIndex+"_"+c.courseIndex+"_RecRot",Value:c.recordingRot});b.push({Key:c.envIndex+"_"+c.courseIndex+"_RecHeader",Value:c.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:b});b=server.GetTitleInternalData({Key:"RecSubDivision"+m}).Data["RecSubDivision"+
m];if(void 0==b)d=[],h={wl:h,e:c.envIndex,c:c.courseIndex,uId:currentPlayerId},d.push(h);else{d=JSON.parse(b);h={wl:h,e:c.envIndex,c:c.courseIndex,uId:currentPlayerId};k=!1;for(b=l=0;b<d.length;b++)d[b].uId==currentPlayerId&&l++;if(2<l)return m={TrophyCount:a,League:f},{Result:m};for(b=0;b<d.length;b++)if(d[b].e==c.envIndex&&d[b].c==c.courseIndex){k=!0;d[b]=h;if(1==d.length)break;if(0<b)if(d[b].wl>d[b-1].wl){if(b==d.length-1)break;for(l=b+1;l<d.length;l++)if(d[l-1].wl>d[l].wl)e=d[l],d[l]=d[l-1],d[l-
1]=e;else break}else for(l=b-1;0<=l;l--)if(d[l+1].wl<d[l].wl)e=d[l],d[l]=d[l+1],d[l+1]=e;else break;else for(l=b+1;l<d.length;l++)if(d[l-1].wl>d[l].wl)e=d[l],d[l]=d[l-1],d[l-1]=e;else break}0==k&&d.push(h)}b=JSON.stringify(d);server.SetTitleInternalData({Key:"RecSubDivision"+m,Value:b});m={TrophyCount:a,League:f};return{Result:m}};
function UpdateExperience(c,g,a,d,e,f){c=JSON.parse(getCatalogItem(c,g).CustomData)[a];g=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;g=g[g.length-1];f=f||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;f=GetValueFromStatistics(f,"Experience",0);if(f>=g)return g;if(isNaN(Number(c)))a=Number(c.length),d>=a&&(d=a-1),d=Number(c[d]);else if(d=Number(c),0===d)return f;f=Math.min(f+d,g);if(!e)return f;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:f}]});return f}handlers.getServerTime=function(c,g){return{time:new Date}};
handlers.initServerData=function(c){c=[];var g={StatisticName:"TrophyCount",Version:"0",Value:"0"};c.push(g);g={StatisticName:"League",Version:"0",Value:"0"};c.push(g);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});c=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var g={0:"Owned"},a=0;a<c.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[a].ItemInstanceId,Data:g});c=[];c.push("FordFocus");c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c});g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:g});g={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:g});g={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:g});g=[];g.push("Engine");g=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:g});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});g={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:g})};
handlers.openChest=function(c,g){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<c.levelUpRewardIndex){var d=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),e={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}):d=a.Data.LastLevelReward.Value;var f=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,h=GetValueFromStatistics(a,"Experience",0);0==h&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var b=f.length,a=0;a<f.length;a++)if(!(h>=f[a])){b=a;break}if(Number(c.levelUpRewardIndex)<=Number(b))d=Number(c.levelUpRewardIndex),e.LastLevelReward=d,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}),a=""+d,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",
PlayFabId:currentPlayerId,ItemIds:a});else return generateFailObj("already got reward for level: "+d)}d=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<c.currCost){if("OK"!=checkBalance(c.currType,c.currCost,d.VirtualCurrency.SC,d.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.currType,Amount:c.currCost})}for(var k in c.currencyReq)0<c.currencyReq[k]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:k,Amount:c.currencyReq[k]});for(k in c.carCardsRequest)if(c.carCardsRequest.hasOwnProperty(k)){e=!1;for(a=0;a<d.Inventory.length;a++)if(d.Inventory[a].ItemId==k&&"CarCards"==d.Inventory[a].CatalogVersion){e=void 0==d.Inventory[a].CustomData?Number(c.carCardsRequest[k]):void 0==d.Inventory[a].CustomData.Amount?Number(c.carCardsRequest[k]):isNaN(Number(d.Inventory[a].CustomData.Amount))?Number(c.carCardsRequest[k]):Number(d.Inventory[a].CustomData.Amount)+Number(c.carCardsRequest[k]);
e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[k],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:c.carCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}for(k in c.partCardsRequest)if(c.partCardsRequest.hasOwnProperty(k)){e=!1;for(a=0;a<d.Inventory.length;a++)if(d.Inventory[a].ItemId==
k&&"PartCards"==d.Inventory[a].CatalogVersion){e=void 0==d.Inventory[a].CustomData?Number(c.partCardsRequest[k]):void 0==d.Inventory[a].CustomData.Amount?Number(c.partCardsRequest[k]):isNaN(Number(d.Inventory[a].CustomData.Amount))?Number(c.partCardsRequest[k]):Number(d.Inventory[a].CustomData.Amount)+Number(c.partCardsRequest[k]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[k],a=server.GrantItemsToUser({CatalogVersion:"PartCards",
PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:c.partCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}k=server.GetUserInventory({PlayFabId:currentPlayerId});c.chestId&&0>=c.levelUpRewardIndex&&(a=UpdateExperience("Chests",c.chestId,"xpGain",0,!0),k.Experience=a);return generateInventoryChange("InventoryUpdated",k)};
handlers.purchaseBMItem=function(c,g){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>c.itemId||3<c.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+c.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),d=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+c.itemId].Value.split("_"),e=d.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var f;f=2>c.itemId?"PartCards":"CarCards";var h=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),e=checkBalance(a[1],h,e,e);if("OK"!=e)return e;for(var b,k,e=0;e<d.Inventory.length;e++)if(d.Inventory[e].ItemId==a[0]&&d.Inventory[e].CatalogVersion==f){b=d.Inventory[e].ItemInstanceId;void 0===d.Inventory[e].CustomData?k={Amount:1}:void 0===d.Inventory[e].CustomData.Amount?k={Amount:1}:(k=Number(d.Inventory[e].CustomData.Amount)+1,isNaN(k)&&(k=1),k={Amount:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b,Data:k});break}void 0===b&&(b=[],b.push(a[0]),b=server.GrantItemsToUser({CatalogVersion:f,PlayFabId:currentPlayerId,ItemIds:b}).ItemGrantResults[0].ItemInstanceId,void 0===b?generateErrObj("grantRequest denied"):(k={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b,Data:k})));b=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:h});h=a[0]+"_"+a[1]+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];d={};d["BMItem"+
c.itemId]=h;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});k=[{ItemId:a[0],CatalogVersion:f,CustomData:k}];f={};f[b.VirtualCurrency]=b.Balance;a=c.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];e={Inventory:k,VirtualCurrency:f};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:e,BMItemChange:a}};
handlers.purchaseItems=function(c,g){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=server.GetUserInventory({PlayFabId:currentPlayerId}),e=d.VirtualCurrency.SC,f=d.VirtualCurrency.HC;switch(c.purchaseType){case "carUpgrade":return upgradeCar(c,d,e,f);case "partUpgrade":return upgradePart(c,d,e,f);case "custPurchase":for(var h=server.GetCatalogItems({CatalogVersion:"Customization"}),b,k=0,a="SC",l=0;l<h.Catalog.length;l++)if(h.Catalog[l].ItemId==c.custId){b=
h.Catalog[l];cardInfo=JSON.parse(h.Catalog[l].CustomData);k=c.custVal+",Cost";a=cardInfo[c.custVal+",Curr"];k=cardInfo[k];f=checkBalance(a,k,e,f);if("OK"!=f)return f;break}if(void 0==b)return generateErrObj("Customization does not exist in catalog.");for(var m,n,l=0;l<d.Inventory.length;l++)if(d.Inventory[l].ItemId==c.custId){m=d.Inventory[l];n=d.Inventory[l].ItemInstanceId;if(void 0!=m.CustomData&&String(c.custVal)in m.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
m){log.info("user doesn't have customization category. Granting ... ");f=[];f.push(c.custId);f=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:f});if(0==f.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");n=f.ItemGrantResults[0].ItemInstanceId}f={};f[String(c.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:n,Data:f});f=[{ItemId:c.custId,
CatalogVersion:"Customization",CustomData:f}];0<k?(a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:k}),k={},k[a.VirtualCurrency]=a.Balance,l={Inventory:f,VirtualCurrency:k}):l={Inventory:f};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":a=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});k=!1;for(l=n=0;l<a.Catalog.length;l++)if(a.Catalog[l].ItemId==c.packId){n=a.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(a.Catalog[l].CustomData);k=!0;break}if(0==k)return generateErrObj("pack with ID: "+c.packId+" not found in catalog.");if(0>=n)return generateErrObj("pack with ID: "+c.packId+" shouldn't have negative cost.");if(n>f)return generateFailObj("Not enough HC.");a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:n});f=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});k={};k[f.VirtualCurrency]=
f.Balance;k[a.VirtualCurrency]=a.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:k});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(c){c=CheckMaintenanceAndVersion(c);return"OK"!=c?generateMaintenanceOrUpdateObj(c):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(c){c=server.GetUserInventory({PlayFabId:currentPlayerId});for(var g=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),d=!1,e=0;e<c.Inventory.length;e++)if("CarsProgress"==c.Inventory[e].CatalogVersion){var d=!0,f=checkCarDataValidity(c.Inventory[e],g);if("PlayFabError"==f||void 0===f)return generateErrObj("PlayfabError");"OK"==f?log.debug("Data for "+c.Inventory[e].ItemId+" OK"):c.Inventory[e].CustomData=f;
c.Inventory[e].CustomData.Pr=recalculateCarPr(c.Inventory[e].CustomData,c.Inventory[e].ItemId,g,a);f={};f.Pr=c.Inventory[e].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[e].ItemInstanceId,Data:f})}return!1===d?(c=[],c.push("FordFocus"),c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c}),g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:g}),g={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:g}),g={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:g}),generateErrObj("UserHasNoCars ... reiniting")):c};
handlers.retrieveBlackMarket=function(c,g){var a=CheckMaintenanceAndVersion(c);if(!0===c.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=[];d.push("BMTime");for(var e=0;4>e;e++)d.push("BMItem"+e);e=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:d});if(void 0===e.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var d=new Date,f=[];f.push("BlackMarketResetMinutes");f=server.GetTitleData({PlayFabId:currentPlayerId,Keys:f});if(!0===c.reset){a="HC";e=200;d=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==d.Data.BlackMarketResetCost&&(e=d.Data.BlackMarketResetCost.split("_"),a=e[0],e=Number(e[1]));if(0<e){d=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,e,d.VirtualCurrency.SC,d.VirtualCurrency.HC))return generateFailObj("not enough money");e=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:e});a=GenerateBlackMarket(currentPlayerId);d={};d[e.VirtualCurrency]=e.Balance;e={VirtualCurrency:d};a.InventoryChange=e;return a}return GenerateBlackMarket(currentPlayerId)}return d.getTime()-
parseInt(e.Data.BMTime.Value)>6E4*parseInt(f.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,e),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,e)};
handlers.rewardUsers=function(c,g){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,d=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),e=0;0>=d&&(a=Number(a)/3E3,e=Number(Math.floor(800*a)));d=Number(d)+e;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:d}]});return d};
handlers.startGame=function(c,g){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a="10",d,e=50,f,h=0;f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});if(0!=f.Statistics.length){d=f.Statistics[0].Value.toString();a=Number(d).toString(2);f=a.length;for(var b=0;b<a.length;b++)"1"==a[b]&&h++;e=Math.round(h/f*100)}a+="0";20<a.length&&(a=a.slice(1));var k=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges",
"TrophyGainRange","TrophyLoseRange","SubdivisionPrRanges"]});f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});h=0;0!=f.Statistics.length&&(h=f.Statistics[0].Value);var h=Number(h),l=JSON.parse(k.Data.SubdivisionTrophyRanges);d=JSON.parse(k.Data.LeagueSubdivisions);var m=JSON.parse(k.Data.SubdivisionPrRanges),n=43,t=43;f=k.Data.TrophyGainRange.split("_");var w=k.Data.TrophyLoseRange.split("_"),k=Number(f[0]);f=Number(f[1]);for(var A=Number(w[0]),w=Number(w[1]),
b=0;b<l.subdivisions.length;b++)if(h<Number(l.subdivisions[b])){n=b;b<l.subdivisions.length-1&&(t=b+1);break}t=Number(l.subdivisions[t])-Number(l.subdivisions[n]);0>=t&&(t=400);var q=server.GetTitleInternalData({Keys:"RecSubDivision"+n}).Data["RecSubDivision"+n],p=!1;void 0==q&&(p=!0);var x,u=n="noop",r,b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp"]});if(void 0==b.Data||void 0==b.Data.lastOpp)u=n="noop";else for(r=b.Data.lastOpp.Value.split(","),b=0;b<r.length;b++)0==b&&
(n=r[b]),1==b&&(u=r[b]);x=0==p?JSON.parse(q):[];var E=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>x.length&&(p=!0);var C=Array(x.length),y=0,q=Array(x.length);r=0;for(var D=Array(x.length),B=0,b=0;b<x.length;b++)1==p&&(E[5*Number(x[b].e)+Number(x[b].c)]=1),x[b].uId!=currentPlayerId&&(C[y]=x[b],y++,x[b].uId!=n&&(q[r]=x[b],r++,x[b].uId!=u&&(D[B]=x[b],B++)));if(1==p){p=[];for(b=0;b<E.length;b++)0==E[b]&&p.push(b);p=p[Math.floor(Math.random()*p.length)];b=Math.floor(p/5);p%=5;u=server.GetTitleData({Keys:"MasterUser"});
if(void 0!=u.Data.MasterUser&&(u=server.GetUserReadOnlyData({PlayFabId:u.Data.MasterUser,Keys:[b+"_"+p+"_RecPos",b+"_"+p+"_RecRot",b+"_"+p+"_RecHeader"]}),void 0!=u.Data&&void 0!=u.Data[b+"_"+p+"_RecPos"]&&void 0!=u.Data[b+"_"+p+"_RecRot"]&&void 0!=u.Data[b+"_"+p+"_RecHeader"])){var z=!0;0==h?(h=f,z=!1):h-=A;1>=h&&(h=1);d=parseInt(a,2);a=[];d={StatisticName:"WinLoss",Version:"0",Value:d};a.push(d);h={StatisticName:"TrophyCount",Version:"0",Value:h};a.push(h);h={StatisticName:"League",Version:"0",
Value:v};a.push(h);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a});a={trophyWin:Math.floor((Number(f)+Number(k))/2),trophyLose:Math.floor((Number(w)+Number(A))/2)};0==z&&(a.trophyWin=0,a.trophyLose=0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:"TheStig",PosData:u.Data[b+"_"+p+"_RecPos"].Value,RotData:u.Data[b+"_"+p+"_RecRot"].Value,HeaderData:u.Data[b+"_"+p+"_RecHeader"].Value,TrophyLose:A,TrophyWin:f,Opp:"Mniezo"}}}if(0==y)return generateErrObj("no valid recording found for this subdivision");
v=C;0<r&&(y=r,v=q);0<B&&(y=B,v=D);r=y-1;for(b=0;b<y;b++)if(v[b].wl>e){r=b;break}e=Math.min(y,3);q=Array(e);for(b=0;b<e;b++)q[b]=0>=r?v[b]:r>=y-1?v[y-1-b]:v[r-Math.floor(e/2)+b];v=Math.floor(Math.random()*e);b=q[v].uId;e=q[v].e;q=q[v].c;r=server.GetUserReadOnlyData({PlayFabId:b,Keys:[e+"_"+q+"_RecPos",e+"_"+q+"_RecRot",e+"_"+q+"_RecHeader"]});if(void 0==r)return generateErrObj("Did not find recording for this user: "+b);var D=server.GetPlayerCombinedInfo({PlayFabId:b,InfoRequestParameters:{GetUserAccountInfo:!0,
GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),y=h,v=Number(calculateLeague(h)),B="UserGenerated",C=0<v?Number(l.subdivisions[d.leagues[v-1]]):0,u=v>=d.leagues.length-1?2*C:Number(l.subdivisions[d.leagues[v]]),p=JSON.parse(r.Data[e+"_"+q+"_RecHeader"].Value);void 0!=p&&(z=p.Trophies);z=Number(z);0>=u-C?(l=w,z=k):Number(Math.abs(y-z))>Number(t)?(l=Math.floor((A+w)/2)-1+Math.floor(3*
Math.random()),z=Math.floor((f+k)/2)-1+Math.floor(3*Math.random()),B="MobyDick"):(l=A+Math.floor((w-A)/2*((y-z)/(u-C)+1)),z=k+Math.floor((f-k)/2*((z-y)/(u-C)+1)));p.Pr>Number(m.subdivisions[d.leagues[v-1]])&&(l=Math.floor((A+w)/2)-1+Math.floor(3*Math.random()),z=Math.floor((f+k)/2)-1+Math.floor(3*Math.random()),B="MobyDick");k=!0;0==h?(k=!1,h=f):(h-=Number(l),1>=h&&(h=1));d=parseInt(a,2);a=[];d={StatisticName:"WinLoss",Version:"0",Value:d};a.push(d);h={StatisticName:"TrophyCount",Version:"0",Value:h};
a.push(h);h={StatisticName:"League",Version:"0",Value:v};a.push(h);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a});a={trophyWin:z,trophyLose:l,lastOpp:b+","+n};0==k&&(a.trophyWin=0,a.trophyLose=0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:B,PosData:r.Data[e+"_"+q+"_RecPos"].Value,RotData:r.Data[e+"_"+q+"_RecRot"].Value,HeaderData:r.Data[e+"_"+q+"_RecHeader"].Value,TrophyLose:l,TrophyWin:z,Opp:D.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(c,g){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var d=server.GetUserInventory({PlayFabId:currentPlayerId}),e=[],f="-1",h={},b={PaintJobs:{itemOwned:"no",itemCustData:c.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:c.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:c.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:c.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:c.wsId,carItemId:"WindshieldId"}},a=0;a<d.Inventory.length;a++)d.Inventory[a].ItemId==c.carId&&"CarsProgress"==d.Inventory[a].CatalogVersion&&(f=d.Inventory[a].ItemInstanceId),d.Inventory[a].ItemId in b&&(b[d.Inventory[a].ItemId].itemOwned="yes",b[d.Inventory[a].ItemId].itemCustData in d.Inventory[a].CustomData?h[b[d.Inventory[a].ItemId].carItemId]=b[d.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+d.Inventory[a].ItemId+" "+b[d.Inventory[a].ItemId].itemCustData));if("-1"==
f)return generateFailObj("User does not own car with id: "+c.carId);for(var k in b)b.hasOwnProperty(k)&&"no"==b[k].itemOwned&&e.push(k);if(h=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:h});k=[{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:h}];if(0<e.length)for(e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e}),d={0:"Owned"},
a=0;a<e.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[a].ItemInstanceId,Data:d});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:k}}};
function upgradeCar(c,g,a,d){for(var e=server.GetCatalogItems({CatalogVersion:"CarCards"}),f=!1,h,b=0;b<g.Inventory.length;b++)if(g.Inventory[b].ItemId==c.carId&&"CarsProgress"==g.Inventory[b].CatalogVersion){f=!0;h=g.Inventory[b];break}for(var k,b=0;b<e.Catalog.length;b++)if(e.Catalog[b].ItemId==c.carId){k=JSON.parse(e.Catalog[b].CustomData);break}if(void 0===k)return generateErrObj("CardNotFoundForCarwithID: "+c.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===f){var l=parseInt(h.CustomData.CarLvl)+1;if(l>=Number(k.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var m=getObjectValueFromLevel(k,"currCostPerLvl",l),b=checkBalance(k.currType,m,a,d);if("OK"!=b)return b;a=getObjectValueFromLevel(k,"cardCostPerLvl",l);h.CustomData.CarLvl=l;for(var f=!1,n,b=0;b<g.Inventory.length;b++)if(g.Inventory[b].ItemId==c.carId&&"CarCards"==g.Inventory[b].CatalogVersion){f=!0;try{if(void 0===g.Inventory[b].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===g.Inventory[b].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(g.Inventory[b].CustomData.Amount)>=a)g.Inventory[b].CustomData.Amount-=a,n={Amount:g.Inventory[b].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.Inventory[b].ItemInstanceId,Data:n});else return generateFailObj("Insufficient cards for real: "+g.Inventory[b].CustomData.Amount+" vs "+a)}catch(w){return generateFailObj("Insufficient cards")}break}if(!1===
f)return generateFailObj("No cards found");g=recalculateCarPr(h.CustomData,h.ItemId,e,void 0);b={CarLvl:l,Pr:g};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemInstanceId,Data:b});var t;0<m&&(t=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:k.currType,Amount:m}));c=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:n},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:b}];n={};b={Inventory:c};void 0!=t&&(n[t.VirtualCurrency]=
t.Balance,b.VirtualCurrency=n);b.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+k.rarity,l,!0);return generateInventoryChange("InventoryUpdate",b)}f=!1;for(b=0;b<g.Inventory.length;b++)if(g.Inventory[b].ItemId==c.carId&&"CarCards"==g.Inventory[b].CatalogVersion){f=!0;try{if(void 0===g.Inventory[b].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===g.Inventory[b].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(g.Inventory[b].CustomData.Amount)>=Number(k.cardCostPerLvl[1]))m=g.Inventory[b].ItemInstanceId,g.Inventory[b].CustomData.Amount-=k.cardCostPerLvl[1],n={Amount:g.Inventory[b].CustomData.Amount};else return generateFailObj("Insufficient cards: "+g.Inventory[b].CustomData.Amount+" vs "+k.cardCostPerLvl[1]+".")}catch(w){return generateFailObj("Insufficient cards: "+w)}break}if(0==f)return generateFailObj("No cards found");b=checkBalance(k.currType,k.currCostPerLvl[1],a,d);if("OK"!=b)return b;
h=[];h.push(c.carId);h=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:h});if(!1===h.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:m,Data:n});0<k.currCostPerLvl[1]&&(t=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:k.currType,Amount:k.currCostPerLvl[1]}));b={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:b});b={TiresLvl:"0",TurboLvl:"0",PaintId:k.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:b});b={PlatesId:"0",WindshieldId:"0",
Pr:Number(k.basePr)+k.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:b});e=h=!1;for(b=0;b<g.Inventory.length;b++)if("PaintJobs"==g.Inventory[b].ItemId){e=!0;void 0!=g.Inventory[b].CustomData?k.defaultPaintID in g.Inventory[b].CustomData?h=!0:(l={},l[k.defaultPaintID]="Owned"):(l={},l[k.defaultPaintID]="Owned");void 0!=l&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.Inventory[b].ItemInstanceId,
Data:l});break}0==e&&(paintToGive=[],paintToGive.push("PaintJobs"),g=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),l={},l[k.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:l}));b={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:k.defaultPaintID,DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",
Pr:Number(k.basePr)+k.prPerLvl[1]};c=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:n},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:b}];0==h&&(n={},n[k.defaultPaintID]="Owned",c.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:n}));n={};b={Inventory:c};void 0!=t&&(n[t.VirtualCurrency]=t.Balance,b.VirtualCurrency=n);b.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+k.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",b)}
function upgradePart(c,g,a,d){for(var e=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),f=!1,h=0;h<e.Catalog.length;h++)if(e.Catalog[h].ItemId==c.carId){f=!0;break}if(!1===f)return generateErrObj("car with ID: "+c.carId+" not found in catalog.");for(var e=server.GetCatalogItems({CatalogVersion:"PartCards"}),f=!1,b,h=0;h<e.Catalog.length;h++)if(e.Catalog[h].ItemId==c.partId){b=JSON.parse(e.Catalog[h].CustomData);f=!0;break}if(0==f)return generateErrObj("part with ID: "+c.partId+" not found in catalog.");
for(var f=!1,k,h=0;h<g.Inventory.length;h++)if(g.Inventory[h].ItemId==c.carId&&"CarsProgress"==g.Inventory[h].CatalogVersion){f=!0;k=g.Inventory[h];break}if(!1===f)return generateFailObj("car with ID: "+c.carId+" not found in user inventory.");for(var l=!1,f=0,m={},h=0;h<g.Inventory.length;h++)if(g.Inventory[h].ItemId==c.partId&&"PartCards"==g.Inventory[h].CatalogVersion){var l=!0,n={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},
f=parseInt(k.CustomData[n[c.partId]])+1;if(f>=Number(b.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var t=getObjectValueFromLevel(b,"cardCostPerLvl",f),w=getObjectValueFromLevel(b,"currCostPerLvl",f);m[n[c.partId]]=f;k.CustomData[n[c.partId]]=f;var A;a=checkBalance(b.currType,w,a,d);if("OK"!=a)return a;try{if(void 0!==g.Inventory[h].CustomData&&void 0!==g.Inventory[h].CustomData.Amount&&g.Inventory[h].CustomData.Amount>=t)g.Inventory[h].CustomData.Amount-=t,A={Amount:g.Inventory[h].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.Inventory[h].ItemInstanceId,Data:A});else return generateFailObj("Insufficient cards")}catch(p){return generateFailObj("Insufficient cards")}break}if(0==l)return generateFailObj("Part not found");var q;0<w&&(q=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.currType,Amount:w}));h=recalculateCarPr(k.CustomData,k.ItemId,void 0,e);m.Pr=h;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:k.ItemInstanceId,Data:m});k={};h={Inventory:[{ItemId:c.partId,CatalogVersion:"PartCards",CustomData:A},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:m}]};void 0!==q&&(k[q.VirtualCurrency]=q.Balance,h.VirtualCurrency=k);h.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+b.rarity,f,!0);return generateInventoryChange("InventoryUpdatePart",h)};
