function checkCarDataValidity(b,h){if(void 0==b.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});for(var c=0,d=0;d<h.Catalog.length;d++)if(h.Catalog[d].ItemId==b.ItemId){var e=
JSON.parse(h.Catalog[d].CustomData),c=parseInt(e.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a})}catch(g){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:c}}return"OK"}function generateFailObj(b){return{Result:"Failed",Message:b}}
function generateErrObj(b){return{Result:"Error",Message:b}}
function CheckMaintenanceAndVersion(b){var h=!1,a="A.0.0.1";void 0!=b&&(h=b.debug,a=b.cVersion);if(void 0==a)return"update";b=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var c=b.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(c=b.Data.MinimumGameVersionActual_IOS);if(void 0==c)return"maintenance";for(var d=!1,c=c.split("."),e=0;3>e;e++){var g=0;a.length>e+1&&(g=Number(a[e+1]));var f=0;c.length>e&&
(f=Number(c[e]));if(g<f){d=!0;break}}return 1==d?"update":1==h?"OK":b.Data.Maintenance?"false"==b.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(b){return"maintenance"==b?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(b,h){return{Result:"OK",Message:b,InventoryChange:h}}
function updateCurrencySpentStatistic(b,h){var a=[],c,d=0,e=Number(h);if(!(isNaN(e)||0>=e)&&("SC"==b&&(c="MoneySpent"),"HC"==b&&(c="GoldSpent"),void 0!=c)){var g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:[c]});0<g.Statistics.length&&(d=Number(g.Statistics[0].Value));a.push({StatisticName:c,Version:"0",Value:d+e});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a})}}
function checkBalance(b,h,a,c){if("SC"==b){if(a<h)return generateFailObj("NotEnoughSC")}else if(c<h)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(b){var h=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==h.Data.LeagueSubdivisions||void 0==h.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(h.Data.LeagueSubdivisions).leagues,h=JSON.parse(h.Data.SubdivisionTrophyRanges).subdivisions,c=0;c<a.length;c++)if(!(Number(b)>Number(h[a[c]])))return c;return a.length-1}
function recalculateCarPr(b,h,a,c){var d=0,e;e=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<e.Catalog.length;a++)if(e.Catalog[a].ItemId==h){d=JSON.parse(e.Catalog[a].CustomData);d=parseInt(d.basePr)+getObjectValueFromLevel(d,"prPerLvl",b.CarLvl);break}c=void 0===c?server.GetCatalogItems({CatalogVersion:"PartCards"}):c;b={Exhaust:b.ExhaustLvl,Engine:b.EngineLvl,Gearbox:b.GearboxLvl,Suspension:b.SuspensionLvl,Tires:b.TiresLvl,Turbo:b.TurboLvl};for(a=0;a<c.Catalog.length;a++)h=
JSON.parse(c.Catalog[a].CustomData),d+=getObjectValueFromLevel(h,"prPerLvl",Number(b[c.Catalog[a].ItemId]));return d}
function GenerateBlackMarket(b){var h=1,a=server.GetPlayerStatistics({PlayFabId:b,StatisticNames:["League"]});0!=a.Statistics.length&&(h=a.Statistics[0].Value.toString());0>=Number(h)&&(h=1);for(var c=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:b,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),d=JSON.parse(a.Data.BlackMarketRarityBias),e,g=[],f=[],k=[],l=0;l<c.Catalog.length;l++){e=JSON.parse(c.Catalog[l].CustomData);if(void 0==e)return generateErrObj("Part card "+
c.Catalog[l].ItemId+" has no custom data.");0==e.rarity&&g.push(c.Catalog[l].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy);1==e.rarity&&f.push(c.Catalog[l].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy);2==e.rarity&&k.push(c.Catalog[l].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy)}c={};c.BMTime=(new Date).getTime();l=Math.floor(Math.random()*g.length);c.BMItem0=g[l];2<=g.length&&g.splice(l,1);Math.floor(100*Math.random())<Number(d.parts[2])?
g=k:(l=Number(d.parts[0])+Number(d.parts[1]),Math.floor(Math.random()*l)>=Number(d.parts[0])&&(g=f));c.BMItem1=g[Math.floor(Math.random()*g.length)];e=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var n,g=[],f=[],k=[],l=0;l<e.Catalog.length;l++){n=JSON.parse(e.Catalog[l].CustomData);if(void 0==n)return generateErrObj("Car card "+e.Catalog[l].ItemId+" has no custom data.");Number(n.unlockedAtRank)>=Number(h)+1||("0"==n.rarity&&g.push(e.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+
"_0_"+n.BMpriceIncrPerBuy),"1"==n.rarity&&f.push(e.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy),"2"==n.rarity&&k.push(e.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy))}h=Math.floor(Math.random()*g.length);c.BMItem2=g[h];2<=g.length&&g.splice(h,1);0>=f.length&&(0>=k.length?k=f=g:f=k);0>=k.length&&(k=f);Math.floor(100*Math.random())<Number(d.cars[2])?g=k:(l=Number(d.cars[0])+Number(d.cars[1]),Math.floor(Math.random()*l)>=Number(d.cars[0])&&
(g=f));h=Math.floor(Math.random()*g.length);c.BMItem3=g[h];server.UpdateUserInternalData({PlayFabId:b,Data:c});c.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return c}function GetCurrentBlackMarket(b,h){var a={},c=new Date,d=[];d.push("BlackMarketResetMinutes");d=server.GetTitleData({PlayFabId:b,Keys:d});a.BMTime=60*parseInt(d.Data.BlackMarketResetMinutes)-Math.floor((c.getTime()-h.Data.BMTime.Value)/1E3);for(c=0;4>c;c++)a["BMItem"+c]=h.Data["BMItem"+c].Value;return a}
function GetValueFromStatistics(b,h,a){for(var c,d=0;d<b.length;d++)b[d].StatisticName===h&&(c=b[d]);return void 0===c?void 0!==a?a:0:Number(c.Value)}function GetVersionFromStatistics(b,h,a){for(var c,d=0;d<b.length;d++)b[d].StatisticName===h&&(c=b[d]);return void 0===c?void 0!==a?a:0:Number(c.Version)}function getCatalogItem(b,h){for(var a=server.GetCatalogItems({CatalogVersion:b}),c=0;c<a.Catalog.length;c++)if(a.Catalog[c].ItemId===h)return a.Catalog[c]}
function getObjectValueFromLevel(b,h,a,c){c||(c=0);if(!b[h]||!b[h].length)return c;var d=Number(b[h].length);a>=d&&(a=d-1);return Number(b[h][a])||c}
handlers.buyChest=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(b.curr,b.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<b.cost){a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.cost});updateCurrencySpentStatistic(b.curr,b.cost);var c={};c[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",
{VirtualCurrency:c})}return generateInventoryChange("ChestBought",{})};
handlers.claimDailyMission=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a=Number(b.mIdx),c=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==c.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var c=JSON.parse(c.Data.DailyMissionStatus.Value),d=c.dailyMissionClaimStatus;if(a>=d.length)return generateErrObj("Unlock index is out of bounds of playerData claim mission status array");if(1==
d[a])return generateFailObj("Mission already claimed");d[a]=1;c={DailyMissionStatus:JSON.stringify({DailyStatus:c.DailyStatus,dailyMissionClaimStatus:d,timeStamp:c.timeStamp})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});c=JSON.parse(c.Data.DailyMissionData);if(a>=c.missionData.length)return generateErrObj("Unlock index is out of bounds of titleData claim mission reward array");a=c.missionData[a].split("_");
a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:Number(a[2])});c={};c[a.VirtualCurrency]=a.Balance;return generateInventoryChange("MissionClaimed",{VirtualCurrency:c})};
handlers.endDaily=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==a.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");for(var c=JSON.parse(a.Data.DailyMissionStatus.Value),a=c.dailyMissionClaimStatus,d,e=-1,g=0;g<c.dailyMissionClaimStatus.length;g++)if(0==a[g])return generateErrObj("Not all missions were claimed!");
a=[0,0,0,0,0,0,0,0];d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});tParsed=JSON.parse(d.Data.DailyMissionData);var g=Number(tParsed.minutesToRefresh),f=new Date;f.getTime()-Number(c.timeStamp)>6E4*Number(g)?(d=2,c=f.getTime()):(d=0,e=60*Number(g)-Math.floor((f.getTime()-Number(c.timeStamp))/1E3),c=c.timeStamp);c={DailyMissionStatus:JSON.stringify({DailyStatus:d,dailyMissionClaimStatus:a,timeStamp:c})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});
var c=server.GetUserInventory({PlayFabId:currentPlayerId}),k;for(k in b.currencyReq)0<b.currencyReq[k]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:k,Amount:b.currencyReq[k]});for(k in b.carCardsRequest)if(b.carCardsRequest.hasOwnProperty(k)){f=!1;for(g=0;g<c.Inventory.length;g++)if(c.Inventory[g].ItemId==k&&"CarCards"==c.Inventory[g].CatalogVersion){f=void 0==c.Inventory[g].CustomData?Number(b.carCardsRequest[k]):void 0==c.Inventory[g].CustomData.Amount?Number(b.carCardsRequest[k]):
isNaN(Number(c.Inventory[g].CustomData.Amount))?Number(b.carCardsRequest[k]):Number(c.Inventory[g].CustomData.Amount)+Number(b.carCardsRequest[k]);f={Amount:f};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[g].ItemInstanceId,Data:f});f=!0;break}0==f&&(g=[k],g=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:g}),f={Amount:b.carCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,
Data:f}))}for(k in b.partCardsRequest)if(b.partCardsRequest.hasOwnProperty(k)){f=!1;for(g=0;g<c.Inventory.length;g++)if(c.Inventory[g].ItemId==k&&"PartCards"==c.Inventory[g].CatalogVersion){f=void 0==c.Inventory[g].CustomData?Number(b.partCardsRequest[k]):void 0==c.Inventory[g].CustomData.Amount?Number(b.partCardsRequest[k]):isNaN(Number(c.Inventory[g].CustomData.Amount))?Number(b.partCardsRequest[k]):Number(c.Inventory[g].CustomData.Amount)+Number(b.partCardsRequest[k]);f={Amount:f};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.Inventory[g].ItemInstanceId,Data:f});f=!0;break}0==f&&(g=[k],g=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:g}),f={Amount:b.partCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:f}))}return{Result:"OK",Message:"DailyCompleted",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId}),DailyStatus:{status:d,claimStatus:a,timeRemaining:e}}};
handlers.endGame=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),a=0,d,e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=e.Statistics.length&&(a=e.Statistics[0].Value,1==b.debug&&log.debug("getting trophy count "+e.Statistics[0].Value));d=a=Number(a);var g=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose",
"trophyWin","LastGameOutcome","LatestStreak"]}),f;f=void 0==g.Data.trophyLose||void 0==g.Data.trophyWin?45:Number(g.Data.trophyLose.Value)+Number(g.Data.trophyWin.Value);var e=0,k="Loss";void 0!=g.Data.LatestStreak&&(e=Number(g.Data.LatestStreak.Value));1==isNaN(e)&&(e=0);void 0!=g.Data.LatestStreak&&(k=g.Data.LastGameOutcome.Value);void 0==k&&(k="Loss");g={quitLastGame:"false",LastGameOutcome:"Loss"};"rWin"==b.outcome&&(a+=f,g.LastGameOutcome="Win","Loss"==k?e=1:e++);g.LatestStreak=e;server.UpdateUserInternalData({PlayFabId:currentPlayerId,
Data:g});f=JSON.parse(b.recordingHeader);var l=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Wins","TotalGamesCompleted","LongestWinStreak","BestDriftScore"]}).Statistics,k=GetValueFromStatistics(l,"TotalGamesCompleted",0),k=Number(k)+1,g=GetValueFromStatistics(l,"Wins",0);"rWin"==b.outcome&&(g=Number(g)+1);var n=GetValueFromStatistics(l,"LongestWinStreak",0);GetVersionFromStatistics(l,"LongestWinStreak",0);Number(n)<e&&(n=e);l=GetValueFromStatistics(l,"BestDriftScore",0);
Number(f.Score)>l&&(l=Number(f.Score));var e=calculateLeague(a),p=[],q={StatisticName:"TrophyCount",Version:"0",Value:a};p.push(q);q={StatisticName:"League",Version:"0",Value:e};p.push(q);q={StatisticName:"Wins",Version:"0",Value:g};p.push(q);q={StatisticName:"TotalGamesCompleted",Version:"0",Value:k};p.push(q);q={StatisticName:"LongestWinStreak",Value:n};p.push(q);q={StatisticName:"BestDriftScore",Version:"0",Value:l};p.push(q);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:p});
if(100>=Number(f.Score))return a={TrophyCount:a,League:e},{Result:a};k=JSON.parse(c.Data.SubdivisionTrophyRanges);c=43;for(f=0;f<k.subdivisions.length;f++)if(d<k.subdivisions[f]){c=f;break}d=[];d.push({Key:b.envIndex+"_"+b.courseIndex+"_RecPos",Value:b.recordingPos});d.push({Key:b.envIndex+"_"+b.courseIndex+"_RecRot",Value:b.recordingRot});d.push({Key:b.envIndex+"_"+b.courseIndex+"_RecHeader",Value:b.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:d});d=server.GetTitleInternalData({Key:"RecSubDivision"+
c}).Data["RecSubDivision"+c];if(void 0==d)d=[],k={e:b.envIndex,c:b.courseIndex,uId:currentPlayerId},d.push(k);else{d=JSON.parse(d);k={e:b.envIndex,c:b.courseIndex,uId:currentPlayerId};g=!1;for(f=n=0;f<d.length;f++)d[f].uId==currentPlayerId&&n++;if(2<n)return a={TrophyCount:a,League:e},{Result:a};for(f=0;f<d.length;f++)d[f].e==b.envIndex&&d[f].c==b.courseIndex&&(g=!0,d[f]=k);0==g&&d.push(k)}d=JSON.stringify(d);server.SetTitleInternalData({Key:"RecSubDivision"+c,Value:d});a={TrophyCount:a,League:e};
return{Result:a}};
function UpdateExperience(b,h,a,c,d,e){b=JSON.parse(getCatalogItem(b,h).CustomData)[a];h=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;h=h[h.length-1];e=e||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;e=GetValueFromStatistics(e,"Experience",0);if(e>=h)return h;if(isNaN(Number(b)))a=Number(b.length),c>=a&&(c=a-1),c=Number(b[c]);else if(c=Number(b),0===c)return e;e=Math.min(e+c,h);if(!d)return e;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:e}]});return e}
handlers.generateDaily=function(b,h){var a,c=new Date;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var d=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(d.DailyStatus);if(0==a){var c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e;tParsed=JSON.parse(c.Data.DailyMissionData);e=Number(tParsed.minutesToRefresh);c=new Date;c.getTime()-Number(d.timeStamp)>6E4*Number(e)&&(a=1)}if(1!=a)return generateErrObj("DailyStatus is: "+
a+". Should be 1")}a=2;c=c.getTime();a={DailyMissionStatus:JSON.stringify({DailyStatus:a,dailyMissionClaimStatus:[0,0,0,0,0,0,0,0],timeStamp:c})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK"}};
handlers.getDailyMissionStatus=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c,a=[0,0,0,0,0,0,0,0],d=-1;c=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=c.Data.DailyMissionStatus){var e=JSON.parse(c.Data.DailyMissionStatus.Value);c=Number(e.DailyStatus);var g=a.length;g>e.dailyMissionClaimStatus.length&&(g=e.dailyMissionClaimStatus.length);for(var f=0;f<g;f++)a[f]=e.dailyMissionClaimStatus[f];
0==c&&(g=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),tParsed=JSON.parse(g.Data.DailyMissionData),g=Number(tParsed.minutesToRefresh),f=new Date,f.getTime()-Number(e.timeStamp)>6E4*Number(g)?(c=2,a=[0,0,0,0,0,0,0,0],e=f.getTime(),e={DailyStatus:c,dailyMissionClaimStatus:a,timeStamp:e},e=JSON.stringify(e),e={DailyMissionStatus:e},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:e})):d=60*Number(g)-Math.floor((f.getTime()-Number(e.timeStamp))/1E3))}else c=2,
f=new Date,e=f.getTime(),e={DailyStatus:c,dailyMissionClaimStatus:a,timeStamp:e},e=JSON.stringify(e),e={DailyMissionStatus:e},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:e});return{Result:"OK",Message:" ",DailyStatus:{status:c,claimStatus:a,timeRemaining:d}}};handlers.getServerTime=function(b,h){return{time:new Date}};
handlers.iapMade=function(b,h){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["IAPValue"]}).Statistics,a=Number(GetValueFromStatistics(a,"IAPValue",0));switch(b.bundle){case "co.tamatem.downshiftdrift.gold01":a+=99;break;case "co.tamatem.downshiftdrift.gold02":a+=499;break;case "co.tamatem.downshiftdrift.gold03":a+=999;break;case "co.tamatem.downshiftdrift.gold04":a+=1999;break;case "co.tamatem.downshiftdrift.gold05":a+=4999;break;case "co.tamatem.downshiftdrift.gold06":a+=
9999;break;case "co.tamatem.downshiftdrift.bundle01":a+=599;break;default:1==b.debug&&log.debug("InvalidPurchaseParameter")}var c=[];c.push({StatisticName:"IAPValue",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c})};
handlers.initServerData=function(b){b=[];var h={StatisticName:"TrophyCount",Version:"0",Value:"0"};b.push(h);h={StatisticName:"League",Version:"0",Value:"0"};b.push(h);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var h={0:"Owned"},a=0;a<b.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[a].ItemInstanceId,Data:h});b=[];b.push("FordFocus");b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b});h={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:h});h={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:h});h={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:h});h=[];h.push("Engine");h=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:h});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});h={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:h})};
handlers.openChest=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<b.levelUpRewardIndex){var c=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),d={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:d}):c=a.Data.LastLevelReward.Value;var e=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,g=GetValueFromStatistics(a,"Experience",0);0==g&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var f=e.length,a=0;a<e.length;a++)if(!(g>=e[a])){f=a;break}Number(b.levelUpRewardIndex)<=Number(c)&&generateFailObj("already got reward for level: "+c);if(Number(b.levelUpRewardIndex)<=Number(f))c=Number(b.levelUpRewardIndex),d.LastLevelReward=c,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:d}),a=""+c,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",PlayFabId:currentPlayerId,ItemIds:a});else return generateFailObj("You haven't reached this level yet")}c=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<b.currCost){if("OK"!=checkBalance(b.currType,b.currCost,c.VirtualCurrency.SC,c.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.currType,
Amount:b.currCost});updateCurrencySpentStatistic(b.currType,b.currCost)}for(var k in b.currencyReq)0<b.currencyReq[k]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:k,Amount:b.currencyReq[k]});for(k in b.carCardsRequest)if(b.carCardsRequest.hasOwnProperty(k)){d=!1;for(a=0;a<c.Inventory.length;a++)if(c.Inventory[a].ItemId==k&&"CarCards"==c.Inventory[a].CatalogVersion){d=void 0==c.Inventory[a].CustomData?Number(b.carCardsRequest[k]):void 0==c.Inventory[a].CustomData.Amount?
Number(b.carCardsRequest[k]):isNaN(Number(c.Inventory[a].CustomData.Amount))?Number(b.carCardsRequest[k]):Number(c.Inventory[a].CustomData.Amount)+Number(b.carCardsRequest[k]);d={Amount:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[a].ItemInstanceId,Data:d});d=!0;break}0==d&&(a=[k],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),d={Amount:b.carCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:d}))}for(k in b.partCardsRequest)if(b.partCardsRequest.hasOwnProperty(k)){d=!1;for(a=0;a<c.Inventory.length;a++)if(c.Inventory[a].ItemId==k&&"PartCards"==c.Inventory[a].CatalogVersion){d=void 0==c.Inventory[a].CustomData?Number(b.partCardsRequest[k]):void 0==c.Inventory[a].CustomData.Amount?Number(b.partCardsRequest[k]):isNaN(Number(c.Inventory[a].CustomData.Amount))?Number(b.partCardsRequest[k]):Number(c.Inventory[a].CustomData.Amount)+Number(b.partCardsRequest[k]);
d={Amount:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[a].ItemInstanceId,Data:d});d=!0;break}0==d&&(a=[k],a=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:a}),d={Amount:b.partCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:d}))}k=server.GetUserInventory({PlayFabId:currentPlayerId});b.chestId&&0>=b.levelUpRewardIndex&&
(c=UpdateExperience("Chests",b.chestId,"xpGain",0,!0),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["ChestsOpened"]}).Statistics,d=Number(GetValueFromStatistics(a,"ChestsOpened",0)),d++,a=[],a.push({StatisticName:"ChestsOpened",Value:d}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}),k.Experience=c);return generateInventoryChange("InventoryUpdated",k)};
handlers.purchaseBMItem=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>b.itemId||3<b.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+b.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),c=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+b.itemId].Value.split("_"),d=c.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var e;e=2>b.itemId?"PartCards":"CarCards";var g=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),d=checkBalance(a[1],g,d,d);if("OK"!=d)return d;for(var f,k,d=0;d<c.Inventory.length;d++)if(c.Inventory[d].ItemId==a[0]&&c.Inventory[d].CatalogVersion==e){f=c.Inventory[d].ItemInstanceId;void 0===c.Inventory[d].CustomData?k={Amount:1}:void 0===c.Inventory[d].CustomData.Amount?k={Amount:1}:(k=Number(c.Inventory[d].CustomData.Amount)+1,isNaN(k)&&(k=1),k={Amount:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:f,Data:k});break}void 0===f&&(f=[],f.push(a[0]),f=server.GrantItemsToUser({CatalogVersion:e,PlayFabId:currentPlayerId,ItemIds:f}).ItemGrantResults[0].ItemInstanceId,void 0===f?generateErrObj("grantRequest denied"):(k={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:k})));f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:g});updateCurrencySpentStatistic(a[1],g);g=a[0]+"_"+a[1]+"_"+a[2]+"_"+
(parseInt(a[3])+1)+"_"+a[4];c={};c["BMItem"+b.itemId]=g;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});k=[{ItemId:a[0],CatalogVersion:e,CustomData:k}];e={};e[f.VirtualCurrency]=f.Balance;a=b.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];d={Inventory:k,VirtualCurrency:e};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:d,BMItemChange:a}};
handlers.purchaseItems=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetUserInventory({PlayFabId:currentPlayerId}),d=c.VirtualCurrency.SC,e=c.VirtualCurrency.HC;switch(b.purchaseType){case "carUpgrade":return upgradeCar(b,c,d,e);case "partUpgrade":return upgradePart(b,c,d,e);case "custPurchase":for(var g=server.GetCatalogItems({CatalogVersion:"Customization"}),f,k=0,a="SC",l=0;l<g.Catalog.length;l++)if(g.Catalog[l].ItemId==b.custId){f=
g.Catalog[l];cardInfo=JSON.parse(g.Catalog[l].CustomData);k=b.custVal+",Cost";a=cardInfo[b.custVal+",Curr"];k=cardInfo[k];e=checkBalance(a,k,d,e);if("OK"!=e)return e;break}if(void 0==f)return generateErrObj("Customization does not exist in catalog.");for(var n,p,l=0;l<c.Inventory.length;l++)if(c.Inventory[l].ItemId==b.custId){n=c.Inventory[l];p=c.Inventory[l].ItemInstanceId;if(void 0!=n.CustomData&&String(b.custVal)in n.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
n){log.info("user doesn't have customization category. Granting ... ");e=[];e.push(b.custId);e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e});if(0==e.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");p=e.ItemGrantResults[0].ItemInstanceId}e={};e[String(b.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:p,Data:e});p=[{ItemId:b.custId,
CatalogVersion:"Customization",CustomData:e}];0<k?(e=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:k}),updateCurrencySpentStatistic(a,k),a={},a[e.VirtualCurrency]=e.Balance,l={Inventory:p,VirtualCurrency:a}):l={Inventory:p};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":k=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});p=!1;for(l=a=0;l<k.Catalog.length;l++)if(k.Catalog[l].ItemId==b.packId){a=k.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(k.Catalog[l].CustomData);p=!0;break}if(0==p)return generateErrObj("pack with ID: "+b.packId+" not found in catalog.");if(0>=a)return generateErrObj("pack with ID: "+b.packId+" shouldn't have negative cost.");if(a>e)return generateFailObj("Not enough HC.");e=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:a});updateCurrencySpentStatistic("HC",a);k=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});
a={};a[k.VirtualCurrency]=k.Balance;a[e.VirtualCurrency]=e.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:a});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(b){b=CheckMaintenanceAndVersion(b);return"OK"!=b?generateMaintenanceOrUpdateObj(b):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(b){b=server.GetUserInventory({PlayFabId:currentPlayerId});var h=Number(b.VirtualCurrency.SC);if(isNaN(h)||0>h)h=0;var a=Number(b.VirtualCurrency.HC);if(isNaN(a)||0>a)a=0;var c=[];c.push({StatisticName:"CurrentMoney",Version:"0",Value:h});c.push({StatisticName:"CurrentGold",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});for(var h=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),
c=!1,d=0;d<b.Inventory.length;d++)if("CarsProgress"==b.Inventory[d].CatalogVersion){var c=!0,e=checkCarDataValidity(b.Inventory[d],h);if("PlayFabError"==e||void 0===e)return generateErrObj("PlayfabError");"OK"==e?log.debug("Data for "+b.Inventory[d].ItemId+" OK"):b.Inventory[d].CustomData=e;b.Inventory[d].CustomData.Pr=recalculateCarPr(b.Inventory[d].CustomData,b.Inventory[d].ItemId,h,a);e={};e.Pr=b.Inventory[d].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[d].ItemInstanceId,
Data:e})}return!1===c?(b=[],b.push("FordFocus"),b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b}),h={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:h}),h={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,
Data:h}),h={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:h}),generateErrObj("UserHasNoCars ... reiniting")):b};
handlers.retrieveBlackMarket=function(b,h){var a=CheckMaintenanceAndVersion(b);if(!0===b.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=[];c.push("BMTime");for(var d=0;4>d;d++)c.push("BMItem"+d);d=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:c});if(void 0===d.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var c=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:e});if(!0===b.reset){a="HC";d=200;c=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==c.Data.BlackMarketResetCost&&(d=c.Data.BlackMarketResetCost.split("_"),a=d[0],d=Number(d[1]));if(0<d){c=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,d,c.VirtualCurrency.SC,c.VirtualCurrency.HC))return generateFailObj("not enough money");c=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:d});updateCurrencySpentStatistic(a,d);a=GenerateBlackMarket(currentPlayerId);d={};d[c.VirtualCurrency]=c.Balance;d={VirtualCurrency:d};
a.InventoryChange=d;return a}return GenerateBlackMarket(currentPlayerId)}return c.getTime()-parseInt(d.Data.BMTime.Value)>6E4*parseInt(e.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,d),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,d)};
handlers.rewardUsers=function(b,h){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,c=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),d=0;0>=c&&(a=Number(a)/3E3,d=Number(Math.floor(800*a)));c=Number(c)+d;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:c}]});return c};
handlers.startGame=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetTitleData({Key:"LeagueSubdivisions SubdivisionTrophyRanges TrophyGainRange TrophyLoseRange SubdivisionPrRanges TrophyDifferenceLimit".split(" ")}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TotalGames"]}).Statistics,a=GetValueFromStatistics(a,"TotalGames",0),a=Number(a)+1;1==b.debug&&log.debug("totalGamesStartedIs: "+a);var d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]}),e=0;0!=d.Statistics.length&&(e=d.Statistics[0].Value);for(var e=Number(e),g=JSON.parse(c.Data.SubdivisionTrophyRanges),f=JSON.parse(c.Data.LeagueSubdivisions),k=JSON.parse(c.Data.SubdivisionPrRanges),d=JSON.parse(c.Data.TrophyDifferenceLimit),l=Number(d.trophyReadjustRange),n=Number(d.maxDifference),p=d.subDivisionsToExclude,q=43,B=43,F,A=c.Data.TrophyGainRange.split("_"),E=c.Data.TrophyLoseRange.split("_"),d=Number(A[0]),c=Number(A[1]),A=Number(E[0]),E=Number(E[1]),
m=0;m<g.subdivisions.length;m++)if(e<Number(g.subdivisions[m])){q=m;m<g.subdivisions.length-1&&(B=m+1);break}F=Number(g.subdivisions[B])-Number(g.subdivisions[q]);0>=F&&(F=400);var u=server.GetTitleInternalData({Keys:"RecSubDivision"+q}).Data["RecSubDivision"+q],r=!1;void 0==u&&(r=!0);var y,t,z,I="noop",v="noop",m=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp","quitLastGame"]});t="false;";void 0!=m.Data.quitLastGame&&(t=m.Data.quitLastGame.Value);1==b.debug&&log.debug("didQuitLastGame: "+
t);B=!1;void 0==t&&(t="false");"true"==t&&(B=!0);if(void 0==m.Data||void 0==m.Data.lastOpp)v=I="noop";else for(t=m.Data.lastOpp.Value.split(","),m=0;m<t.length;m++)0==m&&(I=t[m]),1==m&&(v=t[m]);y=0==r?JSON.parse(u):[];var G=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>y.length&&(r=!0);var H=Array(y.length),C=0,u=Array(y.length);t=0;z=Array(y.length);for(var D=0,m=0;m<y.length;m++)1==r&&(G[5*Number(y[m].e)+Number(y[m].c)]=1),y[m].uId!=currentPlayerId&&(H[C]=y[m],C++,y[m].uId!=I&&(u[t]=y[m],t++,y[m].uId!=v&&
(z[D]=y[m],D++)));if(1==r){r=[];for(m=0;m<G.length;m++)0==G[m]&&r.push(m);r=r[Math.floor(Math.random()*r.length)];m=Math.floor(r/5);r%=5;v=server.GetTitleData({Keys:"MasterUser"});if(void 0!=v.Data.MasterUser&&(v=server.GetUserReadOnlyData({PlayFabId:v.Data.MasterUser,Keys:[m+"_"+r+"_RecPos",m+"_"+r+"_RecRot",m+"_"+r+"_RecHeader"]}),void 0!=v.Data&&void 0!=v.Data[m+"_"+r+"_RecPos"]&&void 0!=v.Data[m+"_"+r+"_RecRot"]&&void 0!=v.Data[m+"_"+r+"_RecHeader"])){f=!0;0==e?(e=c,f=!1):e-=A;1>=e&&(e=1);var w=
[],e={StatisticName:"TrophyCount",Version:"0",Value:e};w.push(e);e={StatisticName:"League",Version:"0",Value:x};w.push(e);e={StatisticName:"TotalGames",Version:"0",Value:a};w.push(e);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:w});a={trophyWin:Math.floor((Number(c)+Number(d))/2),trophyLose:Math.floor((Number(E)+Number(A))/2),quitLastGame:"true"};0==f&&(a.trophyWin=0,a.trophyLose=0);1==B&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});
return{Result:"OK",RecType:"TheStig",PosData:v.Data[m+"_"+r+"_RecPos"].Value,RotData:v.Data[m+"_"+r+"_RecRot"].Value,HeaderData:v.Data[m+"_"+r+"_RecHeader"].Value,TrophyLose:A,TrophyWin:c,Opp:"TheStig"}}}if(0==C)return generateErrObj("no valid recording found for this subdivision");x=H;0<t&&(C=t,x=u);0<D&&(C=D,x=z);u=Math.floor(Math.random()*C);u>=C&&(u=C-1);t=Math.min(C,3);z=Array(t);for(m=0;m<t;m++)z[m]=0>=u?x[m]:u>=C-1?x[C-1-m]:x[u-Math.floor(t/2)+m];x=Math.floor(Math.random()*t);t=z[x].uId;u=
z[x].e;z=z[x].c;D=server.GetUserReadOnlyData({PlayFabId:t,Keys:[u+"_"+z+"_RecPos",u+"_"+z+"_RecRot",u+"_"+z+"_RecHeader"]});if(void 0==D)return generateErrObj("Did not find recording for this user: "+t);var C=server.GetPlayerCombinedInfo({PlayFabId:t,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),r=e,x=Number(calculateLeague(e)),
H="UserGenerated",v=0<x?Number(g.subdivisions[f.leagues[x-1]]):0,G=x>=f.leagues.length-1?2*v:Number(g.subdivisions[f.leagues[x]]);1==b.debug&&log.debug("I bet it will crash after this");g=JSON.parse(D.Data[u+"_"+z+"_RecHeader"].Value);1==b.debug&&log.debug("or not");void 0!=g&&(w=g.Trophies);w=Number(w);y=!0;1==b.debug&&log.debug("Adjusting trophies");if(void 0!=p)for(1==b.debug&&log.debug("excludedSubdivisionsFromTrophyAdjustment: "+p),m=0;m<p.length;m++)if(q==Number(p[m])){1==b.debug&&log.debug("in excluded subdivision: "+
q);y=!1;break}1==y&&Number(Math.abs(r-w))>=n&&(1==b.debug&&log.debug("generating new trophies. Reason: user trophies: "+r+" vs opponent trophies: "+w),w=r-l+Math.floor(Math.random()*l*2),g.Trophies=w,1==b.debug&&log.debug("performing stringify on recordingData header"),D.Data[u+"_"+z+"_RecHeader"].Value=JSON.stringify(g));0>=G-v?(l=E,n=d):Number(Math.abs(r-w))>Number(F)?(l=Math.floor((A+E)/2)-1+Math.floor(3*Math.random()),n=Math.floor((c+d)/2)-1+Math.floor(3*Math.random())):(l=A+Math.floor((E-A)/
2*((r-w)/(G-v)+1)),n=d+Math.floor((c-d)/2*((w-r)/(G-v)+1)));1==b.debug&&log.debug("Opponent's PR is TOO DAMN HIGH! "+g.Pr+" vs "+Number(k.subdivisions[Number(f.leagues[x-1])+1])+". You are in subdivision: "+Number(f.leagues[x-1]+1));g.Pr>Number(k.subdivisions[Number(f.leagues[x-1])+1])&&(l=Math.floor((A+E)/2)-1+Math.floor(3*Math.random()),n=Math.floor((c+d)/2)-1+Math.floor(3*Math.random()),H="MobyDick");d=!0;0==e?(d=!1,e=c):(e-=Number(l),1>=e&&(e=1));w=[];e={StatisticName:"TrophyCount",Version:"0",
Value:e};w.push(e);e={StatisticName:"League",Version:"0",Value:x};w.push(e);e={StatisticName:"TotalGames",Version:"0",Value:a};w.push(e);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:w});a={trophyWin:n,trophyLose:l,lastOpp:t+","+I,quitLastGame:"true"};0==d&&(a.trophyWin=0,a.trophyLose=0);1==B&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:H,PosData:D.Data[u+"_"+z+"_RecPos"].Value,RotData:D.Data[u+"_"+z+
"_RecRot"].Value,HeaderData:D.Data[u+"_"+z+"_RecHeader"].Value,TrophyLose:l,TrophyWin:n,Opp:C.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(b,h){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var c=server.GetUserInventory({PlayFabId:currentPlayerId}),d=[],e="-1",g={},f={PaintJobs:{itemOwned:"no",itemCustData:b.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:b.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:b.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:b.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:b.wsId,carItemId:"WindshieldId"}},a=0;a<c.Inventory.length;a++)c.Inventory[a].ItemId==b.carId&&"CarsProgress"==c.Inventory[a].CatalogVersion&&(e=c.Inventory[a].ItemInstanceId),c.Inventory[a].ItemId in f&&(f[c.Inventory[a].ItemId].itemOwned="yes",f[c.Inventory[a].ItemId].itemCustData in c.Inventory[a].CustomData?g[f[c.Inventory[a].ItemId].carItemId]=f[c.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+c.Inventory[a].ItemId+" "+f[c.Inventory[a].ItemId].itemCustData));if("-1"==
e)return generateFailObj("User does not own car with id: "+b.carId);for(var k in f)f.hasOwnProperty(k)&&"no"==f[k].itemOwned&&d.push(k);if(g=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e,Data:g});k=[{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:g}];if(0<d.length)for(d=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:d}),c={0:"Owned"},
a=0;a<d.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[a].ItemInstanceId,Data:c});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:k}}};
function upgradeCar(b,h,a,c){for(var d=server.GetCatalogItems({CatalogVersion:"CarCards"}),e=!1,g,f=0;f<h.Inventory.length;f++)if(h.Inventory[f].ItemId==b.carId&&"CarsProgress"==h.Inventory[f].CatalogVersion){e=!0;g=h.Inventory[f];break}for(var k,f=0;f<d.Catalog.length;f++)if(d.Catalog[f].ItemId==b.carId){k=JSON.parse(d.Catalog[f].CustomData);break}if(void 0===k)return generateErrObj("CardNotFoundForCarwithID: "+b.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===e){var l=parseInt(g.CustomData.CarLvl)+1;if(l>=Number(k.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var n=getObjectValueFromLevel(k,"currCostPerLvl",l),f=checkBalance(k.currType,n,a,c);if("OK"!=f)return f;a=getObjectValueFromLevel(k,"cardCostPerLvl",l);g.CustomData.CarLvl=l;for(var e=!1,p,f=0;f<h.Inventory.length;f++)if(h.Inventory[f].ItemId==b.carId&&"CarCards"==h.Inventory[f].CatalogVersion){e=!0;try{if(void 0===h.Inventory[f].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===h.Inventory[f].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(h.Inventory[f].CustomData.Amount)>=a)h.Inventory[f].CustomData.Amount-=a,p={Amount:h.Inventory[f].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.Inventory[f].ItemInstanceId,Data:p});else return generateFailObj("Insufficient cards for real: "+h.Inventory[f].CustomData.Amount+" vs "+a)}catch(B){return generateFailObj("Insufficient cards")}break}if(!1===
e)return generateFailObj("No cards found");h=recalculateCarPr(g.CustomData,g.ItemId,d,void 0);f={CarLvl:l,Pr:h};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemInstanceId,Data:f});var q;0<n&&(q=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:k.currType,Amount:n}),updateCurrencySpentStatistic(k.currType,n));b=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:f}];p=
{};f={Inventory:b};void 0!=q&&(p[q.VirtualCurrency]=q.Balance,f.VirtualCurrency=p);f.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+k.rarity,l,!0);return generateInventoryChange("InventoryUpdate",f)}e=!1;for(f=0;f<h.Inventory.length;f++)if(h.Inventory[f].ItemId==b.carId&&"CarCards"==h.Inventory[f].CatalogVersion){e=!0;try{if(void 0===h.Inventory[f].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===h.Inventory[f].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(h.Inventory[f].CustomData.Amount)>=Number(k.cardCostPerLvl[1]))n=h.Inventory[f].ItemInstanceId,h.Inventory[f].CustomData.Amount-=k.cardCostPerLvl[1],p={Amount:h.Inventory[f].CustomData.Amount};else return generateFailObj("Insufficient cards: "+h.Inventory[f].CustomData.Amount+" vs "+k.cardCostPerLvl[1]+".")}catch(B){return generateFailObj("Insufficient cards: "+B)}break}if(0==e)return generateFailObj("No cards found");f=checkBalance(k.currType,k.currCostPerLvl[1],a,c);if("OK"!=f)return f;
g=[];g.push(b.carId);g=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:g});if(!1===g.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:n,Data:p});0<k.currCostPerLvl[1]&&(q=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:k.currType,Amount:k.currCostPerLvl[1]}),updateCurrencySpentStatistic(k.currType,k.currCostPerLvl[1]));f={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:f});f={TiresLvl:"0",TurboLvl:"0",PaintId:k.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,
Data:f});f={PlatesId:"0",WindshieldId:"0",Pr:Number(k.basePr)+k.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:f});d=g=!1;for(f=0;f<h.Inventory.length;f++)if("PaintJobs"==h.Inventory[f].ItemId){d=!0;void 0!=h.Inventory[f].CustomData?k.defaultPaintID in h.Inventory[f].CustomData?g=!0:(l={},l[k.defaultPaintID]="Owned"):(l={},l[k.defaultPaintID]="Owned");void 0!=l&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:h.Inventory[f].ItemInstanceId,Data:l});break}0==d&&(paintToGive=[],paintToGive.push("PaintJobs"),h=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),l={},l[k.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:l}));f={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:k.defaultPaintID,
DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:Number(k.basePr)+k.prPerLvl[1]};b=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:f}];0==g&&(p={},p[k.defaultPaintID]="Owned",b.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:p}));p={};f={Inventory:b};void 0!=q&&(p[q.VirtualCurrency]=q.Balance,f.VirtualCurrency=p);f.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+k.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",
f)}
function upgradePart(b,h,a,c){for(var d=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),e=!1,g=0;g<d.Catalog.length;g++)if(d.Catalog[g].ItemId==b.carId){e=!0;break}if(!1===e)return generateErrObj("car with ID: "+b.carId+" not found in catalog.");for(var d=server.GetCatalogItems({CatalogVersion:"PartCards"}),e=!1,f,g=0;g<d.Catalog.length;g++)if(d.Catalog[g].ItemId==b.partId){f=JSON.parse(d.Catalog[g].CustomData);e=!0;break}if(0==e)return generateErrObj("part with ID: "+b.partId+" not found in catalog.");for(var e=
!1,k,g=0;g<h.Inventory.length;g++)if(h.Inventory[g].ItemId==b.carId&&"CarsProgress"==h.Inventory[g].CatalogVersion){e=!0;k=h.Inventory[g];break}if(!1===e)return generateFailObj("car with ID: "+b.carId+" not found in user inventory.");for(var l=!1,e=0,n={},g=0;g<h.Inventory.length;g++)if(h.Inventory[g].ItemId==b.partId&&"PartCards"==h.Inventory[g].CatalogVersion){var l=!0,p={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},e=
parseInt(k.CustomData[p[b.partId]])+1;if(e>=Number(f.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var q=getObjectValueFromLevel(f,"cardCostPerLvl",e),B=getObjectValueFromLevel(f,"currCostPerLvl",e);n[p[b.partId]]=e;k.CustomData[p[b.partId]]=e;var F;a=checkBalance(f.currType,B,a,c);if("OK"!=a)return a;try{if(void 0!==h.Inventory[g].CustomData&&void 0!==h.Inventory[g].CustomData.Amount&&h.Inventory[g].CustomData.Amount>=q)h.Inventory[g].CustomData.Amount-=q,F={Amount:h.Inventory[g].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.Inventory[g].ItemInstanceId,Data:F});else return generateFailObj("Insufficient cards")}catch(E){return generateFailObj("Insufficient cards")}break}if(0==l)return generateFailObj("Part not found");var A;0<B&&(A=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:f.currType,Amount:B}),updateCurrencySpentStatistic(f.currType,B));g=recalculateCarPr(k.CustomData,k.ItemId,void 0,d);n.Pr=g;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:k.ItemInstanceId,Data:n});k={};g={Inventory:[{ItemId:b.partId,CatalogVersion:"PartCards",CustomData:F},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:n}]};void 0!==A&&(k[A.VirtualCurrency]=A.Balance,g.VirtualCurrency=k);g.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+f.rarity,e,!0);return generateInventoryChange("InventoryUpdatePart",g)};
