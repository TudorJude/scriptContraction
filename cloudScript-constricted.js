function checkCarDataValidity(b,k){if(void 0==b.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});for(var c=0,e=0;e<k.Catalog.length;e++)if(k.Catalog[e].ItemId==b.ItemId){var d=
JSON.parse(k.Catalog[e].CustomData),c=parseInt(d.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a})}catch(g){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:c}}return"OK"}function generateFailObj(b){return{Result:"Failed",Message:b}}
function generateErrObj(b){return{Result:"Error",Message:b}}
function CheckMaintenanceAndVersion(b){var k=!1,a="A.0.0.1";void 0!=b&&(k=b.debug,a=b.cVersion);if(void 0==a)return"update";b=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var c=b.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(c=b.Data.MinimumGameVersionActual_IOS);if(void 0==c)return"maintenance";for(var e=!1,c=c.split("."),d=0;3>d;d++){var g=0;a.length>d+1&&(g=Number(a[d+1]));var f=0;c.length>d&&
(f=Number(c[d]));if(g!=f){g<f&&(e=!0);break}}return 1==e?"update":1==k?"OK":b.Data.Maintenance?"false"==b.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(b){return"maintenance"==b?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(b,k){return{Result:"OK",Message:b,InventoryChange:k}}
function updateCurrencySpentStatistic(b,k){var a=[],c,e=0,d=Number(k);if(!(isNaN(d)||0>=d)&&("SC"==b&&(c="MoneySpent"),"HC"==b&&(c="GoldSpent"),void 0!=c)){var g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:[c]});0<g.Statistics.length&&(e=Number(g.Statistics[0].Value));a.push({StatisticName:c,Version:"0",Value:e+d});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a})}}
function checkBalance(b,k,a,c){if("SC"==b){if(a<k)return generateFailObj("NotEnoughSC")}else if(c<k)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(b){var k=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==k.Data.LeagueSubdivisions||void 0==k.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(k.Data.LeagueSubdivisions).leagues,k=JSON.parse(k.Data.SubdivisionTrophyRanges).subdivisions,c=0;c<a.length;c++)if(!(Number(b)>Number(k[a[c]])))return c;return a.length-1}
function recalculateCarPr(b,k,a,c){var e=0,d;d=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<d.Catalog.length;a++)if(d.Catalog[a].ItemId==k){e=JSON.parse(d.Catalog[a].CustomData);e=parseInt(e.basePr)+getObjectValueFromLevel(e,"prPerLvl",b.CarLvl);break}c=void 0===c?server.GetCatalogItems({CatalogVersion:"PartCards"}):c;b={Exhaust:b.ExhaustLvl,Engine:b.EngineLvl,Gearbox:b.GearboxLvl,Suspension:b.SuspensionLvl,Tires:b.TiresLvl,Turbo:b.TurboLvl};for(a=0;a<c.Catalog.length;a++)k=
JSON.parse(c.Catalog[a].CustomData),e+=getObjectValueFromLevel(k,"prPerLvl",Number(b[c.Catalog[a].ItemId]));return e}
function GenerateBlackMarket(b){var k=1,a=server.GetPlayerStatistics({PlayFabId:b,StatisticNames:["League"]});0!=a.Statistics.length&&(k=a.Statistics[0].Value.toString());0>=Number(k)&&(k=1);for(var c=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:b,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),e=JSON.parse(a.Data.BlackMarketRarityBias),d,g=[],f=[],h=[],l=0;l<c.Catalog.length;l++){d=JSON.parse(c.Catalog[l].CustomData);if(void 0==d)return generateErrObj("Part card "+
c.Catalog[l].ItemId+" has no custom data.");0==d.rarity&&g.push(c.Catalog[l].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy);1==d.rarity&&f.push(c.Catalog[l].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy);2==d.rarity&&h.push(c.Catalog[l].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy)}c={};c.BMTime=(new Date).getTime();l=Math.floor(Math.random()*g.length);c.BMItem0=g[l];2<=g.length&&g.splice(l,1);Math.floor(100*Math.random())<Number(e.parts[2])?
g=h:(l=Number(e.parts[0])+Number(e.parts[1]),Math.floor(Math.random()*l)>=Number(e.parts[0])&&(g=f));c.BMItem1=g[Math.floor(Math.random()*g.length)];d=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var n,g=[],f=[],h=[],l=0;l<d.Catalog.length;l++){n=JSON.parse(d.Catalog[l].CustomData);if(void 0==n)return generateErrObj("Car card "+d.Catalog[l].ItemId+" has no custom data.");Number(n.unlockedAtRank)>=Number(k)+1||("0"==n.rarity&&g.push(d.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+
"_0_"+n.BMpriceIncrPerBuy),"1"==n.rarity&&f.push(d.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy),"2"==n.rarity&&h.push(d.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy))}k=Math.floor(Math.random()*g.length);c.BMItem2=g[k];2<=g.length&&g.splice(k,1);0>=f.length&&(0>=h.length?h=f=g:f=h);0>=h.length&&(h=f);Math.floor(100*Math.random())<Number(e.cars[2])?g=h:(l=Number(e.cars[0])+Number(e.cars[1]),Math.floor(Math.random()*l)>=Number(e.cars[0])&&
(g=f));k=Math.floor(Math.random()*g.length);c.BMItem3=g[k];server.UpdateUserInternalData({PlayFabId:b,Data:c});c.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return c}function GetCurrentBlackMarket(b,k){var a={},c=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:b,Keys:e});a.BMTime=60*parseInt(e.Data.BlackMarketResetMinutes)-Math.floor((c.getTime()-k.Data.BMTime.Value)/1E3);for(c=0;4>c;c++)a["BMItem"+c]=k.Data["BMItem"+c].Value;return a}
function GetValueFromStatistics(b,k,a){for(var c,e=0;e<b.length;e++)b[e].StatisticName===k&&(c=b[e]);return void 0===c?void 0!==a?a:0:Number(c.Value)}function GetVersionFromStatistics(b,k,a){for(var c,e=0;e<b.length;e++)b[e].StatisticName===k&&(c=b[e]);return void 0===c?void 0!==a?a:0:Number(c.Version)}function getCatalogItem(b,k){for(var a=server.GetCatalogItems({CatalogVersion:b}),c=0;c<a.Catalog.length;c++)if(a.Catalog[c].ItemId===k)return a.Catalog[c]}
function getObjectValueFromLevel(b,k,a,c){c||(c=0);if(!b[k]||!b[k].length)return c;var e=Number(b[k].length);a>=e&&(a=e-1);return Number(b[k][a])||c}function GiveUserPart(b,k,a,c){GiveUserCard(b,"PartsCards",k,a,c)}function GiveUserCarCard(b,k,a,c){GiveUserCard(b,"CarCards",k,a,c)}
function GiveUserCard(b,k,a,c,e){a=Number(a)<Number(c)?Number(a)+Math.floor(Math.random()*(Number(c)-Number(a))):Number(a);log.debug("cardsAmount: "+a);var d,g;for(c=0;c<e.Inventory.length;c++)if(e.Inventory[c].ItemId==b&&e.Inventory[c].CatalogVersion==k){d=e.Inventory[c].ItemInstanceId;g=void 0==e.Inventory[c].CustomData?a:void 0==e.Inventory[c].CustomData.Amount?a:isNaN(Number(e.Inventory[c].CustomData.Amount))?a:Number(e.Inventory[c].CustomData.Amount)+Number(g);break}if(void 0==d&&(g=a,d=[],d.push(b),
d=server.GrantItemsToUser({CatalogVersion:k,PlayFabId:e.PlayFabId,ItemIds:d}).ItemGrantResults[0].ItemInstanceId,void 0===d))return generateErrObj("grantRequest denied");a={Amount:g};log.debug("new amount is: "+g);server.UpdateUserInventoryItemCustomData({PlayFabId:e.PlayFabId,ItemInstanceId:d,Data:a});return{ItemId:b,CatalogVersion:k,CustomData:a}}
handlers.buyChest=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(b.curr,b.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<b.cost){a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.cost});updateCurrencySpentStatistic(b.curr,b.cost);var c={};c[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",
{VirtualCurrency:c})}return generateInventoryChange("ChestBought",{})};
handlers.claimDailyMission=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a=Number(b.mIdx),c=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==c.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var c=JSON.parse(c.Data.DailyMissionStatus.Value),e=c.dailyMissionClaimStatus;if(a>=e.length)return generateErrObj("Unlock index is out of bounds of playerData claim mission status array");if(1==
e[a])return generateFailObj("Mission already claimed");e[a]=1;c={DailyMissionStatus:JSON.stringify({DailyStatus:c.DailyStatus,dailyMissionClaimStatus:e,timeStamp:c.timeStamp})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});c=JSON.parse(c.Data.DailyMissionData);if(a>=c.missionData.length)return generateErrObj("Unlock index is out of bounds of titleData claim mission reward array");a=c.missionData[a].split("_");
a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:Number(a[2])});c={};c[a.VirtualCurrency]=a.Balance;return generateInventoryChange("MissionClaimed",{VirtualCurrency:c})};
handlers.endDaily=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==a.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");for(var c=JSON.parse(a.Data.DailyMissionStatus.Value),a=c.dailyMissionClaimStatus,e,d=-1,g=0;g<c.dailyMissionClaimStatus.length;g++)if(0==a[g])return generateErrObj("Not all missions were claimed!");
a=[0,0,0,0,0,0,0,0];e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});tParsed=JSON.parse(e.Data.DailyMissionData);var g=Number(tParsed.minutesToRefresh),f=new Date;f.getTime()-Number(c.timeStamp)>6E4*Number(g)?(e=2,c=f.getTime()):(e=0,d=60*Number(g)-Math.floor((f.getTime()-Number(c.timeStamp))/1E3),c=c.timeStamp);c={DailyMissionStatus:JSON.stringify({DailyStatus:e,dailyMissionClaimStatus:a,timeStamp:c})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});
var c=server.GetUserInventory({PlayFabId:currentPlayerId}),h;for(h in b.currencyReq)0<b.currencyReq[h]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h,Amount:b.currencyReq[h]});for(h in b.carCardsRequest)if(b.carCardsRequest.hasOwnProperty(h)){f=!1;for(g=0;g<c.Inventory.length;g++)if(c.Inventory[g].ItemId==h&&"CarCards"==c.Inventory[g].CatalogVersion){f=void 0==c.Inventory[g].CustomData?Number(b.carCardsRequest[h]):void 0==c.Inventory[g].CustomData.Amount?Number(b.carCardsRequest[h]):
isNaN(Number(c.Inventory[g].CustomData.Amount))?Number(b.carCardsRequest[h]):Number(c.Inventory[g].CustomData.Amount)+Number(b.carCardsRequest[h]);f={Amount:f};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[g].ItemInstanceId,Data:f});f=!0;break}0==f&&(g=[h],g=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:g}),f={Amount:b.carCardsRequest[h]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,
Data:f}))}for(h in b.partCardsRequest)if(b.partCardsRequest.hasOwnProperty(h)){f=!1;for(g=0;g<c.Inventory.length;g++)if(c.Inventory[g].ItemId==h&&"PartCards"==c.Inventory[g].CatalogVersion){f=void 0==c.Inventory[g].CustomData?Number(b.partCardsRequest[h]):void 0==c.Inventory[g].CustomData.Amount?Number(b.partCardsRequest[h]):isNaN(Number(c.Inventory[g].CustomData.Amount))?Number(b.partCardsRequest[h]):Number(c.Inventory[g].CustomData.Amount)+Number(b.partCardsRequest[h]);f={Amount:f};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.Inventory[g].ItemInstanceId,Data:f});f=!0;break}0==f&&(g=[h],g=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:g}),f={Amount:b.partCardsRequest[h]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:f}))}return{Result:"OK",Message:"DailyCompleted",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId}),DailyStatus:{status:e,claimStatus:a,timeRemaining:d}}};
handlers.endGame=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),a=0,e,d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=d.Statistics.length&&(a=d.Statistics[0].Value,1==b.debug&&log.debug("getting trophy count "+d.Statistics[0].Value));e=a=Number(a);var g=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose",
"trophyWin","LastGameOutcome","LatestStreak"]}),f;f=void 0==g.Data.trophyLose||void 0==g.Data.trophyWin?45:Number(g.Data.trophyLose.Value)+Number(g.Data.trophyWin.Value);var d=0,h="Loss";void 0!=g.Data.LatestStreak&&(d=Number(g.Data.LatestStreak.Value));1==isNaN(d)&&(d=0);void 0!=g.Data.LatestStreak&&(h=g.Data.LastGameOutcome.Value);void 0==h&&(h="Loss");g={quitLastGame:"false",LastGameOutcome:"Loss"};"rWin"==b.outcome&&(a+=f,g.LastGameOutcome="Win","Loss"==h?d=1:d++);g.LatestStreak=d;server.UpdateUserInternalData({PlayFabId:currentPlayerId,
Data:g});f=JSON.parse(b.recordingHeader);var l=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Wins","TotalGamesCompleted","LongestWinStreak","BestDriftScore","HighestLeagueReached"]}).Statistics,h=GetValueFromStatistics(l,"TotalGamesCompleted",0),h=Number(h)+1,g=GetValueFromStatistics(l,"Wins",0);"rWin"==b.outcome&&(g=Number(g)+1);var n=GetValueFromStatistics(l,"LongestWinStreak",0);GetVersionFromStatistics(l,"LongestWinStreak",0);Number(n)<d&&(n=d);var p=GetValueFromStatistics(l,
"BestDriftScore",0);Number(f.Score)>p&&(p=Number(f.Score));d=calculateLeague(a);l=GetValueFromStatistics(l,"HighestLeagueReached",1);d>l&&(l=d);var r=[];r.push({StatisticName:"TrophyCount",Value:a});r.push({StatisticName:"League",Value:d});r.push({StatisticName:"Wins",Value:g});r.push({StatisticName:"TotalGamesCompleted",Value:h});r.push({StatisticName:"LongestWinStreak",Value:n});r.push({StatisticName:"BestDriftScore",Value:p});r.push({StatisticName:"HighestLeagueReached",Value:l});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:r});if(100>=Number(f.Score))return a={TrophyCount:a,League:d},{Result:a};h=JSON.parse(c.Data.SubdivisionTrophyRanges);c=43;for(f=0;f<h.subdivisions.length;f++)if(e<h.subdivisions[f]){c=f;break}e=[];e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecPos",Value:b.recordingPos});e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecRot",Value:b.recordingRot});e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecHeader",Value:b.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e});
e=server.GetTitleInternalData({Key:"RecSubDivision"+c}).Data["RecSubDivision"+c];if(void 0==e)e=[],h={e:b.envIndex,c:b.courseIndex,uId:currentPlayerId},e.push(h);else{e=JSON.parse(e);h={e:b.envIndex,c:b.courseIndex,uId:currentPlayerId};g=!1;for(f=n=0;f<e.length;f++)e[f].uId==currentPlayerId&&n++;if(2<n)return a={TrophyCount:a,League:d},{Result:a};for(f=0;f<e.length;f++)e[f].e==b.envIndex&&e[f].c==b.courseIndex&&(g=!0,e[f]=h);0==g&&e.push(h)}e=JSON.stringify(e);server.SetTitleInternalData({Key:"RecSubDivision"+
c,Value:e});a={TrophyCount:a,League:d};return{Result:a}};
function UpdateExperience(b,k,a,c,e,d){b=JSON.parse(getCatalogItem(b,k).CustomData)[a];k=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;k=k[k.length-1];d=d||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;d=GetValueFromStatistics(d,"Experience",0);if(d>=k)return k;if(isNaN(Number(b)))a=Number(b.length),c>=a&&(c=a-1),c=Number(b[c]);else if(c=Number(b),0===c)return d;d=Math.min(d+c,k);if(!e)return d;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:d}]});return d}
handlers.generateDaily=function(b,k){var a,c=new Date;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var e=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(e.DailyStatus);if(0==a){var c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),d;tParsed=JSON.parse(c.Data.DailyMissionData);d=Number(tParsed.minutesToRefresh);c=new Date;c.getTime()-Number(e.timeStamp)>6E4*Number(d)&&(a=1)}if(1!=a)return generateErrObj("DailyStatus is: "+
a+". Should be 1")}a=2;c=c.getTime();a={DailyMissionStatus:JSON.stringify({DailyStatus:a,dailyMissionClaimStatus:[0,0,0,0,0,0,0,0],timeStamp:c})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK"}};
handlers.getDailyMissionStatus=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c,a=[0,0,0,0,0,0,0,0],e=-1;c=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=c.Data.DailyMissionStatus){var d=JSON.parse(c.Data.DailyMissionStatus.Value);c=Number(d.DailyStatus);var g=a.length;g>d.dailyMissionClaimStatus.length&&(g=d.dailyMissionClaimStatus.length);for(var f=0;f<g;f++)a[f]=d.dailyMissionClaimStatus[f];
0==c&&(g=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),tParsed=JSON.parse(g.Data.DailyMissionData),g=Number(tParsed.minutesToRefresh),f=new Date,f.getTime()-Number(d.timeStamp)>6E4*Number(g)?(c=2,a=[0,0,0,0,0,0,0,0],d=f.getTime(),d={DailyStatus:c,dailyMissionClaimStatus:a,timeStamp:d},d=JSON.stringify(d),d={DailyMissionStatus:d},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d})):e=60*Number(g)-Math.floor((f.getTime()-Number(d.timeStamp))/1E3))}else c=2,
f=new Date,d=f.getTime(),d={DailyStatus:c,dailyMissionClaimStatus:a,timeStamp:d},d=JSON.stringify(d),d={DailyMissionStatus:d},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});return{Result:"OK",Message:" ",DailyStatus:{status:c,claimStatus:a,timeRemaining:e}}};handlers.getServerTime=function(b,k){return{time:new Date}};
handlers.iapMade=function(b,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["IAPValue"]}).Statistics,c=Number(GetValueFromStatistics(a,"IAPValue",0));switch(b.bundle){case "co.tamatem.downshiftdrift.gold01":c+=99;break;case "co.tamatem.downshiftdrift.gold02":c+=499;break;case "co.tamatem.downshiftdrift.gold03":c+=2499;break;case "co.tamatem.downshiftdrift.gold04":c+=2499;break;case "co.tamatem.downshiftdrift.gold05":c+=4999;break;case "co.tamatem.downshiftdrift.gold06":c+=
9999;break;case "co.tamatem.downshiftdrift.bundle01":var c=c+599,e=server.GetUserInventory({PlayFabId:currentPlayerId}),d=server.GetCatalogItems({CatalogVersion:"BMBundleInfo"}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["HighestLeagueReached"]}).Statistics,a=Number(GetValueFromStatistics(a,"HighestLeagueReached",1)),g="bundle01league",g=10>a?g+"0"+a:g+a;1==b.debug&&log.debug("consuming: "+g);for(var f,a=0;a<d.Catalog.length;a++)if(d.Catalog[a].ItemId==g){f=JSON.parse(d.Catalog[a].CustomData);
break}if(void 0==f)return generateErrObj("Catalog item: "+g+" not found");for(a=0;a<e.Inventory.length;a++)if(e.Inventory[a].ItemId==b.bundle){try{server.ConsumeItem({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[a].ItemInstanceId,ConsumeCount:1})}catch(n){return generateErrObj("err: "+n)}var h;h=[];var l={};if(void 0!=f.HCRange){1==b.debug&&log.debug("found HCRange: "+f.HCRange);d=f.HCRange.split(",");if(2<=d.length)d=Number(d[0])<Number(d[1])?Number(d[0])+Math.floor(Math.random()*(Number(d[1])-
Number(d[0]))):Number(d[0]);else return generateErrObj("Catalog data corrupt");0<d&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:d}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.SCRange){1==b.debug&&log.debug("found SCRange: "+f.SCRange);d=f.SCRange.split(",");if(2<=d.length)d=Number(d[0])<Number(d[1])?Number(d[0])+Math.floor(Math.random()*(Number(d[1])-Number(d[0]))):Number(d[0]);else return generateErrObj("Catalog data corrupt");
0<d&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:d}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.Engine)if(1==b.debug&&log.debug("found Engine: "+f.Engine),d=f.Engine.split(","),2<=d.length)d=GiveUserPart("Engine",d[0],d[1],e),h.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Exhaust)if(1==b.debug&&log.debug("found Exhaust: "+f.Exhaust),d=f.Exhaust.split(","),2<=d.length)d=
GiveUserPart("Exhaust",d[0],d[1],e),h.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Gearbox)if(1==b.debug&&log.debug("found Gearbox: "+f.Gearbox),d=f.Gearbox.split(","),2<=d.length)d=GiveUserPart("Gearbox",d[0],d[1],e),h.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Suspension)if(1==b.debug&&log.debug("found Suspension: "+f.Suspension),d=f.Suspension.split(","),2<=d.length)d=GiveUserPart("Suspension",d[0],d[1],e),h.push(d);else return generateErrObj("Catalog data corrupt");
if(void 0!=f.Tires)if(1==b.debug&&log.debug("found Tires: "+f.Tires),d=f.Tires.split(","),2<=d.length)d=GiveUserPart("Tires",d[0],d[1],e),h.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Turbo)if(1==b.debug&&log.debug("found Turbo: "+f.Turbo),d=f.Turbo.split(","),2<=d.length)d=GiveUserPart("Turbo",d[0],d[1],e),h.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.CarCard&&(1==b.debug&&log.debug("found CarCard: "+f.CarCard),void 0!=f.CarCardAmount))if(1==
b.debug&&log.debug("found CarCardAmount: "+f.CarCardAmount),d=f.CarCardAmount.split(","),2<=d.length)d=GiveUserCarCard(f.CarCard,d[0],d[1],e),h.push(d);else return generateErrObj("Catalog data corrupt");void 0!=f.ChestModel&&1==b.debug&&log.debug("found ChestModel: "+f.ChestModel)}e=[];c={StatisticName:"IAPValue",Value:c};e.push(c);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});h={Inventory:h,VirtualCurrency:l};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:h};
default:1==b.debug&&log.debug("InvalidPurchaseParameter")}e=[];c={StatisticName:"IAPValue",Value:c};e.push(c);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e})};
handlers.initServerData=function(b){b=[];var k={StatisticName:"TrophyCount",Version:"0",Value:"0"};b.push(k);k={StatisticName:"League",Version:"0",Value:"0"};b.push(k);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var k={0:"Owned"},a=0;a<b.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[a].ItemInstanceId,Data:k});b=[];b.push("FordFocus");b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b});k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k});k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k});k={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k});k=[];k.push("Engine");k=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});k={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k})};
handlers.openChest=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<b.levelUpRewardIndex){var c=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),e={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}):c=a.Data.LastLevelReward.Value;var d=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,g=GetValueFromStatistics(a,"Experience",0);0==g&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var f=d.length,a=0;a<d.length;a++)if(!(g>=d[a])){f=a;break}if(Number(b.levelUpRewardIndex)<=Number(c))return generateFailObj("already got reward for level: "+c);if(Number(b.levelUpRewardIndex)<=Number(f))c=Number(b.levelUpRewardIndex),e.LastLevelReward=c,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:e}),a=""+c,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",PlayFabId:currentPlayerId,ItemIds:a});else return generateFailObj("You haven't reached this level yet")}c=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<b.currCost){if("OK"!=checkBalance(b.currType,b.currCost,c.VirtualCurrency.SC,c.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.currType,
Amount:b.currCost});updateCurrencySpentStatistic(b.currType,b.currCost)}for(var h in b.currencyReq)0<b.currencyReq[h]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h,Amount:b.currencyReq[h]});for(h in b.carCardsRequest)if(b.carCardsRequest.hasOwnProperty(h)){e=!1;for(a=0;a<c.Inventory.length;a++)if(c.Inventory[a].ItemId==h&&"CarCards"==c.Inventory[a].CatalogVersion){e=void 0==c.Inventory[a].CustomData?Number(b.carCardsRequest[h]):void 0==c.Inventory[a].CustomData.Amount?
Number(b.carCardsRequest[h]):isNaN(Number(c.Inventory[a].CustomData.Amount))?Number(b.carCardsRequest[h]):Number(c.Inventory[a].CustomData.Amount)+Number(b.carCardsRequest[h]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[h],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:b.carCardsRequest[h]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}for(h in b.partCardsRequest)if(b.partCardsRequest.hasOwnProperty(h)){e=!1;for(a=0;a<c.Inventory.length;a++)if(c.Inventory[a].ItemId==h&&"PartCards"==c.Inventory[a].CatalogVersion){e=void 0==c.Inventory[a].CustomData?Number(b.partCardsRequest[h]):void 0==c.Inventory[a].CustomData.Amount?Number(b.partCardsRequest[h]):isNaN(Number(c.Inventory[a].CustomData.Amount))?Number(b.partCardsRequest[h]):Number(c.Inventory[a].CustomData.Amount)+Number(b.partCardsRequest[h]);
e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[h],a=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:b.partCardsRequest[h]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}h=server.GetUserInventory({PlayFabId:currentPlayerId});b.chestId&&0>=b.levelUpRewardIndex&&
(c=UpdateExperience("Chests",b.chestId,"xpGain",0,!0),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["ChestsOpened"]}).Statistics,e=Number(GetValueFromStatistics(a,"ChestsOpened",0)),e++,a=[],a.push({StatisticName:"ChestsOpened",Value:e}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}),h.Experience=c);return generateInventoryChange("InventoryUpdated",h)};
handlers.purchaseBMItem=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>b.itemId||3<b.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+b.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),c=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+b.itemId].Value.split("_"),e=c.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var d;d=2>b.itemId?"PartCards":"CarCards";var g=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),e=checkBalance(a[1],g,e,e);if("OK"!=e)return e;for(var f,h,e=0;e<c.Inventory.length;e++)if(c.Inventory[e].ItemId==a[0]&&c.Inventory[e].CatalogVersion==d){f=c.Inventory[e].ItemInstanceId;void 0===c.Inventory[e].CustomData?h={Amount:1}:void 0===c.Inventory[e].CustomData.Amount?h={Amount:1}:(h=Number(c.Inventory[e].CustomData.Amount)+1,isNaN(h)&&(h=1),h={Amount:h});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:f,Data:h});break}void 0===f&&(f=[],f.push(a[0]),f=server.GrantItemsToUser({CatalogVersion:d,PlayFabId:currentPlayerId,ItemIds:f}).ItemGrantResults[0].ItemInstanceId,void 0===f?generateErrObj("grantRequest denied"):(h={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:h})));f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:g});updateCurrencySpentStatistic(a[1],g);g=a[0]+"_"+a[1]+"_"+a[2]+"_"+
(parseInt(a[3])+1)+"_"+a[4];c={};c["BMItem"+b.itemId]=g;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});h=[{ItemId:a[0],CatalogVersion:d,CustomData:h}];d={};d[f.VirtualCurrency]=f.Balance;a=b.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];e={Inventory:h,VirtualCurrency:d};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:e,BMItemChange:a}};
handlers.purchaseItems=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetUserInventory({PlayFabId:currentPlayerId}),e=c.VirtualCurrency.SC,d=c.VirtualCurrency.HC;switch(b.purchaseType){case "carUpgrade":return upgradeCar(b,c,e,d);case "partUpgrade":return upgradePart(b,c,e,d);case "custPurchase":for(var g=server.GetCatalogItems({CatalogVersion:"Customization"}),f,h=0,a="SC",l=0;l<g.Catalog.length;l++)if(g.Catalog[l].ItemId==b.custId){f=
g.Catalog[l];cardInfo=JSON.parse(g.Catalog[l].CustomData);h=b.custVal+",Cost";a=cardInfo[b.custVal+",Curr"];h=cardInfo[h];d=checkBalance(a,h,e,d);if("OK"!=d)return d;break}if(void 0==f)return generateErrObj("Customization does not exist in catalog.");for(var n,p,l=0;l<c.Inventory.length;l++)if(c.Inventory[l].ItemId==b.custId){n=c.Inventory[l];p=c.Inventory[l].ItemInstanceId;if(void 0!=n.CustomData&&String(b.custVal)in n.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
n){log.info("user doesn't have customization category. Granting ... ");d=[];d.push(b.custId);d=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:d});if(0==d.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");p=d.ItemGrantResults[0].ItemInstanceId}d={};d[String(b.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:p,Data:d});p=[{ItemId:b.custId,
CatalogVersion:"Customization",CustomData:d}];0<h?(d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:h}),updateCurrencySpentStatistic(a,h),a={},a[d.VirtualCurrency]=d.Balance,l={Inventory:p,VirtualCurrency:a}):l={Inventory:p};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":h=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});p=!1;for(l=a=0;l<h.Catalog.length;l++)if(h.Catalog[l].ItemId==b.packId){a=h.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(h.Catalog[l].CustomData);p=!0;break}if(0==p)return generateErrObj("pack with ID: "+b.packId+" not found in catalog.");if(0>=a)return generateErrObj("pack with ID: "+b.packId+" shouldn't have negative cost.");if(a>d)return generateFailObj("Not enough HC.");d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:a});updateCurrencySpentStatistic("HC",a);h=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});
a={};a[h.VirtualCurrency]=h.Balance;a[d.VirtualCurrency]=d.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:a});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(b){b=CheckMaintenanceAndVersion(b);return"OK"!=b?generateMaintenanceOrUpdateObj(b):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(b){b=server.GetUserInventory({PlayFabId:currentPlayerId});var k=Number(b.VirtualCurrency.SC);if(isNaN(k)||0>k)k=0;var a=Number(b.VirtualCurrency.HC);if(isNaN(a)||0>a)a=0;var c=[];c.push({StatisticName:"CurrentMoney",Version:"0",Value:k});c.push({StatisticName:"CurrentGold",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});for(var k=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),
c=!1,e=0;e<b.Inventory.length;e++)if("CarsProgress"==b.Inventory[e].CatalogVersion){var c=!0,d=checkCarDataValidity(b.Inventory[e],k);if("PlayFabError"==d||void 0===d)return generateErrObj("PlayfabError");"OK"==d?log.debug("Data for "+b.Inventory[e].ItemId+" OK"):b.Inventory[e].CustomData=d;b.Inventory[e].CustomData.Pr=recalculateCarPr(b.Inventory[e].CustomData,b.Inventory[e].ItemId,k,a);d={};d.Pr=b.Inventory[e].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[e].ItemInstanceId,
Data:d})}return!1===c?(b=[],b.push("FordFocus"),b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b}),k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k}),k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,
Data:k}),k={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k}),generateErrObj("UserHasNoCars ... reiniting")):b};
handlers.retrieveBlackMarket=function(b,k){var a=CheckMaintenanceAndVersion(b);if(!0===b.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=[];c.push("BMTime");for(var e=0;4>e;e++)c.push("BMItem"+e);e=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:c});if(void 0===e.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var c=new Date,d=[];d.push("BlackMarketResetMinutes");d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:d});if(!0===b.reset){a="HC";e=200;c=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==c.Data.BlackMarketResetCost&&(e=c.Data.BlackMarketResetCost.split("_"),a=e[0],e=Number(e[1]));if(0<e){c=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,e,c.VirtualCurrency.SC,c.VirtualCurrency.HC))return generateFailObj("not enough money");c=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:e});updateCurrencySpentStatistic(a,e);a=GenerateBlackMarket(currentPlayerId);e={};e[c.VirtualCurrency]=c.Balance;e={VirtualCurrency:e};
a.InventoryChange=e;return a}return GenerateBlackMarket(currentPlayerId)}return c.getTime()-parseInt(e.Data.BMTime.Value)>6E4*parseInt(d.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,e),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,e)};
handlers.rewardUsers=function(b,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,c=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),e=0;0>=c&&(a=Number(a)/3E3,e=Number(Math.floor(800*a)));c=Number(c)+e;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:c}]});return c};
handlers.startGame=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetTitleData({Key:"LeagueSubdivisions SubdivisionTrophyRanges TrophyGainRange TrophyLoseRange SubdivisionPrRanges TrophyDifferenceLimit".split(" ")}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TotalGames"]}).Statistics,a=GetValueFromStatistics(a,"TotalGames",0),a=Number(a)+1;1==b.debug&&log.debug("totalGamesStartedIs: "+a);var e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]}),d=0;0!=e.Statistics.length&&(d=e.Statistics[0].Value);for(var d=Number(d),g=JSON.parse(c.Data.SubdivisionTrophyRanges),f=JSON.parse(c.Data.LeagueSubdivisions),h=JSON.parse(c.Data.SubdivisionPrRanges),e=JSON.parse(c.Data.TrophyDifferenceLimit),l=Number(e.trophyReadjustRange),n=Number(e.maxDifference),p=e.subDivisionsToExclude,r=43,B=43,F,A=c.Data.TrophyGainRange.split("_"),E=c.Data.TrophyLoseRange.split("_"),e=Number(A[0]),c=Number(A[1]),A=Number(E[0]),E=Number(E[1]),
m=0;m<g.subdivisions.length;m++)if(d<Number(g.subdivisions[m])){r=m;m<g.subdivisions.length-1&&(B=m+1);break}F=Number(g.subdivisions[B])-Number(g.subdivisions[r]);0>=F&&(F=400);var u=server.GetTitleInternalData({Keys:"RecSubDivision"+r}).Data["RecSubDivision"+r],q=!1;void 0==u&&(q=!0);var y,t,z,I="noop",v="noop",m=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp","quitLastGame"]});t="false;";void 0!=m.Data.quitLastGame&&(t=m.Data.quitLastGame.Value);1==b.debug&&log.debug("didQuitLastGame: "+
t);B=!1;void 0==t&&(t="false");"true"==t&&(B=!0);if(void 0==m.Data||void 0==m.Data.lastOpp)v=I="noop";else for(t=m.Data.lastOpp.Value.split(","),m=0;m<t.length;m++)0==m&&(I=t[m]),1==m&&(v=t[m]);y=0==q?JSON.parse(u):[];var G=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>y.length&&(q=!0);var H=Array(y.length),C=0,u=Array(y.length);t=0;z=Array(y.length);for(var D=0,m=0;m<y.length;m++)1==q&&(G[5*Number(y[m].e)+Number(y[m].c)]=1),y[m].uId!=currentPlayerId&&(H[C]=y[m],C++,y[m].uId!=I&&(u[t]=y[m],t++,y[m].uId!=v&&
(z[D]=y[m],D++)));if(1==q){q=[];for(m=0;m<G.length;m++)0==G[m]&&q.push(m);q=q[Math.floor(Math.random()*q.length)];m=Math.floor(q/5);q%=5;v=server.GetTitleData({Keys:"MasterUser"});if(void 0!=v.Data.MasterUser&&(v=server.GetUserReadOnlyData({PlayFabId:v.Data.MasterUser,Keys:[m+"_"+q+"_RecPos",m+"_"+q+"_RecRot",m+"_"+q+"_RecHeader"]}),void 0!=v.Data&&void 0!=v.Data[m+"_"+q+"_RecPos"]&&void 0!=v.Data[m+"_"+q+"_RecRot"]&&void 0!=v.Data[m+"_"+q+"_RecHeader"])){f=!0;0==d?(d=c,f=!1):d-=A;1>=d&&(d=1);var w=
[],d={StatisticName:"TrophyCount",Version:"0",Value:d};w.push(d);d={StatisticName:"League",Version:"0",Value:x};w.push(d);d={StatisticName:"TotalGames",Version:"0",Value:a};w.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:w});a={trophyWin:Math.floor((Number(c)+Number(e))/2),trophyLose:Math.floor((Number(E)+Number(A))/2),quitLastGame:"true"};0==f&&(a.trophyWin=0,a.trophyLose=0);1==B&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});
return{Result:"OK",RecType:"TheStig",PosData:v.Data[m+"_"+q+"_RecPos"].Value,RotData:v.Data[m+"_"+q+"_RecRot"].Value,HeaderData:v.Data[m+"_"+q+"_RecHeader"].Value,TrophyLose:A,TrophyWin:c,Opp:"TheStig"}}}if(0==C)return generateErrObj("no valid recording found for this subdivision");x=H;0<t&&(C=t,x=u);0<D&&(C=D,x=z);u=Math.floor(Math.random()*C);u>=C&&(u=C-1);t=Math.min(C,3);z=Array(t);for(m=0;m<t;m++)z[m]=0>=u?x[m]:u>=C-1?x[C-1-m]:x[u-Math.floor(t/2)+m];x=Math.floor(Math.random()*t);t=z[x].uId;u=
z[x].e;z=z[x].c;D=server.GetUserReadOnlyData({PlayFabId:t,Keys:[u+"_"+z+"_RecPos",u+"_"+z+"_RecRot",u+"_"+z+"_RecHeader"]});if(void 0==D)return generateErrObj("Did not find recording for this user: "+t);var C=server.GetPlayerCombinedInfo({PlayFabId:t,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),q=d,x=Number(calculateLeague(d)),
H="UserGenerated",v=0<x?Number(g.subdivisions[f.leagues[x-1]]):0,G=x>=f.leagues.length-1?2*v:Number(g.subdivisions[f.leagues[x]]);1==b.debug&&log.debug("I bet it will crash after this");g=JSON.parse(D.Data[u+"_"+z+"_RecHeader"].Value);1==b.debug&&log.debug("or not");void 0!=g&&(w=g.Trophies);w=Number(w);y=!0;1==b.debug&&log.debug("Adjusting trophies");if(void 0!=p)for(1==b.debug&&log.debug("excludedSubdivisionsFromTrophyAdjustment: "+p),m=0;m<p.length;m++)if(r==Number(p[m])){1==b.debug&&log.debug("in excluded subdivision: "+
r);y=!1;break}1==y&&Number(Math.abs(q-w))>=n&&(1==b.debug&&log.debug("generating new trophies. Reason: user trophies: "+q+" vs opponent trophies: "+w),w=q-l+Math.floor(Math.random()*l*2),g.Trophies=w,1==b.debug&&log.debug("performing stringify on recordingData header"),D.Data[u+"_"+z+"_RecHeader"].Value=JSON.stringify(g));0>=G-v?(l=E,n=e):Number(Math.abs(q-w))>Number(F)?(l=Math.floor((A+E)/2)-1+Math.floor(3*Math.random()),n=Math.floor((c+e)/2)-1+Math.floor(3*Math.random())):(l=A+Math.floor((E-A)/
2*((q-w)/(G-v)+1)),n=e+Math.floor((c-e)/2*((w-q)/(G-v)+1)));1==b.debug&&log.debug("Opponent's PR is TOO DAMN HIGH! "+g.Pr+" vs "+Number(h.subdivisions[Number(f.leagues[x-1])+1])+". You are in subdivision: "+Number(f.leagues[x-1]+1));g.Pr>Number(h.subdivisions[Number(f.leagues[x-1])+1])&&(l=Math.floor((A+E)/2)-1+Math.floor(3*Math.random()),n=Math.floor((c+e)/2)-1+Math.floor(3*Math.random()),H="MobyDick");e=!0;0==d?(e=!1,d=c):(d-=Number(l),1>=d&&(d=1));w=[];d={StatisticName:"TrophyCount",Version:"0",
Value:d};w.push(d);d={StatisticName:"League",Version:"0",Value:x};w.push(d);d={StatisticName:"TotalGames",Version:"0",Value:a};w.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:w});a={trophyWin:n,trophyLose:l,lastOpp:t+","+I,quitLastGame:"true"};0==e&&(a.trophyWin=0,a.trophyLose=0);1==B&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:H,PosData:D.Data[u+"_"+z+"_RecPos"].Value,RotData:D.Data[u+"_"+z+
"_RecRot"].Value,HeaderData:D.Data[u+"_"+z+"_RecHeader"].Value,TrophyLose:l,TrophyWin:n,Opp:C.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var c=server.GetUserInventory({PlayFabId:currentPlayerId}),e=[],d="-1",g={},f={PaintJobs:{itemOwned:"no",itemCustData:b.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:b.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:b.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:b.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:b.wsId,carItemId:"WindshieldId"}},a=0;a<c.Inventory.length;a++)c.Inventory[a].ItemId==b.carId&&"CarsProgress"==c.Inventory[a].CatalogVersion&&(d=c.Inventory[a].ItemInstanceId),c.Inventory[a].ItemId in f&&(f[c.Inventory[a].ItemId].itemOwned="yes",f[c.Inventory[a].ItemId].itemCustData in c.Inventory[a].CustomData?g[f[c.Inventory[a].ItemId].carItemId]=f[c.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+c.Inventory[a].ItemId+" "+f[c.Inventory[a].ItemId].itemCustData));if("-1"==
d)return generateFailObj("User does not own car with id: "+b.carId);for(var h in f)f.hasOwnProperty(h)&&"no"==f[h].itemOwned&&e.push(h);if(g=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d,Data:g});h=[{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:g}];if(0<e.length)for(e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e}),c={0:"Owned"},
a=0;a<e.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[a].ItemInstanceId,Data:c});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:h}}};
function upgradeCar(b,k,a,c){for(var e=server.GetCatalogItems({CatalogVersion:"CarCards"}),d=!1,g,f=0;f<k.Inventory.length;f++)if(k.Inventory[f].ItemId==b.carId&&"CarsProgress"==k.Inventory[f].CatalogVersion){d=!0;g=k.Inventory[f];break}for(var h,f=0;f<e.Catalog.length;f++)if(e.Catalog[f].ItemId==b.carId){h=JSON.parse(e.Catalog[f].CustomData);break}if(void 0===h)return generateErrObj("CardNotFoundForCarwithID: "+b.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===d){var l=parseInt(g.CustomData.CarLvl)+1;if(l>=Number(h.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var n=getObjectValueFromLevel(h,"currCostPerLvl",l),f=checkBalance(h.currType,n,a,c);if("OK"!=f)return f;a=getObjectValueFromLevel(h,"cardCostPerLvl",l);g.CustomData.CarLvl=l;for(var d=!1,p,f=0;f<k.Inventory.length;f++)if(k.Inventory[f].ItemId==b.carId&&"CarCards"==k.Inventory[f].CatalogVersion){d=!0;try{if(void 0===k.Inventory[f].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===k.Inventory[f].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(k.Inventory[f].CustomData.Amount)>=a)k.Inventory[f].CustomData.Amount-=a,p={Amount:k.Inventory[f].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[f].ItemInstanceId,Data:p});else return generateFailObj("Insufficient cards for real: "+k.Inventory[f].CustomData.Amount+" vs "+a)}catch(B){return generateFailObj("Insufficient cards")}break}if(!1===
d)return generateFailObj("No cards found");k=recalculateCarPr(g.CustomData,g.ItemId,e,void 0);f={CarLvl:l,Pr:k};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemInstanceId,Data:f});var r;0<n&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h.currType,Amount:n}),updateCurrencySpentStatistic(h.currType,n));b=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:f}];p=
{};f={Inventory:b};void 0!=r&&(p[r.VirtualCurrency]=r.Balance,f.VirtualCurrency=p);f.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+h.rarity,l,!0);return generateInventoryChange("InventoryUpdate",f)}d=!1;for(f=0;f<k.Inventory.length;f++)if(k.Inventory[f].ItemId==b.carId&&"CarCards"==k.Inventory[f].CatalogVersion){d=!0;try{if(void 0===k.Inventory[f].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===k.Inventory[f].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(k.Inventory[f].CustomData.Amount)>=Number(h.cardCostPerLvl[1]))n=k.Inventory[f].ItemInstanceId,k.Inventory[f].CustomData.Amount-=h.cardCostPerLvl[1],p={Amount:k.Inventory[f].CustomData.Amount};else return generateFailObj("Insufficient cards: "+k.Inventory[f].CustomData.Amount+" vs "+h.cardCostPerLvl[1]+".")}catch(B){return generateFailObj("Insufficient cards: "+B)}break}if(0==d)return generateFailObj("No cards found");f=checkBalance(h.currType,h.currCostPerLvl[1],a,c);if("OK"!=f)return f;
g=[];g.push(b.carId);g=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:g});if(!1===g.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:n,Data:p});0<h.currCostPerLvl[1]&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:h.currType,Amount:h.currCostPerLvl[1]}),updateCurrencySpentStatistic(h.currType,h.currCostPerLvl[1]));f={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:f});f={TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,
Data:f});f={PlatesId:"0",WindshieldId:"0",Pr:Number(h.basePr)+h.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:f});e=g=!1;for(f=0;f<k.Inventory.length;f++)if("PaintJobs"==k.Inventory[f].ItemId){e=!0;void 0!=k.Inventory[f].CustomData?h.defaultPaintID in k.Inventory[f].CustomData?g=!0:(l={},l[h.defaultPaintID]="Owned"):(l={},l[h.defaultPaintID]="Owned");void 0!=l&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:k.Inventory[f].ItemInstanceId,Data:l});break}0==e&&(paintToGive=[],paintToGive.push("PaintJobs"),k=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),l={},l[h.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:l}));f={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,
DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:Number(h.basePr)+h.prPerLvl[1]};b=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:f}];0==g&&(p={},p[h.defaultPaintID]="Owned",b.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:p}));p={};f={Inventory:b};void 0!=r&&(p[r.VirtualCurrency]=r.Balance,f.VirtualCurrency=p);f.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+h.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",
f)}
function upgradePart(b,k,a,c){for(var e=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),d=!1,g=0;g<e.Catalog.length;g++)if(e.Catalog[g].ItemId==b.carId){d=!0;break}if(!1===d)return generateErrObj("car with ID: "+b.carId+" not found in catalog.");for(var e=server.GetCatalogItems({CatalogVersion:"PartCards"}),d=!1,f,g=0;g<e.Catalog.length;g++)if(e.Catalog[g].ItemId==b.partId){f=JSON.parse(e.Catalog[g].CustomData);d=!0;break}if(0==d)return generateErrObj("part with ID: "+b.partId+" not found in catalog.");for(var d=
!1,h,g=0;g<k.Inventory.length;g++)if(k.Inventory[g].ItemId==b.carId&&"CarsProgress"==k.Inventory[g].CatalogVersion){d=!0;h=k.Inventory[g];break}if(!1===d)return generateFailObj("car with ID: "+b.carId+" not found in user inventory.");for(var l=!1,d=0,n={},g=0;g<k.Inventory.length;g++)if(k.Inventory[g].ItemId==b.partId&&"PartCards"==k.Inventory[g].CatalogVersion){var l=!0,p={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},d=
parseInt(h.CustomData[p[b.partId]])+1;if(d>=Number(f.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var r=getObjectValueFromLevel(f,"cardCostPerLvl",d),B=getObjectValueFromLevel(f,"currCostPerLvl",d);n[p[b.partId]]=d;h.CustomData[p[b.partId]]=d;var F;a=checkBalance(f.currType,B,a,c);if("OK"!=a)return a;try{if(void 0!==k.Inventory[g].CustomData&&void 0!==k.Inventory[g].CustomData.Amount&&k.Inventory[g].CustomData.Amount>=r)k.Inventory[g].CustomData.Amount-=r,F={Amount:k.Inventory[g].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[g].ItemInstanceId,Data:F});else return generateFailObj("Insufficient cards")}catch(E){return generateFailObj("Insufficient cards")}break}if(0==l)return generateFailObj("Part not found");var A;0<B&&(A=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:f.currType,Amount:B}),updateCurrencySpentStatistic(f.currType,B));g=recalculateCarPr(h.CustomData,h.ItemId,void 0,e);n.Pr=g;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:h.ItemInstanceId,Data:n});h={};g={Inventory:[{ItemId:b.partId,CatalogVersion:"PartCards",CustomData:F},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:n}]};void 0!==A&&(h[A.VirtualCurrency]=A.Balance,g.VirtualCurrency=h);g.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+f.rarity,d,!0);return generateInventoryChange("InventoryUpdatePart",g)};
