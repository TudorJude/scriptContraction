function checkCarDataValidity(b,k){if(void 0==b.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});for(var f=0,c=0;c<k.Catalog.length;c++)if(k.Catalog[c].ItemId==b.ItemId){var g=
JSON.parse(k.Catalog[c].CustomData),f=parseInt(g.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:f};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a})}catch(l){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:f}}return"OK"}function generateFailObj(b){return{Result:"Failed",Message:b}}
function generateErrObj(b){return{Result:"Error",Message:b}}function checkBalance(b,k,a,f){if("SC"==b){if(a<k)return generateFailObj("NotEnoughSC")}else if(f<k)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(b){var k=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==k.Data.LeagueSubdivisions||void 0==k.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(k.Data.LeagueSubdivisions).leagues,k=JSON.parse(k.Data.SubdivisionTrophyRanges).subdivisions,f=0;f<a.length;f++)if(!(Number(b)>Number(k[a[f]])))return f}
function recalculateCarPr(b,k,a,f){var c=0,g;g=void 0==a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<g.Catalog.length;a++)if(g.Catalog[a].ItemId==k){a=JSON.parse(g.Catalog[a].CustomData);c+=parseInt(a.basePr)+parseInt(a.prPerLvl)*(parseInt(b.CarLvl)-1);break}f=void 0==f?server.GetCatalogItems({CatalogVersion:"PartCards"}):f;b={Exhaust:b.ExhaustLvl,Engine:b.EngineLvl,Gearbox:b.GearboxLvl,Suspension:b.SuspensionLvl,Tires:b.TiresLvl,Turbo:b.TurboLvl};for(a=0;a<f.Catalog.length;a++)k=
JSON.parse(f.Catalog[a].CustomData),c+=parseInt(k.basePr)+parseInt(k.prPerLvl)*b[f.Catalog[a].ItemId];return c}
function GenerateBlackMarket(b){var k=1,a=server.GetPlayerStatistics({PlayFabId:b,StatisticNames:["League"]});0!=a.Statistics.length&&(k=a.Statistics[0].Value.toString());var f=server.GetCatalogItems({CatalogVersion:"PartCards"}),a={};a.BMTime=(new Date).getTime();var c=Math.floor(Math.random()*f.Catalog.length),g=JSON.parse(f.Catalog[c].CustomData);if(void 0==g)return generateErrObj("Part card "+f.Catalog[d].ItemId+" has no custom data.");a.BMItem0=f.Catalog[c].ItemId+"_"+g.BMCurrType+"_"+g.BMbasePrice+
"_0_"+g.BMpriceIncrPerBuy;var l=Math.floor(Math.random()*f.Catalog.length);l==c&&(l=f.Catalog.length-c-1);g=JSON.parse(f.Catalog[l].CustomData);if(void 0==g)return generateErrObj("Part card "+f.Catalog[d].ItemId+" has no custom data.");a.BMItem1=f.Catalog[l].ItemId+"_"+g.BMCurrType+"_"+g.BMbasePrice+"_0_"+g.BMpriceIncrPerBuy;for(var f=server.GetCatalogItems({CatalogVersion:"CarCards"}),g=[],l=[],d=0;d<f.Catalog.length;d++){c=JSON.parse(f.Catalog[d].CustomData);if(void 0==c)return generateErrObj("Car card "+
f.Catalog[d].ItemId+" has no custom data.");c.unlockedAtRank>k+1||("false"==c.rareCar?g.push(f.Catalog[d].ItemId+"_"+c.BMCurrType+"_"+c.BMbasePrice+"_0_"+c.BMpriceIncrPerBuy):l.push(f.Catalog[d].ItemId+"_"+c.BMCurrType+"_"+c.BMbasePrice+"_0_"+c.BMpriceIncrPerBuy))}0>=g.length?(a.BMItem2=l[Math.floor(Math.random()*l.length)],a.BMItem3=l[Math.floor(Math.random()*l.length)]):0>=l.length?(a.BMItem2=g[Math.floor(Math.random()*g.length)],a.BMItem3=g[Math.floor(Math.random()*g.length)]):(a.BMItem2=g[Math.floor(Math.random()*
g.length)],a.BMItem3=l[Math.floor(Math.random()*l.length)]);server.UpdateUserInternalData({PlayFabId:b,Data:a});k=[];k.push("BlackMarketResetMinutes");b=server.GetTitleData({PlayFabId:b,Keys:k});a.BMTime=60*parseInt(b.Data.BlackMarketResetMinutes);return a}
function GetCurrentBlackMarket(b,k){var a={},f=new Date,c=[];c.push("BlackMarketResetMinutes");c=server.GetTitleData({PlayFabId:b,Keys:c});a.BMTime=60*parseInt(c.Data.BlackMarketResetMinutes)-Math.floor((f.getTime()-k.Data.BMTime.Value)/1E3);for(f=0;4>f;f++)a["BMItem"+f]=k.Data["BMItem"+f].Value;return a}function GetValueFromStatistics(b,k,a){for(var f,c=0;c<b.length;c++)b[c].StatisticName===k&&(f=b[c]);return void 0===f?void 0!==a?a:0:Number(f.Value)}
handlers.buyChest=function(b,k){var a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(b.curr,b.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<b.cost){var a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.cost}),f={};f[a.VirtualCurrency]=a.Balance;return{Result:"OK",Message:"ChestBought",InventoryChange:{VirtualCurrency:f}}}return{Result:"OK",Message:"ChestBought",InventoryChange:{}}};
handlers.endGame=function(b,k){var a="01",f,c="0";"rWin"==b.outcome&&(c="1");var g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=g.Statistics.length&&(f=g.Statistics[0].Value.toString(),a=Number(f).toString(2));var g=0,l;l=Array(a.length);for(var d=0;d<l.length-1;d++)l[d]=a[d];l[l.length-1]=c;a=l;c=a.length;for(d=0;d<a.length;d++)"1"==a[d]&&g++;l=Math.round(g/c*100);var e=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),c=0,h,g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]});0!=g.Statistics.length&&(c=g.Statistics[0].Value,log.debug("getting trophy count "+g.Statistics[0].Value));h=c=Number(c);g=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose","trophyWin"]});log.debug("pDat.Data[trophyLose] "+g.Data.trophyLose.Value);log.debug("pDat.Data[trophyWin] "+g.Data.trophyWin.Value);g=void 0==g.Data.trophyLose||void 0==g.Data.trophyWin?45:Number(g.Data.trophyLose.Value)+Number(g.Data.trophyWin.Value);"rWin"==b.outcome&&
(c+=g);log.debug("trophies change: "+h+" => "+c);g=calculateLeague(c);for(d=f=0;d<a.length;d++)"1"==a[d]&&(f+=Math.pow(2,d));d=[];d.push({StatisticName:"WinLoss",Version:"0",Value:f});a={StatisticName:"TrophyCount",Version:"0",Value:c};d.push(a);a={StatisticName:"League",Version:"0",Value:g};d.push(a);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:d});if("rOot"==b.outcome){var n={TrophyCount:c,League:g};return{Result:n}}a=JSON.parse(e.Data.SubdivisionTrophyRanges);for(d=0;d<a.subdivisions.length;d++)if(h<
a.subdivisions[d]){n=d;break}d=[];d.push({Key:b.envIndex+"_"+b.courseIndex+"_RecPos",Value:b.recordingPos});d.push({Key:b.envIndex+"_"+b.courseIndex+"_RecRot",Value:b.recordingRot});d.push({Key:b.envIndex+"_"+b.courseIndex+"_RecHeader",Value:b.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:d});d=server.GetTitleInternalData({Key:"RecSubDivision"+n}).Data["RecSubDivision"+n];if(void 0==d)a=[],l={wl:l,e:b.envIndex,c:b.courseIndex,uId:currentPlayerId},a.push(l);else{a=
JSON.parse(d);l={wl:l,e:b.envIndex,c:b.courseIndex,uId:currentPlayerId};e=!1;for(d=h=0;d<a.length;d++)a[d].uId==currentPlayerId&&h++;if(2<h)return n={TrophyCount:c,League:g},{Result:n};for(d=0;d<a.length;d++)if(a[d].e==b.envIndex&&a[d].c==b.courseIndex){e=!0;a[d]=l;if(1==a.length)break;if(0<d)if(a[d].wl>a[d-1].wl){if(d==a.length-1)break;for(h=d+1;h<a.length;h++)if(a[h-1].wl>a[h].wl)f=a[h],a[h]=a[h-1],a[h-1]=f;else break}else for(h=d-1;0<=h;h--)if(a[h+1].wl<a[h].wl)f=a[h],a[h]=a[h+1],a[h+1]=f;else break;
else for(h=d+1;h<a.length;h++)if(a[h-1].wl>a[h].wl)f=a[h],a[h]=a[h-1],a[h-1]=f;else break}0==e&&a.push(l)}d=JSON.stringify(a);server.SetTitleInternalData({Key:"RecSubDivision"+n,Value:d});n={TrophyCount:c,League:g};return{Result:n}};
function UpdateExperience(b,k,a,f,c,g){b=server.GetCatalogItems({CatalogVersion:b});k=JSON.parse(b.Catalog[k].CustomData)[a];isNaN(Number(k))?(a=Number(k.length),f>=a&&(f=a-1),f=Number(k[f])):f=Number(k);g=g||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;g=GetValueFromStatistics(g,"Experience",0)+f;if(!c)return g;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:g}]})}
handlers.getServerTime=function(b,k){return{time:new Date}};handlers.giveMoney=function(b){b=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.amount});var k={};k[b.VirtualCurrency]=b.Balance;return{Result:"OK",Message:"CurrencyChanged",InventoryChange:{VirtualCurrency:k}}};
handlers.grantItems=function(b){for(var k=server.GetUserInventory({PlayFabId:currentPlayerId}),a,f=!1,c=0;c<k.Inventory.length;c++)if(k.Inventory[c].ItemId==b.itemId&&k.Inventory[c].CatalogVersion==b.catalogId){a=void 0==k.Inventory[c].CustomData?b.amount:void 0==k.Inventory[c].CustomData.Amount?b.amount:isNaN(Number(k.Inventory[c].CustomData.Amount))?b.amount:Number(k.Inventory[c].CustomData.Amount)+b.amount;a={Amount:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[c].ItemInstanceId,
Data:a});f=!0;break}0==f&&(k=[],k.push(b.itemId),k=server.GrantItemsToUser({CatalogVersion:b.catalogId,PlayFabId:currentPlayerId,ItemIds:k}),a={Amount:b.amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:a}));return{Result:"OK",Message:"InventoryUpdated",InventoryChange:{Inventory:[{ItemId:b.itemId,CatalogVersion:b.catalogId,CustomData:a}]}}};
handlers.initServerData=function(b){b=[];var k={StatisticName:"TrophyCount",Version:"0",Value:"0"};b.push(k);k={StatisticName:"League",Version:"0",Value:"0"};b.push(k);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var k={0:"Owned"},a=0;a<b.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[a].ItemInstanceId,Data:k});b=[];b.push("FordFocus");b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b});k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k});k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k});k={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k});k=[];k.push("Engine");k=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});k={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k})};
handlers.openChest=function(b,k){var a=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<b.currCost){if("OK"!=checkBalance(b.currType,b.currCost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.currType,Amount:b.currCost})}for(var f in b.currencyReq)0<b.currencyReq[f]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:f,Amount:b.currencyReq[f]});var c;
for(f in b.carCardsRequest)if(b.carCardsRequest.hasOwnProperty(f)){c=!1;for(var g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==f&&"CarCards"==a.Inventory[g].CatalogVersion){c=void 0==a.Inventory[g].CustomData?Number(b.carCardsRequest[f]):void 0==a.Inventory[g].CustomData.Amount?Number(b.carCardsRequest[f]):isNaN(Number(a.Inventory[g].CustomData.Amount))?Number(b.carCardsRequest[f]):Number(a.Inventory[g].CustomData.Amount)+Number(b.carCardsRequest[f]);c={Amount:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.Inventory[g].ItemInstanceId,Data:c});c=!0;break}0==c&&(g=[f],g=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:g}),c={Amount:b.carCardsRequest[f]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:c}))}for(f in b.partCardsRequest)if(b.partCardsRequest.hasOwnProperty(f)){c=!1;for(g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==f&&"PartCards"==a.Inventory[g].CatalogVersion){c=
void 0==a.Inventory[g].CustomData?Number(b.partCardsRequest[f]):void 0==a.Inventory[g].CustomData.Amount?Number(b.partCardsRequest[f]):isNaN(Number(a.Inventory[g].CustomData.Amount))?Number(b.partCardsRequest[f]):Number(a.Inventory[g].CustomData.Amount)+Number(b.partCardsRequest[f]);c={Amount:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[g].ItemInstanceId,Data:c});c=!0;break}0==c&&(g=[f],g=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,
ItemIds:g}),c={Amount:b.partCardsRequest[f]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:c}))}return{Result:"OK",Message:"InventoryUpdated",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId})}};
handlers.purchaseBMItem=function(b,k){if(0>b.itemId||3<b.itemId)return generateFailObj("invalid item index");var a=[];a.push("BMItem"+b.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),f=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+b.itemId].Value.split("_"),c=f.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");var g;g=2>b.itemId?"PartCards":"CarCards";var l=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),
c=checkBalance(a[1],l,c,c);if("OK"!=c)return c;for(var d,e,c=0;c<f.Inventory.length;c++)if(f.Inventory[c].ItemId==a[0]&&f.Inventory[c].CatalogVersion==g){d=f.Inventory[c].ItemInstanceId;void 0===f.Inventory[c].CustomData?e={Amount:1}:void 0===f.Inventory[c].CustomData.Amount?e={Amount:1}:(e=Number(f.Inventory[c].CustomData.Amount)+1,isNaN(e)&&(e=1),e={Amount:e});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d,Data:e});break}void 0===d&&(d=[],d.push(a[0]),d=server.GrantItemsToUser({CatalogVersion:g,
PlayFabId:currentPlayerId,ItemIds:d}).ItemGrantResults[0].ItemInstanceId,void 0===d?generateErrObj("grantRequest denied"):(e={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d,Data:e})));d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:l});l=a[0]+"_"+a[1]+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];f={};f["BMItem"+b.itemId]=l;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:f});e=[{ItemId:a[0],CatalogVersion:g,
CustomData:e}];g={};g[d.VirtualCurrency]=d.Balance;a=b.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];c={Inventory:e,VirtualCurrency:g};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:c,BMItemChange:a}};
handlers.purchaseItems=function(b,k){var a=server.GetUserInventory({PlayFabId:currentPlayerId}),f=a.VirtualCurrency.SC,c=a.VirtualCurrency.HC;switch(b.purchaseType){case "carUpgrade":for(var g=server.GetCatalogItems({CatalogVersion:"CarCards"}),l=!1,d,e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.carId&&"CarsProgress"==a.Inventory[e].CatalogVersion){l=!0;d=a.Inventory[e];break}for(var h,e=0;e<g.Catalog.length;e++)if(g.Catalog[e].ItemId==b.carId){h=JSON.parse(g.Catalog[e].CustomData);break}if(void 0===
h)return log.error("cardInfo undefined!"),h={Result:"Error",Message:"CardNotFoundForCarwithID: "+b.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data."};if(!0===l){var n=parseInt(d.CustomData.CarLvl)+1,u=parseInt(h.baseCurrCost)+parseInt(d.CustomData.CarLvl)*parseInt(h.currCostPerLvl),c=checkBalance(h.currType,u,f,c);if("OK"!=c)return c;c=parseInt(h.baseCardCost)+parseInt(d.CustomData.CarLvl)*parseInt(h.cardCostPerLvl);d.CustomData.CarLvl=n;for(var m=
!1,t,e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.carId&&"CarCards"==a.Inventory[e].CatalogVersion){m=!0;try{if(void 0===a.Inventory[e].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");if(void 0===a.Inventory[e].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(a.Inventory[e].CustomData.Amount)>=c)a.Inventory[e].CustomData.Amount-=c,t={Amount:a.Inventory[e].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.Inventory[e].ItemInstanceId,Data:t});else return generateFailObj("Insufficient cards for real: "+a.Inventory[e].CustomData.Amount+" vs "+c)}catch(A){return generateFailObj("Insufficient cards")}break}if(!1===m)return generateFailObj("No cards found");a=recalculateCarPr(d.CustomData,d.ItemId,g,void 0);e={CarLvl:n,Pr:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemInstanceId,Data:e});var r;0<u&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:h.currType,Amount:u}));a=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:t},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:e}];c={};e={Inventory:a};void 0!=r&&(c[r.VirtualCurrency]=r.Balance,e.VirtualCurrency=c);h={Result:"OK",Message:"InventoryUpdate",InventoryChange:e}}else{for(var m=!1,v,e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.carId&&"CarCards"==a.Inventory[e].CatalogVersion){m=!0;try{if(void 0==a.Inventory[e].CustomData)return generateFailObj("Insufficient cards, CustomData null");
if(void 0==a.Inventory[e].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");if(Number(a.Inventory[e].CustomData.Amount)>=Number(h.baseCardCost))v=a.Inventory[e].ItemInstanceId,a.Inventory[e].CustomData.Amount-=h.baseCardCost,t={Amount:a.Inventory[e].CustomData.Amount};else return generateFailObj("Insufficient cards: "+a.Inventory[e].CustomData.Amount+" vs "+h.baseCardCost+".")}catch(A){return generateFailObj("Insufficient cards: "+A)}break}if(0==m)return generateFailObj("No cards found");
c=checkBalance(h.currType,h.baseCurrCost,f,c);if("OK"!=c)return c;e=[];e.push(b.carId);c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:e});if(0==c.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:v,Data:t});0<h.baseCurrCost&&(r=
server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h.currType,Amount:h.baseCurrCost}));e={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:e});e={TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,
Data:e});e={PlatesId:"0",WindshieldId:"0",Pr:h.basePr};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:e});for(var n=c=!1,p,e=0;e<a.Inventory.length;e++)if("PaintJobs"==a.Inventory[e].ItemId){n=!0;void 0!=a.Inventory[e].CustomData?h.defaultPaintID in a.Inventory[e].CustomData?c=!0:(p={},p[h.defaultPaintID]="Owned"):(p={},p[h.defaultPaintID]="Owned");void 0!=p&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.Inventory[e].ItemInstanceId,Data:p});break}0==n&&(paintToGive=[],paintToGive.push("PaintJobs"),a=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),p={},p[h.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:p}));e={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,
DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:h.basePr};a=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:t},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:e}];0==c&&(e={},e[h.defaultPaintID]="Owned",a.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:e}));c={};e={Inventory:a};void 0!=r&&(c[r.VirtualCurrency]=r.Balance,e.VirtualCurrency=c);h={Result:"OK",Message:"InventoryUpdateNewCar",InventoryChange:e}}return h;case "partUpgrade":t=server.GetCatalogItems({CatalogVersion:"CarsProgress"});
p=!1;for(e=0;e<t.Catalog.length;e++)if(t.Catalog[e].ItemId==b.carId){p=!0;break}if(0==p)return log.error("invalid car ID"),h={Result:"Error",Message:"car with ID: "+b.carId+" not found in catalog."};t=server.GetCatalogItems({CatalogVersion:"PartCards"});p=!1;for(e=0;e<t.Catalog.length;e++)if(t.Catalog[e].ItemId==b.partId){h=JSON.parse(t.Catalog[e].CustomData);p=!0;break}if(0==p)return log.error("invalid part ID"),h={Result:"Error",Message:"part with ID: "+b.partId+" not found in catalog."};l=!1;for(e=
0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.carId&&"CarsProgress"==a.Inventory[e].CatalogVersion){l=!0;d=a.Inventory[e];break}if(0==l)return generateFailObj("car with ID: "+b.carId+" not found in user inventory.");p=!1;for(e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.partId&&"PartCards"==a.Inventory[e].CatalogVersion){p=!0;var g={},q={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"};v=parseInt(h.baseCardCost,
10)+parseInt(d.CustomData[q[b.partId]],10)*parseInt(h.cardCostPerLvl,10);l=parseInt(d.CustomData[q[b.partId]])+1;u=Number(h.baseCurrCost)+parseInt(d.CustomData[q[b.partId]])*Number(h.currCostPerLvl);g[q[b.partId]]=l;d.CustomData[q[b.partId]]=l;c=checkBalance(h.currType,u,f,c);if("OK"!=c)return c;try{if(void 0!=a.Inventory[e].CustomData&&void 0!=a.Inventory[e].CustomData.Amount&&a.Inventory[e].CustomData.Amount>=v)a.Inventory[e].CustomData.Amount-=v,m={Amount:a.Inventory[e].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.Inventory[e].ItemInstanceId,Data:m});else return generateFailObj("Insufficient cards")}catch(A){return generateFailObj("Insufficient cards")}break}if(0==p)return generateFailObj("Part not found");0<u&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h.currType,Amount:u}));a=recalculateCarPr(d.CustomData,d.ItemId,void 0,t);g.Pr=a;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemInstanceId,Data:g});a=[{ItemId:b.partId,
CatalogVersion:"PartCards",CustomData:m},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:g}];c={};e={Inventory:a};void 0!=r&&(c[r.VirtualCurrency]=r.Balance,e.VirtualCurrency=c);log.debug("HAKUNA "+h.rarity+" | "+n);UpdateExperience("Balancing",0,"Parts_"+h.rarity,n,!0);return h={Result:"OK",Message:"InventoryUpdatePart",InventoryChange:e};case "custPurchase":n=server.GetCatalogItems({CatalogVersion:"Customization"});h=0;r="SC";for(e=0;e<n.Catalog.length;e++)if(n.Catalog[e].ItemId==b.custId){q=
n.Catalog[e];h=JSON.parse(n.Catalog[e].CustomData);e=b.custVal+",Cost";r=h[b.custVal+",Curr"];h=h[e];c=checkBalance(r,h,f,c);if("OK"!=c)return c;break}if(void 0==q)return log.error("Customization does not exist in catalog"),h={Result:"Error",Message:"Customization does not exist in catalog."};for(var w,e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.custId){w=a.Inventory[e];l=a.Inventory[e].ItemInstanceId;if(void 0!=w.CustomData&&String(b.custVal)in w.CustomData)return generateFailObj("User already has this customization.");
break}if(void 0==w){log.info("user doesn't have customization category. Granting ... ");e=[];e.push(b.custId);a=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e});if(0==a.ItemGrantResults[0].Result)return log.error("something went wrong while granting user customization class object"),h={Result:"Error",Message:"something went wrong while granting user customization class object."};l=a.ItemGrantResults[0].ItemInstanceId}a={};a[String(b.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:l,Data:a});a=[{ItemId:b.custId,CatalogVersion:"Customization",CustomData:a}];0<h?(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:r,Amount:h}),c={},c[r.VirtualCurrency]=r.Balance,e={Inventory:a,VirtualCurrency:c}):e={Inventory:a};return h={Result:"OK",Message:"InventoryUpdateNewCustomization",InventoryChange:e};case "softCurrencyPurchase":r=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});a=!1;for(e=n=0;e<r.Catalog.length;e++)if(r.Catalog[e].ItemId==
b.packId){n=r.Catalog[e].VirtualCurrencyPrices.HC;h=JSON.parse(r.Catalog[e].CustomData);a=!0;break}if(0==a)return h={Result:"Error",Message:"pack with ID: "+b.packId+" not found in catalog."};if(0>=n)return h={Result:"Error",Message:"pack with ID: "+b.packId+" shouldn't have negative cost."};if(n>c)return generateFailObj("Not enough HC.");r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:n});h=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",
Amount:h.quantity});c={};c[h.VirtualCurrency]=h.Balance;c[r.VirtualCurrency]=r.Balance;return h={Result:"OK",Message:"SoftCurrencyPurchased",InventoryChange:{VirtualCurrency:c}};default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(b){return{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(b){b=server.GetUserInventory({PlayFabId:currentPlayerId});for(var k=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),f=!1,c=0;c<b.Inventory.length;c++)if("CarsProgress"==b.Inventory[c].CatalogVersion){var f=!0,g=checkCarDataValidity(b.Inventory[c],k);if("PlayFabError"==g||void 0===g)return generateErrObj("PlayfabError");"OK"==g?log.debug("Data for "+b.Inventory[c].ItemId+" OK"):b.Inventory[c].CustomData=g;
b.Inventory[c].CustomData.Pr=recalculateCarPr(b.Inventory[c].CustomData,b.Inventory[c].ItemId,k,a);g={};g.Pr=b.Inventory[c].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[c].ItemInstanceId,Data:g})}return!1===f?(b=[],b.push("FordFocus"),b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b}),k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k}),k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k}),k={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k}),generateErrObj("UserHasNoCars ... reiniting")):b};
handlers.retrieveBlackMarket=function(b,k){var a=[];a.push("BMTime");for(var f=0;4>f;f++)a.push("BMItem"+f);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a});if(void 0===a.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var f=new Date,c=[];c.push("BlackMarketResetMinutes");c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:c});if(!0===b.reset){a="HC";f=200;c=server.GetTitleData({Keys:["BlackMarketResetCost"]});void 0!==c.Data.BlackMarketResetCost&&(f=c.Data.BlackMarketResetCost.split("_"),
a=f[0],f=Number(f[1]));if(0<f){c=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,f,c.VirtualCurrency.SC,c.VirtualCurrency.HC))return generateFailObj("not enough money");f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:f});a=GenerateBlackMarket(currentPlayerId);c={};c[f.VirtualCurrency]=f.Balance;f={VirtualCurrency:c};a.InventoryChange=f;return a}return GenerateBlackMarket(currentPlayerId)}return f.getTime()-parseInt(a.Data.BMTime.Value)>
6E4*parseInt(c.Data.BlackMarketResetMinutes)?GenerateBlackMarket(currentPlayerId):GetCurrentBlackMarket(currentPlayerId,a)};
handlers.startGame=function(b,k){var a="10",f,c=50,g,l=0;g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});if(0!=g.Statistics.length){f=g.Statistics[0].Value.toString();a=Number(f).toString(2);g=a.length;for(var d=0;d<a.length;d++)"1"==a[d]&&l++;c=Math.round(l/g*100)}a+="0";20<a.length&&(a=a.slice(1));var e=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges","TrophyGainRange","TrophyLoseRange"]});g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]});l=0;0!=g.Statistics.length&&(l=g.Statistics[0].Value);var l=Number(l),h=JSON.parse(e.Data.SubdivisionTrophyRanges),n=JSON.parse(e.Data.LeagueSubdivisions),u=43,m=43,t;g=e.Data.TrophyGainRange.split("_");t=e.Data.TrophyLoseRange.split("_");f=Number(g[0]);g=Number(g[1]);for(var e=Number(t[0]),r=Number(t[1]),d=0;d<h.subdivisions.length;d++)if(l<Number(h.subdivisions[d])){u=d;d<h.subdivisions.length-1&&(m=d+1);break}t=Number(h.subdivisions[m])-Number(h.subdivisions[u]);
log.debug("nextSubDivision "+m+" subDivision "+u);log.debug(" sdvalParsed.subdivisions[nextSubDivision] "+h.subdivisions[m]+" sdvalParsed.subdivisions[subDivision] "+h.subdivisions[u]);0>=t&&(t=400);log.debug("subDivisionRange "+t);var v=server.GetTitleInternalData({Keys:"RecSubDivision"+u}).Data["RecSubDivision"+u],m=!1;void 0==v&&(m=!0);var p,q=u="noop",w,d=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp"]});if(void 0==d.Data||void 0==d.Data.lastOpp)q=u="noop";else for(w=d.Data.lastOpp.Value.split(","),
d=0;d<w.length;d++)0==d&&(u=w[d]),1==d&&(q=w[d]);p=0==m?JSON.parse(v):[];var A=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>p.length&&(m=!0);var D=Array(p.length),C=0,v=Array(p.length);w=0;for(var B=Array(p.length),y=0,d=0;d<p.length;d++)1==m&&(A[5*Number(p[d].e)+Number(p[d].c)]=1),p[d].uId!=currentPlayerId&&(D[C]=p[d],C++,p[d].uId!=u&&(v[w]=p[d],w++,p[d].uId!=q&&(B[y]=p[d],y++)));if(1==m){for(d=q=m=0;d<A.length;d++)if(0==A[d]){m=Math.floor(d/5);q=d%5;break}d=server.GetTitleData({Keys:"MasterUser"});if(void 0!=
d.Data.MasterUser&&(d=server.GetUserReadOnlyData({PlayFabId:d.Data.MasterUser,Keys:[m+"_"+q+"_RecPos",m+"_"+q+"_RecRot",m+"_"+q+"_RecHeader"]}),void 0!=d.Data&&void 0!=d.Data[m+"_"+q+"_RecPos"]&&void 0!=d.Data[m+"_"+q+"_RecRot"]&&void 0!=d.Data[m+"_"+q+"_RecHeader"])){u=!0;0==l?(l=g,u=!1):l-=e;1>=l&&(l=1);f=parseInt(a,2);var a=[],z={StatisticName:"WinLoss",Version:"0",Value:f};a.push(z);l={StatisticName:"TrophyCount",Version:"0",Value:l};a.push(l);l={StatisticName:"League",Version:"0",Value:x};a.push(l);
server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a});a={trophyWin:g,trophyLose:e};0==u&&(a.trophyWin=0,a.trophyLose=0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:"Default",PosData:d.Data[m+"_"+q+"_RecPos"].Value,RotData:d.Data[m+"_"+q+"_RecRot"].Value,HeaderData:d.Data[m+"_"+q+"_RecHeader"].Value,TrophyLose:e,TrophyWin:g,Opp:"Mniezo"}}}if(0==C)return generateErrObj("no valid recording found for this subdivision");x=D;m=C;0<w&&(m=
w,x=v);0<y&&(m=y,x=B);v=m-1;for(d=0;d<m;d++)if(x[d].wl>c){v=d;break}c=Math.min(m,3);q=Array(c);for(d=0;d<c;d++)q[d]=0>=v?x[d]:v>=m-1?x[m-1-d]:x[v-Math.floor(c/2)+d];x=Math.floor(Math.random()*c);d=q[x].uId;c=q[x].e;m=q[x].c;q=server.GetUserReadOnlyData({PlayFabId:d,Keys:[c+"_"+m+"_RecPos",c+"_"+m+"_RecRot",c+"_"+m+"_RecHeader"]});if(void 0==q)return generateErrObj("Did not find recording for this user: "+d);var v=server.GetPlayerCombinedInfo({PlayFabId:d,InfoRequestParameters:{GetUserAccountInfo:!0,
GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),B=l,x=Number(calculateLeague(l));w="UserGenerated";y=0<x?Number(h.subdivisions[n.leagues[x-1]]):0;n=x>=n.leagues.length-1?2*y:Number(h.subdivisions[n.leagues[x]]);h=JSON.parse(q.Data[c+"_"+m+"_RecHeader"].Value);void 0!=h&&(z=h.Trophies);z=Number(z);0>=n-y?h=g:Number(Math.abs(B-z))>Number(t)?(h=Math.floor((e+r)/2),e=Math.floor((g+
f)/2),w="Default"):(h=e+Math.floor((r-e)/2*((B-z)/(n-y)+1)),e=f+Math.floor((g-f)/2*((z-B)/(n-y)+1)));n=!0;0==l?(n=!1,l=g):(l-=Number(h),1>=l&&(l=1));f=parseInt(a,2);a=[];z={StatisticName:"WinLoss",Version:"0",Value:f};a.push(z);l={StatisticName:"TrophyCount",Version:"0",Value:l};a.push(l);l={StatisticName:"League",Version:"0",Value:x};a.push(l);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a});a={trophyWin:e,trophyLose:h,lastOpp:d+","+u};0==n&&(a.trophyWin=0,a.trophyLose=0);
server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:w,PosData:q.Data[c+"_"+m+"_RecPos"].Value,RotData:q.Data[c+"_"+m+"_RecRot"].Value,HeaderData:q.Data[c+"_"+m+"_RecHeader"].Value,TrophyLose:h,TrophyWin:e,Opp:v.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(b,k){for(var a=server.GetUserInventory({PlayFabId:currentPlayerId}),f=[],c="-1",g={},l={PaintJobs:{itemOwned:"no",itemCustData:b.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:b.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:b.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:b.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",itemCustData:b.wsId,carItemId:"WindshieldId"}},d=0;d<a.Inventory.length;d++)a.Inventory[d].ItemId==
b.carId&&"CarsProgress"==a.Inventory[d].CatalogVersion&&(c=a.Inventory[d].ItemInstanceId),a.Inventory[d].ItemId in l&&(l[a.Inventory[d].ItemId].itemOwned="yes",l[a.Inventory[d].ItemId].itemCustData in a.Inventory[d].CustomData?g[l[a.Inventory[d].ItemId].carItemId]=l[a.Inventory[d].ItemId].itemCustData:log.debug("user doesn't own: "+a.Inventory[d].ItemId+" "+l[a.Inventory[d].ItemId].itemCustData));if("-1"==c)return generateFailObj("User does not own car with id: "+b.carId);for(var e in l)l.hasOwnProperty(e)&&
"no"==l[e].itemOwned&&f.push(e);if(g=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c,Data:g});a=[{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:g}];if(0<f.length)for(f=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:f}),c={0:"Owned"},d=0;d<f.ItemGrantResults.length;d++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:f.ItemGrantResults[d].ItemInstanceId,Data:c});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:a}}};
handlers.updateTrophyCount=function(b,k){var a=0,f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!==f.Statistics.length&&(a=f.Statistics[0].Value);"rStart"==b.val&&(a-=30);0>a&&(a=0);"rWin"==b.val&&(a+=60);if("rLose"==b.val)return{val:a};f=[];f.push({StatisticName:"TrophyCount",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:f});if("rWin"==b.val)return{val:a}};
