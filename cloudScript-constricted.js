function checkCarDataValidity(d,k){if(void 0==d.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemInstanceId,Data:a});for(var b=0,f=0;f<k.Catalog.length;f++)if(k.Catalog[f].ItemId==d.ItemId){var e=
JSON.parse(k.Catalog[f].CustomData),b=parseInt(e.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:b};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemInstanceId,Data:a})}catch(g){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:b}}return"OK"}function generateFailObj(d){return{Result:"Failed",Message:d}}
function generateErrObj(d){return{Result:"Error",Message:d}}
function CheckMaintenanceAndVersion(d){var k=!1,a="A.0.0.1";void 0!=d&&(k=d.debug,a=d.cVersion);if(void 0==a)return"update";d=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var b=d.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(b=d.Data.MinimumGameVersionActual_IOS);if(void 0==b)return"maintenance";for(var f=!1,b=b.split("."),e=0;3>e;e++){var g=0;a.length>e+1&&(g=Number(a[e+1]));var c=0;b.length>e&&
(c=Number(b[e]));if(g<c){f=!0;break}}return 1==f?"update":1==k?"OK":d.Data.Maintenance?"false"==d.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(d){return"maintenance"==d?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(d,k){return{Result:"OK",Message:d,InventoryChange:k}}
function checkBalance(d,k,a,b){if("SC"==d){if(a<k)return generateFailObj("NotEnoughSC")}else if(b<k)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(d){var k=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==k.Data.LeagueSubdivisions||void 0==k.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(k.Data.LeagueSubdivisions).leagues,k=JSON.parse(k.Data.SubdivisionTrophyRanges).subdivisions,b=0;b<a.length;b++)if(!(Number(d)>Number(k[a[b]])))return b}
function recalculateCarPr(d,k,a,b){var f=0,e;e=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<e.Catalog.length;a++)if(e.Catalog[a].ItemId==k){f=JSON.parse(e.Catalog[a].CustomData);f=parseInt(f.basePr)+getObjectValueFromLevel(f,"prPerLvl",d.CarLvl);break}b=void 0===b?server.GetCatalogItems({CatalogVersion:"PartCards"}):b;d={Exhaust:d.ExhaustLvl,Engine:d.EngineLvl,Gearbox:d.GearboxLvl,Suspension:d.SuspensionLvl,Tires:d.TiresLvl,Turbo:d.TurboLvl};for(a=0;a<b.Catalog.length;a++)k=
JSON.parse(b.Catalog[a].CustomData),f+=getObjectValueFromLevel(k,"prPerLvl",Number(d[b.Catalog[a].ItemId]));return f}
function GenerateBlackMarket(d){var k=1,a=server.GetPlayerStatistics({PlayFabId:d,StatisticNames:["League"]});0!=a.Statistics.length&&(k=a.Statistics[0].Value.toString());0>=Number(k)&&(k=1);for(var b=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:d,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),f=JSON.parse(a.Data.BlackMarketRarityBias),e,g=[],c=[],h=[],l=0;l<b.Catalog.length;l++){e=JSON.parse(b.Catalog[l].CustomData);if(void 0==e)return generateErrObj("Part card "+
b.Catalog[l].ItemId+" has no custom data.");0==e.rarity&&g.push(b.Catalog[l].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy);1==e.rarity&&c.push(b.Catalog[l].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy);2==e.rarity&&h.push(b.Catalog[l].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy)}b={};b.BMTime=(new Date).getTime();l=Math.floor(Math.random()*g.length);b.BMItem0=g[l];2<=g.length&&g.splice(l,1);Math.floor(100*Math.random())<Number(f.parts[2])?
g=h:(l=Number(f.parts[0])+Number(f.parts[1]),Math.floor(Math.random()*l)>=Number(f.parts[0])&&(g=c));b.BMItem1=g[Math.floor(Math.random()*g.length)];e=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var m,g=[],c=[],h=[],l=0;l<e.Catalog.length;l++){m=JSON.parse(e.Catalog[l].CustomData);if(void 0==m)return generateErrObj("Car card "+e.Catalog[l].ItemId+" has no custom data.");Number(m.unlockedAtRank)>=Number(k)+1||("0"==m.rarity&&g.push(e.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+
"_0_"+m.BMpriceIncrPerBuy),"1"==m.rarity&&c.push(e.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy),"2"==m.rarity&&h.push(e.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy))}k=Math.floor(Math.random()*g.length);b.BMItem2=g[k];2<=g.length&&g.splice(k,1);0>=c.length&&(0>=h.length?h=c=g:c=h);0>=h.length&&(h=c);Math.floor(100*Math.random())<Number(f.cars[2])?g=h:(l=Number(f.cars[0])+Number(f.cars[1]),Math.floor(Math.random()*l)>=Number(f.cars[0])&&
(g=c));k=Math.floor(Math.random()*g.length);b.BMItem3=g[k];server.UpdateUserInternalData({PlayFabId:d,Data:b});b.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return b}function GetCurrentBlackMarket(d,k){var a={},b=new Date,f=[];f.push("BlackMarketResetMinutes");f=server.GetTitleData({PlayFabId:d,Keys:f});a.BMTime=60*parseInt(f.Data.BlackMarketResetMinutes)-Math.floor((b.getTime()-k.Data.BMTime.Value)/1E3);for(b=0;4>b;b++)a["BMItem"+b]=k.Data["BMItem"+b].Value;return a}
function GetValueFromStatistics(d,k,a){for(var b,f=0;f<d.length;f++)d[f].StatisticName===k&&(b=d[f]);log.debug("Stat with name statisticsName: "+k+" is "+b);return void 0===b?void 0!==a?a:0:Number(b.Value)}function getCatalogItem(d,k){for(var a=server.GetCatalogItems({CatalogVersion:d}),b=0;b<a.Catalog.length;b++)if(a.Catalog[b].ItemId===k)return a.Catalog[b]}
function getObjectValueFromLevel(d,k,a,b){b||(b=0);if(!d[k]||!d[k].length)return b;var f=Number(d[k].length);a>=f&&(a=f-1);return Number(d[k][a])||b}
handlers.buyChest=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(d.curr,d.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<d.cost){var a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:d.curr,Amount:d.cost}),b={};b[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",{VirtualCurrency:b})}return generateInventoryChange("ChestBought",
{})};
handlers.claimDailyMission=function(d,k){var a=Number(d.mIdx),b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==b.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var b=JSON.parse(b.Data.DailyMissionStatus.Value),f=b.dailyMissionClaimStatus;if(a>=f.length)return generateErrObj("Unlock index is out of bounds of playerData claim mission status array");if(1==f[a])return generateErrObj("Mission already claimed");f[a]=
1;b={DailyMissionStatus:JSON.stringify({DailyStatus:b.DailyStatus,dailyMissionClaimStatus:f,timeStamp:b.timeStamp})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});b=JSON.parse(b.Data.DailyMissionData);if(a>=b.missionData.length)return generateErrObj("Unlock index is out of bounds of titleData claim mission reward array");a=b.missionData[a].split("_");a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:a[1],Amount:Number(a[2])});b={};b[a.VirtualCurrency]=a.Balance;return generateInventoryChange("MissionClaimed",{VirtualCurrency:b})};
handlers.endDaily=function(d,k){var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==a.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");for(var b=JSON.parse(a.Data.DailyMissionStatus.Value),a=b.dailyMissionClaimStatus,f,e=-1,g=0;g<b.dailyMissionClaimStatus.length;g++)if(0==a[idx])return generateErrObj("Not all missions were claimed!");a=[0,0,0,0,0,0,0,0];f=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});
tParsed=JSON.parse(f.Data.DailyMissionData);var g=Number(tParsed.minutesToRefresh),c=new Date;if(c.getTime()-Number(b.timeStamp)>6E4*Number(g)){f=2;var h=c.getTime()}else f=0,e=60*Number(g)-Math.floor(c.getTime()-Number(b.timeStamp)/1E3);g={DailyMissionStatus:JSON.stringify({DailyStatus:f,dailyMissionClaimStatus:a,timeStamp:h})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:g});var h=server.GetUserInventory({PlayFabId:currentPlayerId}),l;for(l in d.currencyReq)0<d.currencyReq[l]&&
server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:l,Amount:d.currencyReq[l]});for(l in d.carCardsRequest)if(d.carCardsRequest.hasOwnProperty(l)){b=!1;for(g=0;g<h.Inventory.length;g++)if(h.Inventory[g].ItemId==l&&"CarCards"==h.Inventory[g].CatalogVersion){b=void 0==h.Inventory[g].CustomData?Number(d.carCardsRequest[l]):void 0==h.Inventory[g].CustomData.Amount?Number(d.carCardsRequest[l]):isNaN(Number(h.Inventory[g].CustomData.Amount))?Number(d.carCardsRequest[l]):Number(h.Inventory[g].CustomData.Amount)+
Number(d.carCardsRequest[l]);b={Amount:b};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.Inventory[g].ItemInstanceId,Data:b});b=!0;break}0==b&&(g=[l],g=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:g}),b={Amount:d.carCardsRequest[l]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:b}))}for(l in d.partCardsRequest)if(d.partCardsRequest.hasOwnProperty(l)){b=
!1;for(g=0;g<h.Inventory.length;g++)if(h.Inventory[g].ItemId==l&&"PartCards"==h.Inventory[g].CatalogVersion){b=void 0==h.Inventory[g].CustomData?Number(d.partCardsRequest[l]):void 0==h.Inventory[g].CustomData.Amount?Number(d.partCardsRequest[l]):isNaN(Number(h.Inventory[g].CustomData.Amount))?Number(d.partCardsRequest[l]):Number(h.Inventory[g].CustomData.Amount)+Number(d.partCardsRequest[l]);b={Amount:b};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.Inventory[g].ItemInstanceId,
Data:b});b=!0;break}0==b&&(g=[l],g=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:g}),b={Amount:d.partCardsRequest[l]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:b}))}server.GetUserInventory({PlayFabId:currentPlayerId});return{Result:"OK",Message:"DailyCompleted",InventoryChange:inventory,DailyStatus:{status:f,claimStatus:a,timeRemaining:e}}};
handlers.endGame=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b="01",f,e="0";"rWin"==d.outcome&&(e="1");a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=a.Statistics.length&&(f=a.Statistics[0].Value.toString(),b=Number(f).toString(2));var a=0,g;g=Array(b.length);for(var c=0;c<g.length-1;c++)g[c]=b[c];g[g.length-1]=e;b=g;g=b.length;for(var h=e=0,c=1;c<b.length;c++)"1"==b[c]?(a++,h++):(h>e&&(e=h),h=0);
g=Math.round(a/g*100);var h=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),a=0,l,c=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=c.Statistics.length&&(a=c.Statistics[0].Value,log.debug("getting trophy count "+c.Statistics[0].Value));l=a=Number(a);c=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose","trophyWin"]});c=void 0==c.Data.trophyLose||void 0==c.Data.trophyWin?45:Number(c.Data.trophyLose.Value)+Number(c.Data.trophyWin.Value);
"rWin"==d.outcome&&(a+=c);var m=JSON.parse(d.recordingHeader),c=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Wins","TotalGamesCompleted","LongestWinStreak","BestDriftScore"]}).Statistics,n=GetValueFromStatistics(c,"TotalGamesCompleted",0),n=Number(n)+1,t=GetValueFromStatistics(c,"Wins",0);"rWin"==d.outcome&&(t=Number(t)+1);var u=GetValueFromStatistics(c,"LongestWinStreak",0);e>u&&(u=e);var x=GetValueFromStatistics(c,"BestDriftScore",0);Number(m.Score)>x&&(x=Number(m.Score));
e=calculateLeague(a);for(c=f=0;c<b.length;c++)"1"==b[c]&&(f+=Math.pow(2,c));c=[];c.push({StatisticName:"WinLoss",Version:"0",Value:f});b={StatisticName:"TrophyCount",Version:"0",Value:a};c.push(b);b={StatisticName:"League",Version:"0",Value:e};c.push(b);b={StatisticName:"Wins",Version:"0",Value:t};c.push(b);b={StatisticName:"TotalGamesCompleted",Version:"0",Value:n};c.push(b);b={StatisticName:"LongestWinStreak",Version:"0",Value:u};c.push(b);b={StatisticName:"BestDriftScore",Version:"0",Value:x};
c.push(b);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});if(10>=Number(m.Score)){var p={TrophyCount:a,League:e};return{Result:p}}b=JSON.parse(h.Data.SubdivisionTrophyRanges);for(c=0;c<b.subdivisions.length;c++)if(l<b.subdivisions[c]){p=c;break}c=[];c.push({Key:d.envIndex+"_"+d.courseIndex+"_RecPos",Value:d.recordingPos});c.push({Key:d.envIndex+"_"+d.courseIndex+"_RecRot",Value:d.recordingRot});c.push({Key:d.envIndex+"_"+d.courseIndex+"_RecHeader",Value:d.recordingHeader});
server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:c});c=server.GetTitleInternalData({Key:"RecSubDivision"+p}).Data["RecSubDivision"+p];if(void 0==c)b=[],g={wl:g,e:d.envIndex,c:d.courseIndex,uId:currentPlayerId},b.push(g);else{b=JSON.parse(c);g={wl:g,e:d.envIndex,c:d.courseIndex,uId:currentPlayerId};h=!1;for(c=l=0;c<b.length;c++)b[c].uId==currentPlayerId&&l++;if(2<l)return p={TrophyCount:a,League:e},{Result:p};for(c=0;c<b.length;c++)if(b[c].e==d.envIndex&&b[c].c==d.courseIndex){h=!0;b[c]=
g;if(1==b.length)break;if(0<c)if(b[c].wl>b[c-1].wl){if(c==b.length-1)break;for(l=c+1;l<b.length;l++)if(b[l-1].wl>b[l].wl)m=b[l],b[l]=b[l-1],b[l-1]=m;else break}else for(l=c-1;0<=l;l--)if(b[l+1].wl<b[l].wl)m=b[l],b[l]=b[l+1],b[l+1]=m;else break;else for(l=c+1;l<b.length;l++)if(b[l-1].wl>b[l].wl)m=b[l],b[l]=b[l-1],b[l-1]=m;else break}0==h&&b.push(g)}c=JSON.stringify(b);server.SetTitleInternalData({Key:"RecSubDivision"+p,Value:c});p={TrophyCount:a,League:e};return{Result:p}};
function UpdateExperience(d,k,a,b,f,e){d=JSON.parse(getCatalogItem(d,k).CustomData)[a];k=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;k=k[k.length-1];e=e||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;e=GetValueFromStatistics(e,"Experience",0);if(e>=k)return k;if(isNaN(Number(d)))a=Number(d.length),b>=a&&(b=a-1),b=Number(d[b]);else if(b=Number(d),0===b)return e;e=Math.min(e+b,k);if(!f)return e;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:e}]});return e}
handlers.generateDaily=function(d,k){var a,b=new Date;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var f=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(f.DailyStatus);if(0==a){var b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e;tParsed=JSON.parse(b.Data.DailyMissionData);e=Number(tParsed.minutesToRefresh);b=new Date;b.getTime()-Number(f.timeStamp)>6E4*Number(e)&&(a=1)}if(1!=a)return generateErrObj("DailyStatus is: "+
a+". Should be 1")}a=2;b=b.getTime();a={DailyMissionStatus:JSON.stringify({DailyStatus:a,dailyMissionClaimStatus:[0,0,0,0,0,0,0,0],timeStamp:b})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK"}};
handlers.getDailyMissionStatus=function(d,k){var a,b=[0,0,0,0,0,0,0,0],f=-1;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var e=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(e.DailyStatus);var g=b.length;g>e.dailyMissionClaimStatus.length&&(g=e.dailyMissionClaimStatus.length);for(var c=0;c<g;c++)b[c]=e.dailyMissionClaimStatus[c];0==a&&(g=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),tParsed=
JSON.parse(g.Data.DailyMissionData),g=Number(tParsed.minutesToRefresh),c=new Date,c.getTime()-Number(e.timeStamp)>6E4*Number(g)?(a=2,b=[0,0,0,0,0,0,0,0],e=c.getTime(),e={DailyStatus:a,dailyMissionClaimStatus:b,timeStamp:e},e=JSON.stringify(e),e={DailyMissionStatus:e},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:e})):f=60*Number(g)-Math.floor(c.getTime()-Number(e.timeStamp)/1E3))}else a=2,c=new Date,e=c.getTime(),e={DailyStatus:a,dailyMissionClaimStatus:b,timeStamp:e},e=JSON.stringify(e),
e={DailyMissionStatus:e},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:e});return{Result:"OK",Message:" ",DailyStatus:{status:a,claimStatus:b,timeRemaining:f}}};handlers.getServerTime=function(d,k){return{time:new Date}};
handlers.initServerData=function(d){d=[];var k={StatisticName:"TrophyCount",Version:"0",Value:"0"};d.push(k);k={StatisticName:"League",Version:"0",Value:"0"};d.push(k);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:d});d=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var k={0:"Owned"},a=0;a<d.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:d.ItemGrantResults[a].ItemInstanceId,Data:k});d=[];d.push("FordFocus");d=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:d});k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k});k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k});k={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k});k=[];k.push("Engine");k=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});k={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k})};
handlers.openChest=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<d.levelUpRewardIndex){var b=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),f={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:f}):b=a.Data.LastLevelReward.Value;var e=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,g=GetValueFromStatistics(a,"Experience",0);0==g&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var c=e.length,a=0;a<e.length;a++)if(!(g>=e[a])){c=a;break}if(Number(d.levelUpRewardIndex)<=Number(c))b=Number(d.levelUpRewardIndex),f.LastLevelReward=b,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:f}),a=""+b,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",
PlayFabId:currentPlayerId,ItemIds:a});else return generateFailObj("already got reward for level: "+b)}b=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<d.currCost){if("OK"!=checkBalance(d.currType,d.currCost,b.VirtualCurrency.SC,b.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:d.currType,Amount:d.currCost})}for(var h in d.currencyReq)0<d.currencyReq[h]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:h,Amount:d.currencyReq[h]});for(h in d.carCardsRequest)if(d.carCardsRequest.hasOwnProperty(h)){f=!1;for(a=0;a<b.Inventory.length;a++)if(b.Inventory[a].ItemId==h&&"CarCards"==b.Inventory[a].CatalogVersion){f=void 0==b.Inventory[a].CustomData?Number(d.carCardsRequest[h]):void 0==b.Inventory[a].CustomData.Amount?Number(d.carCardsRequest[h]):isNaN(Number(b.Inventory[a].CustomData.Amount))?Number(d.carCardsRequest[h]):Number(b.Inventory[a].CustomData.Amount)+Number(d.carCardsRequest[h]);
f={Amount:f};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[a].ItemInstanceId,Data:f});f=!0;break}0==f&&(a=[h],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),f={Amount:d.carCardsRequest[h]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:f}))}for(h in d.partCardsRequest)if(d.partCardsRequest.hasOwnProperty(h)){f=!1;for(a=0;a<b.Inventory.length;a++)if(b.Inventory[a].ItemId==
h&&"PartCards"==b.Inventory[a].CatalogVersion){f=void 0==b.Inventory[a].CustomData?Number(d.partCardsRequest[h]):void 0==b.Inventory[a].CustomData.Amount?Number(d.partCardsRequest[h]):isNaN(Number(b.Inventory[a].CustomData.Amount))?Number(d.partCardsRequest[h]):Number(b.Inventory[a].CustomData.Amount)+Number(d.partCardsRequest[h]);f={Amount:f};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[a].ItemInstanceId,Data:f});f=!0;break}0==f&&(a=[h],a=server.GrantItemsToUser({CatalogVersion:"PartCards",
PlayFabId:currentPlayerId,ItemIds:a}),f={Amount:d.partCardsRequest[h]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:f}))}h=server.GetUserInventory({PlayFabId:currentPlayerId});d.chestId&&0>=d.levelUpRewardIndex&&(a=UpdateExperience("Chests",d.chestId,"xpGain",0,!0),h.Experience=a);return generateInventoryChange("InventoryUpdated",h)};
handlers.purchaseBMItem=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>d.itemId||3<d.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+d.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),b=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+d.itemId].Value.split("_"),f=b.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var e;e=2>d.itemId?"PartCards":"CarCards";var g=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),f=checkBalance(a[1],g,f,f);if("OK"!=f)return f;for(var c,h,f=0;f<b.Inventory.length;f++)if(b.Inventory[f].ItemId==a[0]&&b.Inventory[f].CatalogVersion==e){c=b.Inventory[f].ItemInstanceId;void 0===b.Inventory[f].CustomData?h={Amount:1}:void 0===b.Inventory[f].CustomData.Amount?h={Amount:1}:(h=Number(b.Inventory[f].CustomData.Amount)+1,isNaN(h)&&(h=1),h={Amount:h});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c,Data:h});break}void 0===c&&(c=[],c.push(a[0]),c=server.GrantItemsToUser({CatalogVersion:e,PlayFabId:currentPlayerId,ItemIds:c}).ItemGrantResults[0].ItemInstanceId,void 0===c?generateErrObj("grantRequest denied"):(h={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c,Data:h})));c=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:g});g=a[0]+"_"+a[1]+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];b={};b["BMItem"+
d.itemId]=g;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});h=[{ItemId:a[0],CatalogVersion:e,CustomData:h}];e={};e[c.VirtualCurrency]=c.Balance;a=d.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];f={Inventory:h,VirtualCurrency:e};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:f,BMItemChange:a}};
handlers.purchaseItems=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=server.GetUserInventory({PlayFabId:currentPlayerId}),f=b.VirtualCurrency.SC,e=b.VirtualCurrency.HC;switch(d.purchaseType){case "carUpgrade":return upgradeCar(d,b,f,e);case "partUpgrade":return upgradePart(d,b,f,e);case "custPurchase":for(var g=server.GetCatalogItems({CatalogVersion:"Customization"}),c,h=0,a="SC",l=0;l<g.Catalog.length;l++)if(g.Catalog[l].ItemId==d.custId){c=
g.Catalog[l];cardInfo=JSON.parse(g.Catalog[l].CustomData);h=d.custVal+",Cost";a=cardInfo[d.custVal+",Curr"];h=cardInfo[h];e=checkBalance(a,h,f,e);if("OK"!=e)return e;break}if(void 0==c)return generateErrObj("Customization does not exist in catalog.");for(var m,n,l=0;l<b.Inventory.length;l++)if(b.Inventory[l].ItemId==d.custId){m=b.Inventory[l];n=b.Inventory[l].ItemInstanceId;if(void 0!=m.CustomData&&String(d.custVal)in m.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
m){log.info("user doesn't have customization category. Granting ... ");e=[];e.push(d.custId);e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e});if(0==e.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");n=e.ItemGrantResults[0].ItemInstanceId}e={};e[String(d.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:n,Data:e});e=[{ItemId:d.custId,
CatalogVersion:"Customization",CustomData:e}];0<h?(a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:h}),h={},h[a.VirtualCurrency]=a.Balance,l={Inventory:e,VirtualCurrency:h}):l={Inventory:e};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":a=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});h=!1;for(l=n=0;l<a.Catalog.length;l++)if(a.Catalog[l].ItemId==d.packId){n=a.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(a.Catalog[l].CustomData);h=!0;break}if(0==h)return generateErrObj("pack with ID: "+d.packId+" not found in catalog.");if(0>=n)return generateErrObj("pack with ID: "+d.packId+" shouldn't have negative cost.");if(n>e)return generateFailObj("Not enough HC.");a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:n});e=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});h={};h[e.VirtualCurrency]=
e.Balance;h[a.VirtualCurrency]=a.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:h});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(d){d=CheckMaintenanceAndVersion(d);return"OK"!=d?generateMaintenanceOrUpdateObj(d):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(d){d=server.GetUserInventory({PlayFabId:currentPlayerId});for(var k=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),b=!1,f=0;f<d.Inventory.length;f++)if("CarsProgress"==d.Inventory[f].CatalogVersion){var b=!0,e=checkCarDataValidity(d.Inventory[f],k);if("PlayFabError"==e||void 0===e)return generateErrObj("PlayfabError");"OK"==e?log.debug("Data for "+d.Inventory[f].ItemId+" OK"):d.Inventory[f].CustomData=e;
d.Inventory[f].CustomData.Pr=recalculateCarPr(d.Inventory[f].CustomData,d.Inventory[f].ItemId,k,a);e={};e.Pr=d.Inventory[f].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.Inventory[f].ItemInstanceId,Data:e})}return!1===b?(d=[],d.push("FordFocus"),d=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:d}),k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k}),k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k}),k={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k}),generateErrObj("UserHasNoCars ... reiniting")):d};
handlers.retrieveBlackMarket=function(d,k){var a=CheckMaintenanceAndVersion(d);if(!0===d.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var b=[];b.push("BMTime");for(var f=0;4>f;f++)b.push("BMItem"+f);f=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:b});if(void 0===f.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var b=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:e});if(!0===d.reset){a="HC";f=200;b=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==b.Data.BlackMarketResetCost&&(f=b.Data.BlackMarketResetCost.split("_"),a=f[0],f=Number(f[1]));if(0<f){b=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,f,b.VirtualCurrency.SC,b.VirtualCurrency.HC))return generateFailObj("not enough money");f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:f});a=GenerateBlackMarket(currentPlayerId);b={};b[f.VirtualCurrency]=f.Balance;f={VirtualCurrency:b};a.InventoryChange=f;return a}return GenerateBlackMarket(currentPlayerId)}return b.getTime()-
parseInt(f.Data.BMTime.Value)>6E4*parseInt(e.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,f),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,f)};
handlers.rewardUsers=function(d,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,b=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),f=0;0>=b&&(a=Number(a)/3E3,f=Number(Math.floor(800*a)));b=Number(b)+f;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:b}]});return b};
handlers.startGame=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a="10",b,f=50,e,g=0;e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});if(0!=e.Statistics.length){b=e.Statistics[0].Value.toString();a=Number(b).toString(2);e=a.length;for(var c=1;c<a.length;c++)"1"==a[c]&&g++;f=Math.round(g/e*100)}a+="0";if(20<a.length){g=Array(20);a=a.slice(2);g[0]="1";for(c=0;c<a.length;c++)g[c+1]=a[c];a=g}var h=server.GetTitleData({Key:["LeagueSubdivisions",
"SubdivisionTrophyRanges","TrophyGainRange","TrophyLoseRange","SubdivisionPrRanges"]}),g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TotalGames"]}).Statistics,g=GetValueFromStatistics(g,"TotalGames",0),g=Number(g)+1,l=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});e=0;0!=l.Statistics.length&&(e=l.Statistics[0].Value);e=Number(e);var m=JSON.parse(h.Data.SubdivisionTrophyRanges);b=JSON.parse(h.Data.LeagueSubdivisions);for(var n=JSON.parse(h.Data.SubdivisionPrRanges),
t=43,u=h.Data.TrophyGainRange.split("_"),x=h.Data.TrophyLoseRange.split("_"),l=Number(u[0]),h=Number(u[1]),u=Number(x[0]),x=Number(x[1]),c=0;c<m.subdivisions.length;c++)if(e<Number(m.subdivisions[c])){t=c;break}var p=server.GetTitleInternalData({Keys:"RecSubDivision"+t}).Data["RecSubDivision"+t],q=!1;void 0==p&&(q=!0);var y,w=t="noop",v,c=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp"]});if(void 0==c.Data||void 0==c.Data.lastOpp)w=t="noop";else for(v=c.Data.lastOpp.Value.split(","),
c=0;c<v.length;c++)0==c&&(t=v[c]),1==c&&(w=v[c]);y=0==q?JSON.parse(p):[];var E=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>y.length&&(q=!0);var B=Array(y.length),z=0,p=Array(y.length);v=0;for(var D=Array(y.length),C=0,c=0;c<y.length;c++)1==q&&(E[5*Number(y[c].e)+Number(y[c].c)]=1),y[c].uId!=currentPlayerId&&(B[z]=y[c],z++,y[c].uId!=t&&(p[v]=y[c],v++,y[c].uId!=w&&(D[C]=y[c],C++)));if(1==q){q=[];for(c=0;c<E.length;c++)0==E[c]&&q.push(c);q=q[Math.floor(Math.random()*q.length)];c=Math.floor(q/5);q%=5;w=server.GetTitleData({Keys:"MasterUser"});
if(void 0!=w.Data.MasterUser&&(w=server.GetUserReadOnlyData({PlayFabId:w.Data.MasterUser,Keys:[c+"_"+q+"_RecPos",c+"_"+q+"_RecRot",c+"_"+q+"_RecHeader"]}),void 0!=w.Data&&void 0!=w.Data[c+"_"+q+"_RecPos"]&&void 0!=w.Data[c+"_"+q+"_RecRot"]&&void 0!=w.Data[c+"_"+q+"_RecHeader"])){var A=!0;0==e?(e=h,A=!1):e-=u;1>=e&&(e=1);b=parseInt(a,2);a=[];b={StatisticName:"WinLoss",Version:"0",Value:b};a.push(b);e={StatisticName:"TrophyCount",Version:"0",Value:e};a.push(e);r={StatisticName:"League",Version:"0",
Value:r};a.push(r);r={StatisticName:"TotalGames",Version:"0",Value:g};a.push(r);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a});a={trophyWin:Math.floor((Number(h)+Number(l))/2),trophyLose:Math.floor((Number(x)+Number(u))/2)};0==A&&(a.trophyWin=0,a.trophyLose=0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:"TheStig",PosData:w.Data[c+"_"+q+"_RecPos"].Value,RotData:w.Data[c+"_"+q+"_RecRot"].Value,HeaderData:w.Data[c+"_"+q+"_RecHeader"].Value,
TrophyLose:u,TrophyWin:h,Opp:"Mniezo"}}}if(0==z)return generateErrObj("no valid recording found for this subdivision");r=B;0<v&&(z=v,r=p);0<C&&(z=C,r=D);v=z-1;for(c=0;c<z;c++)if(r[c].wl>f){v=c;break}f=Math.min(z,3);p=Array(f);for(c=0;c<f;c++)p[c]=0>=v?r[c]:v>=z-1?r[z-1-c]:r[v-Math.floor(f/2)+c];r=Math.floor(Math.random()*f);c=p[r].uId;f=p[r].e;p=p[r].c;v=server.GetUserReadOnlyData({PlayFabId:c,Keys:[f+"_"+p+"_RecPos",f+"_"+p+"_RecRot",f+"_"+p+"_RecHeader"]});if(void 0==v)return generateErrObj("Did not find recording for this user: "+
c);var D=server.GetPlayerCombinedInfo({PlayFabId:c,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),z=e,r=Number(calculateLeague(e)),C="UserGenerated",B=0<r?Number(m.subdivisions[b.leagues[r-1]]):0,w=r>=b.leagues.length-1?2*B:Number(m.subdivisions[b.leagues[r]]),q=JSON.parse(v.Data[f+"_"+p+"_RecHeader"].Value);void 0!=q&&(A=q.Trophies);
A=Number(A);0>=w-B?(m=x,A=l):(m=u+Math.floor((x-u)/2*((z-A)/(w-B)+1)),A=l+Math.floor((h-l)/2*((A-z)/(w-B)+1)));q.Pr>Number(n.subdivisions[b.leagues[r-1]])&&(m=Math.floor((u+x)/2)-1+Math.floor(3*Math.random()),A=Math.floor((h+l)/2)-1+Math.floor(3*Math.random()),C="MobyDick");l=!0;0==e?(l=!1,e=h):(e-=Number(m),1>=e&&(e=1));b=parseInt(a,2);a=[];b={StatisticName:"WinLoss",Version:"0",Value:b};a.push(b);e={StatisticName:"TrophyCount",Version:"0",Value:e};a.push(e);r={StatisticName:"League",Version:"0",
Value:r};a.push(r);r={StatisticName:"TotalGames",Version:"0",Value:g};a.push(r);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a});a={trophyWin:A,trophyLose:m,lastOpp:c+","+t};0==l&&(a.trophyWin=0,a.trophyLose=0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:C,PosData:v.Data[f+"_"+p+"_RecPos"].Value,RotData:v.Data[f+"_"+p+"_RecRot"].Value,HeaderData:v.Data[f+"_"+p+"_RecHeader"].Value,TrophyLose:m,TrophyWin:A,Opp:D.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var b=server.GetUserInventory({PlayFabId:currentPlayerId}),f=[],e="-1",g={},c={PaintJobs:{itemOwned:"no",itemCustData:d.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:d.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:d.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:d.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:d.wsId,carItemId:"WindshieldId"}},a=0;a<b.Inventory.length;a++)b.Inventory[a].ItemId==d.carId&&"CarsProgress"==b.Inventory[a].CatalogVersion&&(e=b.Inventory[a].ItemInstanceId),b.Inventory[a].ItemId in c&&(c[b.Inventory[a].ItemId].itemOwned="yes",c[b.Inventory[a].ItemId].itemCustData in b.Inventory[a].CustomData?g[c[b.Inventory[a].ItemId].carItemId]=c[b.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+b.Inventory[a].ItemId+" "+c[b.Inventory[a].ItemId].itemCustData));if("-1"==
e)return generateFailObj("User does not own car with id: "+d.carId);for(var h in c)c.hasOwnProperty(h)&&"no"==c[h].itemOwned&&f.push(h);if(g=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e,Data:g});h=[{ItemId:d.carId,CatalogVersion:"CarsProgress",CustomData:g}];if(0<f.length)for(f=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:f}),b={0:"Owned"},
a=0;a<f.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[a].ItemInstanceId,Data:b});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:h}}};
function upgradeCar(d,k,a,b){for(var f=server.GetCatalogItems({CatalogVersion:"CarCards"}),e=!1,g,c=0;c<k.Inventory.length;c++)if(k.Inventory[c].ItemId==d.carId&&"CarsProgress"==k.Inventory[c].CatalogVersion){e=!0;g=k.Inventory[c];break}for(var h,c=0;c<f.Catalog.length;c++)if(f.Catalog[c].ItemId==d.carId){h=JSON.parse(f.Catalog[c].CustomData);break}if(void 0===h)return generateErrObj("CardNotFoundForCarwithID: "+d.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===e){var l=parseInt(g.CustomData.CarLvl)+1;if(l>=Number(h.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var m=getObjectValueFromLevel(h,"currCostPerLvl",l),c=checkBalance(h.currType,m,a,b);if("OK"!=c)return c;a=getObjectValueFromLevel(h,"cardCostPerLvl",l);g.CustomData.CarLvl=l;for(var e=!1,n,c=0;c<k.Inventory.length;c++)if(k.Inventory[c].ItemId==d.carId&&"CarCards"==k.Inventory[c].CatalogVersion){e=!0;try{if(void 0===k.Inventory[c].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===k.Inventory[c].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(k.Inventory[c].CustomData.Amount)>=a)k.Inventory[c].CustomData.Amount-=a,n={Amount:k.Inventory[c].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[c].ItemInstanceId,Data:n});else return generateFailObj("Insufficient cards for real: "+k.Inventory[c].CustomData.Amount+" vs "+a)}catch(u){return generateFailObj("Insufficient cards")}break}if(!1===
e)return generateFailObj("No cards found");k=recalculateCarPr(g.CustomData,g.ItemId,f,void 0);c={CarLvl:l,Pr:k};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemInstanceId,Data:c});var t;0<m&&(t=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h.currType,Amount:m}));d=[{ItemId:d.carId,CatalogVersion:"CarCards",CustomData:n},{ItemId:d.carId,CatalogVersion:"CarsProgress",CustomData:c}];n={};c={Inventory:d};void 0!=t&&(n[t.VirtualCurrency]=
t.Balance,c.VirtualCurrency=n);c.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+h.rarity,l,!0);return generateInventoryChange("InventoryUpdate",c)}e=!1;for(c=0;c<k.Inventory.length;c++)if(k.Inventory[c].ItemId==d.carId&&"CarCards"==k.Inventory[c].CatalogVersion){e=!0;try{if(void 0===k.Inventory[c].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===k.Inventory[c].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(k.Inventory[c].CustomData.Amount)>=Number(h.cardCostPerLvl[1]))m=k.Inventory[c].ItemInstanceId,k.Inventory[c].CustomData.Amount-=h.cardCostPerLvl[1],n={Amount:k.Inventory[c].CustomData.Amount};else return generateFailObj("Insufficient cards: "+k.Inventory[c].CustomData.Amount+" vs "+h.cardCostPerLvl[1]+".")}catch(u){return generateFailObj("Insufficient cards: "+u)}break}if(0==e)return generateFailObj("No cards found");c=checkBalance(h.currType,h.currCostPerLvl[1],a,b);if("OK"!=c)return c;
g=[];g.push(d.carId);g=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:g});if(!1===g.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:m,Data:n});0<h.currCostPerLvl[1]&&(t=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:h.currType,Amount:h.currCostPerLvl[1]}));c={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:c});c={TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:c});c={PlatesId:"0",WindshieldId:"0",
Pr:Number(h.basePr)+h.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:c});f=g=!1;for(c=0;c<k.Inventory.length;c++)if("PaintJobs"==k.Inventory[c].ItemId){f=!0;void 0!=k.Inventory[c].CustomData?h.defaultPaintID in k.Inventory[c].CustomData?g=!0:(l={},l[h.defaultPaintID]="Owned"):(l={},l[h.defaultPaintID]="Owned");void 0!=l&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[c].ItemInstanceId,
Data:l});break}0==f&&(paintToGive=[],paintToGive.push("PaintJobs"),k=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),l={},l[h.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:l}));c={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",
Pr:Number(h.basePr)+h.prPerLvl[1]};d=[{ItemId:d.carId,CatalogVersion:"CarCards",CustomData:n},{ItemId:d.carId,CatalogVersion:"CarsProgress",CustomData:c}];0==g&&(n={},n[h.defaultPaintID]="Owned",d.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:n}));n={};c={Inventory:d};void 0!=t&&(n[t.VirtualCurrency]=t.Balance,c.VirtualCurrency=n);c.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+h.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",c)}
function upgradePart(d,k,a,b){for(var f=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),e=!1,g=0;g<f.Catalog.length;g++)if(f.Catalog[g].ItemId==d.carId){e=!0;break}if(!1===e)return generateErrObj("car with ID: "+d.carId+" not found in catalog.");for(var f=server.GetCatalogItems({CatalogVersion:"PartCards"}),e=!1,c,g=0;g<f.Catalog.length;g++)if(f.Catalog[g].ItemId==d.partId){c=JSON.parse(f.Catalog[g].CustomData);e=!0;break}if(0==e)return generateErrObj("part with ID: "+d.partId+" not found in catalog.");
for(var e=!1,h,g=0;g<k.Inventory.length;g++)if(k.Inventory[g].ItemId==d.carId&&"CarsProgress"==k.Inventory[g].CatalogVersion){e=!0;h=k.Inventory[g];break}if(!1===e)return generateFailObj("car with ID: "+d.carId+" not found in user inventory.");for(var l=!1,e=0,m={},g=0;g<k.Inventory.length;g++)if(k.Inventory[g].ItemId==d.partId&&"PartCards"==k.Inventory[g].CatalogVersion){var l=!0,n={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},
e=parseInt(h.CustomData[n[d.partId]])+1;if(e>=Number(c.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var t=getObjectValueFromLevel(c,"cardCostPerLvl",e),u=getObjectValueFromLevel(c,"currCostPerLvl",e);m[n[d.partId]]=e;h.CustomData[n[d.partId]]=e;var x;a=checkBalance(c.currType,u,a,b);if("OK"!=a)return a;try{if(void 0!==k.Inventory[g].CustomData&&void 0!==k.Inventory[g].CustomData.Amount&&k.Inventory[g].CustomData.Amount>=t)k.Inventory[g].CustomData.Amount-=t,x={Amount:k.Inventory[g].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[g].ItemInstanceId,Data:x});else return generateFailObj("Insufficient cards")}catch(q){return generateFailObj("Insufficient cards")}break}if(0==l)return generateFailObj("Part not found");var p;0<u&&(p=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.currType,Amount:u}));g=recalculateCarPr(h.CustomData,h.ItemId,void 0,f);m.Pr=g;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:h.ItemInstanceId,Data:m});h={};g={Inventory:[{ItemId:d.partId,CatalogVersion:"PartCards",CustomData:x},{ItemId:d.carId,CatalogVersion:"CarsProgress",CustomData:m}]};void 0!==p&&(h[p.VirtualCurrency]=p.Balance,g.VirtualCurrency=h);g.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+c.rarity,e,!0);return generateInventoryChange("InventoryUpdatePart",g)};
