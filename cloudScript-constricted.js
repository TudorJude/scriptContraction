function checkCarDataValidity(b,k){if(void 0==b.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});for(var c=0,e=0;e<k.Catalog.length;e++)if(k.Catalog[e].ItemId==b.ItemId){var d=
JSON.parse(k.Catalog[e].CustomData),c=parseInt(d.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a})}catch(h){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:c}}return"OK"}function generateFailObj(b){return{Result:"Failed",Message:b}}
function generateErrObj(b){return{Result:"Error",Message:b}}
function CheckMaintenanceAndVersion(b){var k=!1,a="A.0.0.1";void 0!=b&&(k=b.debug,a=b.cVersion);if(void 0==a)return"update";b=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var c=b.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(c=b.Data.MinimumGameVersionActual_IOS);if(void 0==c)return"maintenance";for(var e=!1,c=c.split("."),d=0;3>d;d++){var h=0;a.length>d+1&&(h=Number(a[d+1]));var f=0;c.length>d&&
(f=Number(c[d]));if(h!=f){h<f&&(e=!0);break}}return 1==e?"update":1==k?"OK":b.Data.Maintenance?"false"==b.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(b){return"maintenance"==b?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(b,k){return{Result:"OK",Message:b,InventoryChange:k}}
function publishToLiveFeed(b,k,a){var c=server.GetTitleData({Keys:["LiveFeedDictionary"]});if(void 0!=c.Data.LiveFeedDictionary){var e=JSON.parse(c.Data.LiveFeedDictionary),d=c=0,h=1,f=1,g=k,l=a,n=0,t=0,r=!1,q={};q.ts=(new Date).getTime();try{n=Number(e.MetaData.HealthDecayPerMinute),t=Number(e.MetaData.MaxFeedHistory)}catch(v){log.debug("invalid metadata");return}try{var c=c+Number(e.ActorData.Base.health),d=d+Number(e.ActorData.Base.damage),D=server.GetPlayerStatistics({PlayFabId:b,StatisticNames:["IAPValue",
"Trophies"]}).Statistics,A=Number(GetValueFromStatistics(D,"IAPValue",0)),C=Number(GetValueFromStatistics(D,"Trophies",0)),c=c+Number(e.ActorData.IAPValue.health)*A,d=d+Number(e.ActorData.IAPValue.damage)*A,c=c+Number(e.ActorData.Trophies.health)*C,d=d+Number(e.ActorData.Trophies.damage)*C}catch(v){log.debug("error at liveFeed actor: "+v);return}try{void 0!=e.ActionsData[k]&&(c+=Number(e.ActionsData[k].health),d+=Number(e.ActionsData[k].damage),g=e.ActionsData[k].id,"true"==e.ActionsData[k].isUnique&&
(r=!0),e.ActionsData[k].valMultiplier&&(h=Number(e.ActionsData[k].valMultiplier.health),f=Number(e.ActionsData[k].valMultiplier.damage)))}catch(v){log.debug("error at liveFeed action: "+v);return}try{1==isNaN(a)?void 0!=e.DirectObjectData[a]&&(c+=Number(e.DirectObjectData[a].health),d+=Number(e.DirectObjectData[a].damage),l=e.DirectObjectData[a].id):(c+=h*Number(a),d+=f*Number(a),l=a)}catch(v){log.debug("error at liveFeed object: "+v);return}k=server.GetPlayerCombinedInfo({PlayFabId:b,InfoRequestParameters:{GetUserAccountInfo:!0}});
var m;try{m=k.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}catch(v){log.debug("error at liveFeed nameget: "+v);return}log.debug("10");q.health=c;q.currentHealth=c;q.UserId=b;q.UserName=m;q.Action=g;q.Object=l;b=server.GetTitleInternalData({Keys:["LiveFeed"]});log.debug("11");if(void 0!=b.Data.LiveFeed&&(log.debug("12"),b=JSON.parse(b.Data.LiveFeed),"OK"==ApplyDamageOverTimeToFeed(b,n))){var u;try{if(Number(t)<=Number(b.length)||1==r){log.debug("13");u=Array(b.length);for(var n=!1,p=0;p<b.length;p++)if(b[p].Action==
g&&1==r||b[p].currentHealth<d&&0==r){n=!0;b.splice(p,1);break}0==n&&b.splice(u.length-1,1);for(p=0;p<b.length;p++)if(b[p].currentHealth<c){b.splice(p,0,q);u=b;break}}else for(u=Array(b.length+1),u[b.length]=q,p=0;p<b.length;p++)if(u[p]=b[p],b[p].currentHealth<c&&0==r||b[p].Action==g&&1==r){for(u[p]=q;p<b.length;p++)u[p+1]=b[p];break}}catch(v){log.debug("found error at feed replace/add: "+v);return}u=JSON.stringify(u);server.SetTitleInternalData({Key:"LiveFeed",Value:u})}}}
function ApplyDamageOverTimeToFeed(b,k){if(void 0==b.length)return"Error";for(var a=(new Date).getTime(),c=0,e=0;e<b.length;e++)try{c=Math.abs(Number(b[e].ts)-Number(a))*Number(k),c/=6E4,c=Math.floor(c),b[e].currentHealth=Math.max(Number(b[e].health)-Number(c),0)}catch(d){b.splice(e,1)}return"OK"}
function updateUserProfileInfo(b,k){var a={};a.CarData=k;log.debug("carInfo is: "+k);var c=[];c.push({Key:"UserProfileInfo",Value:JSON.stringify(a)});a=server.UpdateUserReadOnlyData({PlayFabId:b,Data:c,Permission:"Public"});log.debug("playerData is: "+a)}
function updateCurrencySpentStatistic(b,k){var a=[],c,e=0,d=Number(k);if(!(isNaN(d)||0>=d)&&("SC"==b&&(c="MoneySpent"),"HC"==b&&(c="GoldSpent"),void 0!=c)){var h=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:[c]});0<h.Statistics.length&&(e=Number(h.Statistics[0].Value));a.push({StatisticName:c,Version:"0",Value:e+d});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a})}}
function checkBalance(b,k,a,c){if("SC"==b){if(a<k)return generateFailObj("NotEnoughSC")}else if(c<k)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(b){var k=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==k.Data.LeagueSubdivisions||void 0==k.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(k.Data.LeagueSubdivisions).leagues,k=JSON.parse(k.Data.SubdivisionTrophyRanges).subdivisions,c=0;c<a.length;c++)if(!(Number(b)>Number(k[a[c]])))return c;return a.length-1}
function recalculateCarPr(b,k,a,c){var e=0,d;d=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<d.Catalog.length;a++)if(d.Catalog[a].ItemId==k){e=JSON.parse(d.Catalog[a].CustomData);e=parseInt(e.basePr)+getObjectValueFromLevel(e,"prPerLvl",b.CarLvl);break}c=void 0===c?server.GetCatalogItems({CatalogVersion:"PartCards"}):c;b={Exhaust:b.ExhaustLvl,Engine:b.EngineLvl,Gearbox:b.GearboxLvl,Suspension:b.SuspensionLvl,Tires:b.TiresLvl,Turbo:b.TurboLvl};for(a=0;a<c.Catalog.length;a++)k=
JSON.parse(c.Catalog[a].CustomData),e+=getObjectValueFromLevel(k,"prPerLvl",Number(b[c.Catalog[a].ItemId]));return e}
function GenerateBlackMarket(b){var k=1,a=server.GetPlayerStatistics({PlayFabId:b,StatisticNames:["League"]});0!=a.Statistics.length&&(k=a.Statistics[0].Value.toString());0>=Number(k)&&(k=1);for(var c=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:b,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),e=JSON.parse(a.Data.BlackMarketRarityBias),d,h=[],f=[],g=[],l=0;l<c.Catalog.length;l++){d=JSON.parse(c.Catalog[l].CustomData);if(void 0==d)return generateErrObj("Part card "+
c.Catalog[l].ItemId+" has no custom data.");0==d.rarity&&h.push(c.Catalog[l].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy);1==d.rarity&&f.push(c.Catalog[l].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy);2==d.rarity&&g.push(c.Catalog[l].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy)}c={};c.BMTime=(new Date).getTime();l=Math.floor(Math.random()*h.length);c.BMItem0=h[l];2<=h.length&&h.splice(l,1);Math.floor(100*Math.random())<Number(e.parts[2])?
h=g:(l=Number(e.parts[0])+Number(e.parts[1]),Math.floor(Math.random()*l)>=Number(e.parts[0])&&(h=f));c.BMItem1=h[Math.floor(Math.random()*h.length)];d=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var n,h=[],f=[],g=[],l=0;l<d.Catalog.length;l++){n=JSON.parse(d.Catalog[l].CustomData);if(void 0==n)return generateErrObj("Car card "+d.Catalog[l].ItemId+" has no custom data.");Number(n.unlockedAtRank)>=Number(k)+1||("0"==n.rarity&&h.push(d.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+
"_0_"+n.BMpriceIncrPerBuy),"1"==n.rarity&&f.push(d.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy),"2"==n.rarity&&g.push(d.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy))}k=Math.floor(Math.random()*h.length);c.BMItem2=h[k];2<=h.length&&h.splice(k,1);0>=f.length&&(0>=g.length?g=f=h:f=g);0>=g.length&&(g=f);Math.floor(100*Math.random())<Number(e.cars[2])?h=g:(l=Number(e.cars[0])+Number(e.cars[1]),Math.floor(Math.random()*l)>=Number(e.cars[0])&&
(h=f));k=Math.floor(Math.random()*h.length);c.BMItem3=h[k];server.UpdateUserInternalData({PlayFabId:b,Data:c});c.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return c}function GetCurrentBlackMarket(b,k){var a={},c=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:b,Keys:e});a.BMTime=60*parseInt(e.Data.BlackMarketResetMinutes)-Math.floor((c.getTime()-k.Data.BMTime.Value)/1E3);for(c=0;4>c;c++)a["BMItem"+c]=k.Data["BMItem"+c].Value;return a}
function GetValueFromStatistics(b,k,a){for(var c,e=0;e<b.length;e++)b[e].StatisticName===k&&(c=b[e]);return void 0===c?void 0!==a?a:0:Number(c.Value)}function GetVersionFromStatistics(b,k,a){for(var c,e=0;e<b.length;e++)b[e].StatisticName===k&&(c=b[e]);return void 0===c?void 0!==a?a:0:Number(c.Version)}function getCatalogItem(b,k){for(var a=server.GetCatalogItems({CatalogVersion:b}),c=0;c<a.Catalog.length;c++)if(a.Catalog[c].ItemId===k)return a.Catalog[c]}
function getObjectValueFromLevel(b,k,a,c){c||(c=0);if(!b[k]||!b[k].length)return c;var e=Number(b[k].length);a>=e&&(a=e-1);return Number(b[k][a])||c}function GiveUserPart(b,k,a,c){GiveUserCard(b,"PartsCards",k,a,c)}function GiveUserCarCard(b,k,a,c){GiveUserCard(b,"CarCards",k,a,c)}
function GiveUserCard(b,k,a,c,e){a=Number(a)<Number(c)?Number(a)+Math.floor(Math.random()*(Number(c)-Number(a))):Number(a);log.debug("cardsAmount: "+a);var d,h;for(c=0;c<e.Inventory.length;c++)if(e.Inventory[c].ItemId==b&&e.Inventory[c].CatalogVersion==k){d=e.Inventory[c].ItemInstanceId;h=void 0==e.Inventory[c].CustomData?a:void 0==e.Inventory[c].CustomData.Amount?a:isNaN(Number(e.Inventory[c].CustomData.Amount))?a:Number(e.Inventory[c].CustomData.Amount)+Number(h);break}if(void 0==d&&(h=a,d=[],d.push(b),
d=server.GrantItemsToUser({CatalogVersion:k,PlayFabId:e.PlayFabId,ItemIds:d}).ItemGrantResults[0].ItemInstanceId,void 0===d))return generateErrObj("grantRequest denied");a={Amount:h};log.debug("new amount is: "+h);server.UpdateUserInventoryItemCustomData({PlayFabId:e.PlayFabId,ItemInstanceId:d,Data:a});return{ItemId:b,CatalogVersion:k,CustomData:a}}
handlers.buyChest=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(b.curr,b.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<b.cost){a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.cost});updateCurrencySpentStatistic(b.curr,b.cost);var c={};c[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",
{VirtualCurrency:c})}return generateInventoryChange("ChestBought",{})};
handlers.claimDailyMission=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a=Number(b.mIdx),c=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==c.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e=JSON.parse(e.Data.DailyMissionData),d=e.missionData[a].split("_"),c=JSON.parse(c.Data.DailyMissionStatus.Value),
h=c.dailyMissionClaimStatus;if(a>=h.length)return generateErrObj("Unlock index is out of bounds of playerData claim mission status array");if(1==h[a])return generateFailObj("Mission already claimed");h[a]=1;c={DailyMissionStatus:JSON.stringify({DailyStatus:c.DailyStatus,dailyMissionClaimStatus:h,timeStamp:c.timeStamp})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});if(a>=e.missionData.length)return generateErrObj("Unlock index is out of bounds of titleData claim mission reward array");
a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:d[1],Amount:Number(d[2])});e={};e[a.VirtualCurrency]=a.Balance;return generateInventoryChange("MissionClaimed",{VirtualCurrency:e})};
handlers.endDaily=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==a.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e;tParsed=JSON.parse(c.Data.DailyMissionData);e=Number(tParsed.minutesToRefresh);for(var d=JSON.parse(a.Data.DailyMissionStatus.Value),
a=d.dailyMissionClaimStatus,h,c=-1,f=0;f<tParsed.missionData.length;f++)h=tParsed.missionData[f].split("_"),4>h.length&&generateErrObj("Title data is invalid!"),"OFF"==h[3]&&(a[f]=-1);for(f=0;f<d.dailyMissionClaimStatus.length;f++)if(-1!=a[f]&&0==a[f])return generateErrObj("Not all missions were claimed!");a=[0,0,0,0,0,0,0,0];f=new Date;f.getTime()-Number(d.timeStamp)>6E4*Number(e)?(h=2,f=f.getTime()):(h=0,c=60*Number(e)-Math.floor((f.getTime()-Number(d.timeStamp))/1E3),f=d.timeStamp);f={DailyMissionStatus:JSON.stringify({DailyStatus:h,
dailyMissionClaimStatus:a,timeStamp:f})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:f});e=server.GetUserInventory({PlayFabId:currentPlayerId});for(var g in b.currencyReq)0<b.currencyReq[g]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g,Amount:b.currencyReq[g]});for(g in b.carCardsRequest)if(b.carCardsRequest.hasOwnProperty(g)){d=!1;for(f=0;f<e.Inventory.length;f++)if(e.Inventory[f].ItemId==g&&"CarCards"==e.Inventory[f].CatalogVersion){d=void 0==e.Inventory[f].CustomData?
Number(b.carCardsRequest[g]):void 0==e.Inventory[f].CustomData.Amount?Number(b.carCardsRequest[g]):isNaN(Number(e.Inventory[f].CustomData.Amount))?Number(b.carCardsRequest[g]):Number(e.Inventory[f].CustomData.Amount)+Number(b.carCardsRequest[g]);d={Amount:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[f].ItemInstanceId,Data:d});d=!0;break}0==d&&(f=[g],f=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:f}),d={Amount:b.carCardsRequest[g]},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:d}))}for(g in b.partCardsRequest)if(b.partCardsRequest.hasOwnProperty(g)){d=!1;for(f=0;f<e.Inventory.length;f++)if(e.Inventory[f].ItemId==g&&"PartCards"==e.Inventory[f].CatalogVersion){d=void 0==e.Inventory[f].CustomData?Number(b.partCardsRequest[g]):void 0==e.Inventory[f].CustomData.Amount?Number(b.partCardsRequest[g]):isNaN(Number(e.Inventory[f].CustomData.Amount))?Number(b.partCardsRequest[g]):
Number(e.Inventory[f].CustomData.Amount)+Number(b.partCardsRequest[g]);d={Amount:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[f].ItemInstanceId,Data:d});d=!0;break}0==d&&(f=[g],f=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:f}),d={Amount:b.partCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:d}))}return{Result:"OK",
Message:"DailyCompleted",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId}),DailyStatus:{status:h,claimStatus:a,timeRemaining:c}}};
handlers.endGame=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges","RecUploadLock"]}),a=0,e,d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=d.Statistics.length&&(a=d.Statistics[0].Value,1==b.debug&&log.debug("getting trophy count "+d.Statistics[0].Value));e=a=Number(a);var h=server.GetUserInternalData({PlayFabId:currentPlayerId,
Keys:["trophyLose","trophyWin","LastGameOutcome","LatestStreak"]}),d=void 0==h.Data.trophyLose||void 0==h.Data.trophyWin?45:Number(h.Data.trophyLose.Value)+Number(h.Data.trophyWin.Value),f=0,g="Loss";void 0!=h.Data.LatestStreak&&(f=Number(h.Data.LatestStreak.Value));1==isNaN(f)&&(f=0);void 0!=h.Data.LatestStreak&&(g=h.Data.LastGameOutcome.Value);void 0==g&&(g="Loss");h={quitLastGame:"false",LastGameOutcome:"Loss"};"rWin"==b.outcome&&(a+=d,h.LastGameOutcome="Win","Loss"==g?f=1:f++,ldata=server.GetLeaderboard({StatisticName:"TrophyCount",
StartPosition:0,MaxResultsCount:1}),null!=ldata.Leaderboard&&(1==b.debug&&log.debug("leaderboardData: "+ldata.Leaderboard[0]),ldata.Leaderboard[0].PlayFabId==currentPlayerId?1==b.debug&&log.debug("ALREADY IN FIRST PLACE IN LEADERBOARD"):(1==b.debug&&log.debug("WASN'T FIRST PLACE"),Number(ldata.Leaderboard[0].StatValue)<a&&(1==b.debug&&log.debug("BUT HE IS NOW!"),publishToLiveFeed(currentPlayerId,"topPlayer",a)),1==b.debug&&log.debug("DIFF: "+Number(ldata.Leaderboard[0].StatValue)+" vs "+a))));h.LatestStreak=
f;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:h});var g=JSON.parse(b.recordingHeader),l=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Wins","TotalGamesCompleted","LongestWinStreak","BestDriftScore","HighestLeagueReached"]}).Statistics,d=calculateLeague(a),h=GetValueFromStatistics(l,"TotalGamesCompleted",0),h=Number(h)+1,n=GetValueFromStatistics(l,"Wins",0);"rWin"==b.outcome&&(n=Number(n)+1);var t=GetValueFromStatistics(l,"LongestWinStreak",0);GetVersionFromStatistics(l,
"LongestWinStreak",0);Number(t)<f&&(t=f,2<d&&(10==Number(t)&&publishToLiveFeed(currentPlayerId,"winStreak",10),15==Number(t)&&publishToLiveFeed(currentPlayerId,"winStreak",15),20==Number(t)&&publishToLiveFeed(currentPlayerId,"winStreak",20)));f=GetValueFromStatistics(l,"BestDriftScore",0);Number(g.Score)>f&&(f=Number(g.Score));l=GetValueFromStatistics(l,"HighestLeagueReached",1);Number(d)>Number(l)&&(l=d,2<l&&publishToLiveFeed(currentPlayerId,"arenaUnlocked",Number(d)));var r=[];r.push({StatisticName:"TrophyCount",
Value:a});r.push({StatisticName:"League",Value:d});r.push({StatisticName:"Wins",Value:n});r.push({StatisticName:"TotalGamesCompleted",Value:h});r.push({StatisticName:"LongestWinStreak",Value:t});r.push({StatisticName:"BestDriftScore",Value:f});r.push({StatisticName:"HighestLeagueReached",Value:l});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:r});var h=!1,q;void 0!=c.Data.RecUploadLock&&(q=JSON.parse(c.Data.RecUploadLock));if(void 0!=q)for(f=0;f<q.length;f++)if(b.cVersion==q[f]){h=
!0;break}if(100>=Number(g.Score)||1==h)return 1==b.debug&&log.debug("this recording will not be stored, but endgame stats still apply. clientVersion: "+b.cVersion+". upload lock:  "+h),a={TrophyCount:a,League:d},{Result:a};c=JSON.parse(c.Data.SubdivisionTrophyRanges);q=43;for(f=0;f<c.subdivisions.length;f++)if(e<c.subdivisions[f]){q=f;break}e=[];e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecPos",Value:b.recordingPos});e.push({Key:b.envIndex+"_"+b.courseIndex+"_RecRot",Value:b.recordingRot});e.push({Key:b.envIndex+
"_"+b.courseIndex+"_RecHeader",Value:b.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e});e=server.GetTitleInternalData({Key:"RecSubDivision"+q}).Data["RecSubDivision"+q];if(void 0==e)e=[],c={e:b.envIndex,c:b.courseIndex,uId:currentPlayerId},e.push(c);else{e=JSON.parse(e);c={e:b.envIndex,c:b.courseIndex,uId:currentPlayerId};g=!1;for(f=h=0;f<e.length;f++)e[f].uId==currentPlayerId&&h++;if(2<h)return a={TrophyCount:a,League:d},{Result:a};for(f=0;f<e.length;f++)e[f].e==
b.envIndex&&e[f].c==b.courseIndex&&(g=!0,e[f]=c);0==g&&e.push(c)}e=JSON.stringify(e);server.SetTitleInternalData({Key:"RecSubDivision"+q,Value:e});a={TrophyCount:a,League:d};return{Result:a}};
function UpdateExperience(b,k,a,c,e,d){b=JSON.parse(getCatalogItem(b,k).CustomData)[a];k=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;k=k[k.length-1];d=d||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;d=GetValueFromStatistics(d,"Experience",0);if(d>=k)return k;if(isNaN(Number(b)))a=Number(b.length),c>=a&&(c=a-1),c=Number(b[c]);else if(c=Number(b),0===c)return d;d=Math.min(d+c,k);if(!e)return d;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:d}]});return d}
handlers.generateDaily=function(b,k){var a,c=new Date;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var e=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(e.DailyStatus);if(0==a){var c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),d;tParsed=JSON.parse(c.Data.DailyMissionData);d=Number(tParsed.minutesToRefresh);c=new Date;c.getTime()-Number(e.timeStamp)>6E4*Number(d)&&(a=1)}if(1!=a)return generateErrObj("DailyStatus is: "+
a+". Should be 1")}a=2;c=c.getTime();a={DailyMissionStatus:JSON.stringify({DailyStatus:a,dailyMissionClaimStatus:[0,0,0,0,0,0,0,0],timeStamp:c})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK"}};
handlers.getChestSlotsStatus=function(b,k){var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["ChestFreeStatus","ChestSlotsStatus"]}),c;if(void 0==a.Data.ChestFreeStatus){c=server.GetCatalogItems({CatalogVersion:"Chests"});for(var e,d=0;d<c.Catalog.length;d++)if("FreeChest"==c.Catalog[d].ItemId){e=JSON.parse(c.CataLog[d].CustomData);break}if(void 0==e)return generateErrObj("Chest catalog has no freechestinfo");c=Number(e.hoursToOpen.split(",")[0]);if(isNaN(c))return generateErrObj("FreeChest open time info is invalid");
e=Math.floor(Number((new Date).getTime())/1E3);c={status:1,TimeUntilFullRecharge:Math.floor(e+3600*c)};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestFreeStatus:c}})}else c=a.Data.ChestFreeStatus.Value;void 0==a.Data.ChestSlotsStatus?(a={Slot0:{chestId:null,chestLeague:0,status:"Empty",orderTimeStamp:0,arrivalTimeStamp:0},Slot1:{chestId:null,chestLeague:0,status:"Empty",orderTimeStamp:0,arrivalTimeStamp:0},Slot2:{chestId:null,chestLeague:0,status:"Empty",orderTimeStamp:0,arrivalTimeStamp:0},
Slot3:{chestId:null,chestLeague:0,status:"Empty",orderTimeStamp:0,arrivalTimeStamp:0}},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:{ChestSlotsStatus:a}})):a=a.Data.ChestSlotsStatus.Value;return{ChestSlotInfo:a,FreeSlotsInfo:c}};
handlers.getDailyMissionStatus=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c,a=[0,0,0,0,0,0,0,0],e=-1;c=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=c.Data.DailyMissionStatus){var d=JSON.parse(c.Data.DailyMissionStatus.Value);c=Number(d.DailyStatus);var h=a.length;h>d.dailyMissionClaimStatus.length&&(h=d.dailyMissionClaimStatus.length);for(var f=0;f<h;f++)a[f]=d.dailyMissionClaimStatus[f];
0==c&&(h=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),tParsed=JSON.parse(h.Data.DailyMissionData),h=Number(tParsed.minutesToRefresh),f=new Date,f.getTime()-Number(d.timeStamp)>6E4*Number(h)?(c=2,a=[0,0,0,0,0,0,0,0],d=f.getTime(),d={DailyStatus:c,dailyMissionClaimStatus:a,timeStamp:d},d=JSON.stringify(d),d={DailyMissionStatus:d},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d})):e=60*Number(h)-Math.floor((f.getTime()-Number(d.timeStamp))/1E3))}else c=2,
f=new Date,d=f.getTime(),d={DailyStatus:c,dailyMissionClaimStatus:a,timeStamp:d},d=JSON.stringify(d),d={DailyMissionStatus:d},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});return{Result:"OK",Message:" ",DailyStatus:{status:c,claimStatus:a,timeRemaining:e}}};
handlers.getLiveFeed=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetTitleInternalData({Keys:"LiveFeed"});return void 0==a||void 0==a.Data.LiveFeed?generateErrObj("No LivefeedFound"):{Result:"OK",Feed:JSON.parse(a.Data.LiveFeed)}};handlers.getServerTime=function(b,k){return{time:new Date}};
handlers.iapMade=function(b,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["IAPValue"]}).Statistics,c=Number(GetValueFromStatistics(a,"IAPValue",0));switch(b.bundle){case "co.tamatem.downshiftdrift.gold01":c+=99;break;case "co.tamatem.downshiftdrift.gold02":c+=499;break;case "co.tamatem.downshiftdrift.gold03":c+=2499;break;case "co.tamatem.downshiftdrift.gold04":c+=2499;break;case "co.tamatem.downshiftdrift.gold05":c+=4999;break;case "co.tamatem.downshiftdrift.gold06":c+=
9999;break;case "co.tamatem.downshiftdrift.bundle01":var c=c+599,e=server.GetUserInventory({PlayFabId:currentPlayerId}),d=server.GetCatalogItems({CatalogVersion:"BMBundleInfo"}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["HighestLeagueReached"]}).Statistics,a=Number(GetValueFromStatistics(a,"HighestLeagueReached",1)),h="bundle01league",h=10>a?h+"0"+a:h+a;1==b.debug&&log.debug("consuming: "+h);for(var f,a=0;a<d.Catalog.length;a++)if(d.Catalog[a].ItemId==h){f=JSON.parse(d.Catalog[a].CustomData);
break}if(void 0==f)return generateErrObj("Catalog item: "+h+" not found");for(a=0;a<e.Inventory.length;a++)if(e.Inventory[a].ItemId==b.bundle){try{server.ConsumeItem({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[a].ItemInstanceId,ConsumeCount:1})}catch(n){return generateErrObj("err: "+n)}var g;g=[];var l={};if(void 0!=f.HCRange){1==b.debug&&log.debug("found HCRange: "+f.HCRange);d=f.HCRange.split(",");if(2<=d.length)d=Number(d[0])<Number(d[1])?Number(d[0])+Math.floor(Math.random()*(Number(d[1])-
Number(d[0]))):Number(d[0]);else return generateErrObj("Catalog data corrupt");0<d&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:d}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.SCRange){1==b.debug&&log.debug("found SCRange: "+f.SCRange);d=f.SCRange.split(",");if(2<=d.length)d=Number(d[0])<Number(d[1])?Number(d[0])+Math.floor(Math.random()*(Number(d[1])-Number(d[0]))):Number(d[0]);else return generateErrObj("Catalog data corrupt");
0<d&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:d}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.Engine)if(1==b.debug&&log.debug("found Engine: "+f.Engine),d=f.Engine.split(","),2<=d.length)d=GiveUserPart("Engine",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Exhaust)if(1==b.debug&&log.debug("found Exhaust: "+f.Exhaust),d=f.Exhaust.split(","),2<=d.length)d=
GiveUserPart("Exhaust",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Gearbox)if(1==b.debug&&log.debug("found Gearbox: "+f.Gearbox),d=f.Gearbox.split(","),2<=d.length)d=GiveUserPart("Gearbox",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Suspension)if(1==b.debug&&log.debug("found Suspension: "+f.Suspension),d=f.Suspension.split(","),2<=d.length)d=GiveUserPart("Suspension",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");
if(void 0!=f.Tires)if(1==b.debug&&log.debug("found Tires: "+f.Tires),d=f.Tires.split(","),2<=d.length)d=GiveUserPart("Tires",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Turbo)if(1==b.debug&&log.debug("found Turbo: "+f.Turbo),d=f.Turbo.split(","),2<=d.length)d=GiveUserPart("Turbo",d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");if(void 0!=f.CarCard&&(1==b.debug&&log.debug("found CarCard: "+f.CarCard),void 0!=f.CarCardAmount))if(1==
b.debug&&log.debug("found CarCardAmount: "+f.CarCardAmount),d=f.CarCardAmount.split(","),2<=d.length)d=GiveUserCarCard(f.CarCard,d[0],d[1],e),g.push(d);else return generateErrObj("Catalog data corrupt");void 0!=f.ChestModel&&1==b.debug&&log.debug("found ChestModel: "+f.ChestModel)}e=[];c={StatisticName:"IAPValue",Value:c};e.push(c);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});g={Inventory:g,VirtualCurrency:l};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:g};
default:1==b.debug&&log.debug("InvalidPurchaseParameter")}e=[];c={StatisticName:"IAPValue",Value:c};e.push(c);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});publishToLiveFeed(currentPlayerId,"boughtIAP",b.bundle)};
handlers.initServerData=function(b){b=[];var k={StatisticName:"TrophyCount",Version:"0",Value:"0"};b.push(k);k={StatisticName:"League",Version:"0",Value:"0"};b.push(k);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var k={0:"Owned"},a=0;a<b.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[a].ItemInstanceId,Data:k});b=[];b.push("FordFocus");b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b});k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k});k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k});k={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k});k=[];k.push("Engine");k=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});k={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k})};
handlers.openChest=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<b.levelUpRewardIndex){var c=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),e={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}):c=a.Data.LastLevelReward.Value;var d=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,h=GetValueFromStatistics(a,"Experience",0);0==h&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var f=d.length,a=0;a<d.length;a++)if(!(h>=d[a])){f=a;break}if(Number(b.levelUpRewardIndex)<=Number(c))return generateFailObj("already got reward for level: "+c);if(Number(b.levelUpRewardIndex)<=Number(f))c=Number(b.levelUpRewardIndex),e.LastLevelReward=c,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:e}),a=""+c,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",PlayFabId:currentPlayerId,ItemIds:a}),2<Number(f)&&publishToLiveFeed(currentPlayerId,"levelUp",Number(f));else return generateFailObj("You haven't reached this level yet")}c=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<b.currCost){if("OK"!=checkBalance(b.currType,b.currCost,c.VirtualCurrency.SC,c.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:b.currType,Amount:b.currCost});updateCurrencySpentStatistic(b.currType,b.currCost)}for(var g in b.currencyReq)0<b.currencyReq[g]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g,Amount:b.currencyReq[g]});for(g in b.carCardsRequest)if(b.carCardsRequest.hasOwnProperty(g)){e=!1;for(a=0;a<c.Inventory.length;a++)if(c.Inventory[a].ItemId==g&&"CarCards"==c.Inventory[a].CatalogVersion){e=void 0==c.Inventory[a].CustomData?Number(b.carCardsRequest[g]):void 0==c.Inventory[a].CustomData.Amount?
Number(b.carCardsRequest[g]):isNaN(Number(c.Inventory[a].CustomData.Amount))?Number(b.carCardsRequest[g]):Number(c.Inventory[a].CustomData.Amount)+Number(b.carCardsRequest[g]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[g],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:b.carCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}for(g in b.partCardsRequest)if(b.partCardsRequest.hasOwnProperty(g)){e=!1;for(a=0;a<c.Inventory.length;a++)if(c.Inventory[a].ItemId==g&&"PartCards"==c.Inventory[a].CatalogVersion){e=void 0==c.Inventory[a].CustomData?Number(b.partCardsRequest[g]):void 0==c.Inventory[a].CustomData.Amount?Number(b.partCardsRequest[g]):isNaN(Number(c.Inventory[a].CustomData.Amount))?Number(b.partCardsRequest[g]):Number(c.Inventory[a].CustomData.Amount)+Number(b.partCardsRequest[g]);
e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[g],a=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:b.partCardsRequest[g]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}g=server.GetUserInventory({PlayFabId:currentPlayerId});b.chestId&&0>=b.levelUpRewardIndex&&
(c=UpdateExperience("Chests",b.chestId,"xpGain",0,!0),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["ChestsOpened"]}).Statistics,e=Number(GetValueFromStatistics(a,"ChestsOpened",0)),e++,a=[],a.push({StatisticName:"ChestsOpened",Value:e}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}),g.Experience=c);"DiamondChest"!=b.chestId&&"BigGoldChest"!=b.chestId&&"BigSilverChest"!=b.chestId||publishToLiveFeed(currentPlayerId,"unlockedChest",b.chestId);return generateInventoryChange("InventoryUpdated",
g)};
handlers.purchaseBMItem=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>b.itemId||3<b.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+b.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),c=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+b.itemId].Value.split("_"),e=c.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");var d;
d=2>b.itemId?"PartCards":"CarCards";var h=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),e=checkBalance(a[1],h,e,e);if("OK"!=e)return e;for(var f,g,e=0;e<c.Inventory.length;e++)if(c.Inventory[e].ItemId==a[0]&&c.Inventory[e].CatalogVersion==d){f=c.Inventory[e].ItemInstanceId;void 0===c.Inventory[e].CustomData?g={Amount:1}:void 0===c.Inventory[e].CustomData.Amount?g={Amount:1}:(g=Number(c.Inventory[e].CustomData.Amount)+1,isNaN(g)&&(g=1),g={Amount:g});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:f,Data:g});break}void 0===f&&(f=[],f.push(a[0]),f=server.GrantItemsToUser({CatalogVersion:d,PlayFabId:currentPlayerId,ItemIds:f}).ItemGrantResults[0].ItemInstanceId,void 0===f?generateErrObj("grantRequest denied"):(g={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:g})));f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:h});updateCurrencySpentStatistic(a[1],h);h=a[0]+"_"+a[1]+"_"+a[2]+"_"+
(parseInt(a[3])+1)+"_"+a[4];c={};c["BMItem"+b.itemId]=h;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});g=[{ItemId:a[0],CatalogVersion:d,CustomData:g}];d={};d[f.VirtualCurrency]=f.Balance;a=b.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];e={Inventory:g,VirtualCurrency:d};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:e,BMItemChange:a}};
handlers.purchaseItems=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetUserInventory({PlayFabId:currentPlayerId}),e=c.VirtualCurrency.SC,d=c.VirtualCurrency.HC;switch(b.purchaseType){case "carUpgrade":return upgradeCar(b,k,c,e,d);case "partUpgrade":return upgradePart(b,k,c,e,d);case "custPurchase":for(var h=server.GetCatalogItems({CatalogVersion:"Customization"}),f,g=0,a="SC",l=0;l<h.Catalog.length;l++)if(h.Catalog[l].ItemId==b.custId){f=
h.Catalog[l];cardInfo=JSON.parse(h.Catalog[l].CustomData);g=b.custVal+",Cost";a=cardInfo[b.custVal+",Curr"];g=cardInfo[g];d=checkBalance(a,g,e,d);if("OK"!=d)return d;break}if(void 0==f)return generateErrObj("Customization does not exist in catalog.");for(var n,t,l=0;l<c.Inventory.length;l++)if(c.Inventory[l].ItemId==b.custId){n=c.Inventory[l];t=c.Inventory[l].ItemInstanceId;if(void 0!=n.CustomData&&String(b.custVal)in n.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
n){log.info("user doesn't have customization category. Granting ... ");d=[];d.push(b.custId);d=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:d});if(0==d.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");t=d.ItemGrantResults[0].ItemInstanceId}d={};d[String(b.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:t,Data:d});t=[{ItemId:b.custId,
CatalogVersion:"Customization",CustomData:d}];0<g?(d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:g}),updateCurrencySpentStatistic(a,g),a={},a[d.VirtualCurrency]=d.Balance,l={Inventory:t,VirtualCurrency:a}):l={Inventory:t};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":g=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});t=!1;for(l=a=0;l<g.Catalog.length;l++)if(g.Catalog[l].ItemId==b.packId){a=g.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(g.Catalog[l].CustomData);t=!0;break}if(0==t)return generateErrObj("pack with ID: "+b.packId+" not found in catalog.");if(0>=a)return generateErrObj("pack with ID: "+b.packId+" shouldn't have negative cost.");if(a>d)return generateFailObj("Not enough HC.");d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:a});updateCurrencySpentStatistic("HC",a);g=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});
a={};a[g.VirtualCurrency]=g.Balance;a[d.VirtualCurrency]=d.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:a});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(b){b=CheckMaintenanceAndVersion(b);return"OK"!=b?generateMaintenanceOrUpdateObj(b):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(b){b=server.GetUserInventory({PlayFabId:currentPlayerId});var k=Number(b.VirtualCurrency.SC);if(isNaN(k)||0>k)k=0;var a=Number(b.VirtualCurrency.HC);if(isNaN(a)||0>a)a=0;var c=[];c.push({StatisticName:"CurrentMoney",Version:"0",Value:k});c.push({StatisticName:"CurrentGold",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});for(var k=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),
c=!1,e=0;e<b.Inventory.length;e++)if("CarsProgress"==b.Inventory[e].CatalogVersion){var c=!0,d=checkCarDataValidity(b.Inventory[e],k);if("PlayFabError"==d||void 0===d)return generateErrObj("PlayfabError");"OK"==d?log.debug("Data for "+b.Inventory[e].ItemId+" OK"):b.Inventory[e].CustomData=d;b.Inventory[e].CustomData.Pr=recalculateCarPr(b.Inventory[e].CustomData,b.Inventory[e].ItemId,k,a);d={};d.Pr=b.Inventory[e].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[e].ItemInstanceId,
Data:d})}return!1===c?(b=[],b.push("FordFocus"),b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b}),k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k}),k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,
Data:k}),k={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:k}),generateErrObj("UserHasNoCars ... reiniting")):b};
handlers.retrieveBlackMarket=function(b,k){var a=CheckMaintenanceAndVersion(b);if(!0===b.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=[];c.push("BMTime");for(var e=0;4>e;e++)c.push("BMItem"+e);e=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:c});if(void 0===e.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var c=new Date,d=[];d.push("BlackMarketResetMinutes");d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:d});if(!0===b.reset){a="HC";e=200;c=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==c.Data.BlackMarketResetCost&&(e=c.Data.BlackMarketResetCost.split("_"),a=e[0],e=Number(e[1]));if(0<e){c=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,e,c.VirtualCurrency.SC,c.VirtualCurrency.HC))return generateFailObj("not enough money");c=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:e});updateCurrencySpentStatistic(a,e);a=GenerateBlackMarket(currentPlayerId);e={};e[c.VirtualCurrency]=c.Balance;e={VirtualCurrency:e};
a.InventoryChange=e;return a}return GenerateBlackMarket(currentPlayerId)}return c.getTime()-parseInt(e.Data.BMTime.Value)>6E4*parseInt(d.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,e),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,e)};
handlers.rewardUsers=function(b,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,c=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),e=0;0>=c&&(a=Number(a)/3E3,e=Number(Math.floor(800*a)));c=Number(c)+e;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:c}]});return c};
handlers.setMainCar=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var a=server.GetUserInventory({PlayFabId:currentPlayerId}),c={},e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.carId&&"CarsProgress"==a.Inventory[e].CatalogVersion){c.carId=a.Inventory[e].ItemId;c.carData=a.Inventory[e].CustomData;updateUserProfileInfo(currentPlayerId,c);break}};
function updateProfileCar(b,k,a){a=server.GetUserReadOnlyData({PlayFabId:a,Keys:["UserProfileInfo"]});void 0!=a.Data&&void 0!=a.Data.UserProfileInfo&&void 0!=a.Data.UserProfileInfo.Value&&JSON.parse(a.Data.UserProfileInfo.Value).CarData.carId==b.carId&&handlers.setMainCar(b,k)}
handlers.skipTutorial=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]}),a=0;0!=c.Statistics.length&&(a=c.Statistics[0].Value);a=Number(a);0>=a&&(a=1);c=[];c.push({StatisticName:"TrophyCount",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});return{trophies:a}};
handlers.startGame=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetTitleData({Key:"LeagueSubdivisions SubdivisionTrophyRanges TrophyGainRange TrophyLoseRange SubdivisionPrRanges TrophyDifferenceLimit".split(" ")}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TotalGames"]}).Statistics,a=GetValueFromStatistics(a,"TotalGames",0),a=Number(a)+1;1==b.debug&&log.debug("totalGamesStartedIs: "+a);var e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]}),d=0;0!=e.Statistics.length&&(d=e.Statistics[0].Value);for(var d=Number(d),h=JSON.parse(c.Data.SubdivisionTrophyRanges),f=JSON.parse(c.Data.LeagueSubdivisions),g=JSON.parse(c.Data.SubdivisionPrRanges),e=JSON.parse(c.Data.TrophyDifferenceLimit),l=Number(e.trophyReadjustRange),n=Number(e.maxDifference),t=e.subDivisionsToExclude,r=43,q=43,D,A=c.Data.TrophyGainRange.split("_"),C=c.Data.TrophyLoseRange.split("_"),e=Number(A[0]),c=Number(A[1]),A=Number(C[0]),C=Number(C[1]),
m=0;m<h.subdivisions.length;m++)if(d<Number(h.subdivisions[m])){r=m;m<h.subdivisions.length-1&&(q=m+1);break}D=Number(h.subdivisions[q])-Number(h.subdivisions[r]);0>=D&&(D=400);var u=server.GetTitleInternalData({Keys:"RecSubDivision"+r}).Data["RecSubDivision"+r],p=!1;void 0==u&&(p=!0);var v,w,B,I="noop",x="noop",m=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp","quitLastGame"]});w="false;";void 0!=m.Data.quitLastGame&&(w=m.Data.quitLastGame.Value);q=!1;void 0==w&&(w="false");
"true"==w&&(q=!0);if(void 0==m.Data||void 0==m.Data.lastOpp)x=I="noop";else for(w=m.Data.lastOpp.Value.split(","),m=0;m<w.length;m++)0==m&&(I=w[m]),1==m&&(x=w[m]);v=0==p?JSON.parse(u):[];var G=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];25>v.length&&(p=!0);var H=Array(v.length),E=0,u=Array(v.length);w=0;B=Array(v.length);for(var F=0,m=0;m<v.length;m++)1==p&&(G[5*Number(v[m].e)+Number(v[m].c)]=1),v[m].uId!=currentPlayerId&&(H[E]=v[m],E++,v[m].uId!=I&&(u[w]=v[m],w++,v[m].uId!=x&&(B[F]=v[m],
F++)));if(1==p){p=[];for(m=0;m<G.length;m++)0==G[m]&&p.push(m);p=p[Math.floor(Math.random()*p.length)];m=Math.floor(p/5);p%=5;x=server.GetTitleData({Keys:"MasterUser"});if(void 0!=x.Data.MasterUser&&(x=server.GetUserReadOnlyData({PlayFabId:x.Data.MasterUser,Keys:[m+"_"+p+"_RecPos",m+"_"+p+"_RecRot",m+"_"+p+"_RecHeader"]}),void 0!=x.Data&&void 0!=x.Data[m+"_"+p+"_RecPos"]&&void 0!=x.Data[m+"_"+p+"_RecRot"]&&void 0!=x.Data[m+"_"+p+"_RecHeader"])){f=!0;0==d?(d=c,f=!1):d-=A;1>=d&&(d=1);var y=[],d={StatisticName:"TrophyCount",
Value:d};y.push(d);d={StatisticName:"League",Value:z};y.push(d);d={StatisticName:"TotalGames",Value:a};y.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:y});a={trophyWin:Math.floor((Number(c)+Number(e))/2),trophyLose:Math.floor((Number(C)+Number(A))/2),quitLastGame:"true"};0==f&&(a.trophyWin=0,a.trophyLose=0);1==q&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:"TheStig",PosData:x.Data[m+"_"+p+"_RecPos"].Value,
RotData:x.Data[m+"_"+p+"_RecRot"].Value,HeaderData:x.Data[m+"_"+p+"_RecHeader"].Value,TrophyLose:A,TrophyWin:c,Opp:"TheStig"}}}if(0==E)return generateErrObj("no valid recording found for this subdivision");z=H;0<w&&(E=w,z=u);0<F&&(E=F,z=B);u=Math.floor(Math.random()*E);u>=E&&(u=E-1);w=Math.min(E,3);B=Array(w);for(m=0;m<w;m++)B[m]=0>=u?z[m]:u>=E-1?z[E-1-m]:z[u-Math.floor(w/2)+m];z=Math.floor(Math.random()*w);w=B[z].uId;u=B[z].e;B=B[z].c;F=server.GetUserReadOnlyData({PlayFabId:w,Keys:[u+"_"+B+"_RecPos",
u+"_"+B+"_RecRot",u+"_"+B+"_RecHeader"]});if(void 0==F)return generateErrObj("Did not find recording for this user: "+w);var E=server.GetPlayerCombinedInfo({PlayFabId:w,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),p=d,z=Number(calculateLeague(d)),H="UserGenerated",x=0<z?Number(h.subdivisions[f.leagues[z-1]]):0,G=z>=f.leagues.length-
1?2*x:Number(h.subdivisions[f.leagues[z]]);1==b.debug&&log.debug("I bet it will crash after this");h=JSON.parse(F.Data[u+"_"+B+"_RecHeader"].Value);1==b.debug&&log.debug("or not");void 0!=h&&(y=h.Trophies);y=Number(y);v=!0;1==b.debug&&log.debug("Adjusting trophies");if(void 0!=t)for(1==b.debug&&log.debug("excludedSubdivisionsFromTrophyAdjustment: "+t),m=0;m<t.length;m++)if(r==Number(t[m])){1==b.debug&&log.debug("in excluded subdivision: "+r);v=!1;break}1==v&&Number(Math.abs(p-y))>=n&&(1==b.debug&&
log.debug("generating new trophies. Reason: user trophies: "+p+" vs opponent trophies: "+y),y=p-l+Math.floor(Math.random()*l*2),h.Trophies=y,1==b.debug&&log.debug("performing stringify on recordingData header"),F.Data[u+"_"+B+"_RecHeader"].Value=JSON.stringify(h));0>=G-x?(l=C,n=e):Number(Math.abs(p-y))>Number(D)?(l=Math.floor((A+C)/2)-1+Math.floor(3*Math.random()),n=Math.floor((c+e)/2)-1+Math.floor(3*Math.random())):(l=A+Math.floor((C-A)/2*((p-y)/(G-x)+1)),n=e+Math.floor((c-e)/2*((y-p)/(G-x)+1)));
1==b.debug&&log.debug("Opponent's PR is TOO DAMN HIGH! "+h.Pr+" vs "+Number(g.subdivisions[Number(f.leagues[z-1])+1])+". You are in subdivision: "+Number(f.leagues[z-1]+1));h.Pr>Number(g.subdivisions[Number(f.leagues[z-1])+1])&&(l=Math.floor((A+C)/2)-1+Math.floor(3*Math.random()),n=Math.floor((c+e)/2)-1+Math.floor(3*Math.random()),H="MobyDick");e=!0;0==d?(e=!1,d=c):(d-=Number(l),1>=d&&(d=1));y=[];d={StatisticName:"TrophyCount",Value:d};y.push(d);d={StatisticName:"League",Value:z};y.push(d);d={StatisticName:"TotalGames",
Value:a};y.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:y});a={trophyWin:n,trophyLose:l,lastOpp:w+","+I,quitLastGame:"true"};0==e&&(a.trophyWin=0,a.trophyLose=0);1==q&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:H,PosData:F.Data[u+"_"+B+"_RecPos"].Value,RotData:F.Data[u+"_"+B+"_RecRot"].Value,HeaderData:F.Data[u+"_"+B+"_RecHeader"].Value,TrophyLose:l,TrophyWin:n,Opp:E.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(b,k){var a=CheckMaintenanceAndVersion(b);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var c=server.GetUserInventory({PlayFabId:currentPlayerId}),e=[],d="-1",h={},f={PaintJobs:{itemOwned:"no",itemCustData:b.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:b.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:b.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:b.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:b.wsId,carItemId:"WindshieldId"}},a=0;a<c.Inventory.length;a++)c.Inventory[a].ItemId==b.carId&&"CarsProgress"==c.Inventory[a].CatalogVersion&&(d=c.Inventory[a].ItemInstanceId),c.Inventory[a].ItemId in f&&(f[c.Inventory[a].ItemId].itemOwned="yes",f[c.Inventory[a].ItemId].itemCustData in c.Inventory[a].CustomData?h[f[c.Inventory[a].ItemId].carItemId]=f[c.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+c.Inventory[a].ItemId+" "+f[c.Inventory[a].ItemId].itemCustData));if("-1"==
d)return generateFailObj("User does not own car with id: "+b.carId);for(var g in f)f.hasOwnProperty(g)&&"no"==f[g].itemOwned&&e.push(g);if(h=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d,Data:h});updateProfileCar(b,k,currentPlayerId);g=[{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:h}];if(0<e.length)for(e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,
ItemIds:e}),c={0:"Owned"},a=0;a<e.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[a].ItemInstanceId,Data:c});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:g}}};
function upgradeCar(b,k,a,c,e){for(var d=server.GetCatalogItems({CatalogVersion:"CarCards"}),h=!1,f,g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==b.carId&&"CarsProgress"==a.Inventory[g].CatalogVersion){h=!0;f=a.Inventory[g];break}for(var l,g=0;g<d.Catalog.length;g++)if(d.Catalog[g].ItemId==b.carId){l=JSON.parse(d.Catalog[g].CustomData);break}if(void 0===l)return generateErrObj("CardNotFoundForCarwithID: "+b.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===h){var n=parseInt(f.CustomData.CarLvl)+1;if(n>=Number(l.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var t=getObjectValueFromLevel(l,"currCostPerLvl",n),g=checkBalance(l.currType,t,c,e);if("OK"!=g)return g;c=getObjectValueFromLevel(l,"cardCostPerLvl",n);f.CustomData.CarLvl=n;for(var h=!1,r,g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==b.carId&&"CarCards"==a.Inventory[g].CatalogVersion){h=!0;try{if(void 0===a.Inventory[g].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===a.Inventory[g].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(a.Inventory[g].CustomData.Amount)>=c)a.Inventory[g].CustomData.Amount-=c,r={Amount:a.Inventory[g].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[g].ItemInstanceId,Data:r});else return generateFailObj("Insufficient cards for real: "+a.Inventory[g].CustomData.Amount+" vs "+c)}catch(D){return generateFailObj("Insufficient cards")}break}if(!1===
h)return generateFailObj("No cards found");a=recalculateCarPr(f.CustomData,f.ItemId,d,void 0);g={CarLvl:n,Pr:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemInstanceId,Data:g});updateProfileCar(b,k,currentPlayerId);var q;0<t&&(q=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:l.currType,Amount:t}),updateCurrencySpentStatistic(l.currType,t));r=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:r},{ItemId:b.carId,CatalogVersion:"CarsProgress",
CustomData:g}];a={};g={Inventory:r};void 0!=q&&(a[q.VirtualCurrency]=q.Balance,g.VirtualCurrency=a);g.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+l.rarity,n,!0);return generateInventoryChange("InventoryUpdate",g)}h=!1;for(g=0;g<a.Inventory.length;g++)if(a.Inventory[g].ItemId==b.carId&&"CarCards"==a.Inventory[g].CatalogVersion){h=!0;try{if(void 0===a.Inventory[g].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===a.Inventory[g].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(a.Inventory[g].CustomData.Amount)>=Number(l.cardCostPerLvl[1]))t=a.Inventory[g].ItemInstanceId,a.Inventory[g].CustomData.Amount-=l.cardCostPerLvl[1],r={Amount:a.Inventory[g].CustomData.Amount};else return generateFailObj("Insufficient cards: "+a.Inventory[g].CustomData.Amount+" vs "+l.cardCostPerLvl[1]+".")}catch(D){return generateFailObj("Insufficient cards: "+D)}break}if(0==h)return generateFailObj("No cards found");g=checkBalance(l.currType,l.currCostPerLvl[1],c,e);if("OK"!=g)return g;
f=[];f.push(b.carId);f=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:f});if(!1===f.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:t,Data:r});0<l.currCostPerLvl[1]&&(q=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:l.currType,Amount:l.currCostPerLvl[1]}),updateCurrencySpentStatistic(l.currType,l.currCostPerLvl[1]));g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:g});g={TiresLvl:"0",TurboLvl:"0",PaintId:l.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,
Data:g});g={PlatesId:"0",WindshieldId:"0",Pr:Number(l.basePr)+l.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:g});d=f=!1;for(g=0;g<a.Inventory.length;g++)if("PaintJobs"==a.Inventory[g].ItemId){d=!0;void 0!=a.Inventory[g].CustomData?l.defaultPaintID in a.Inventory[g].CustomData?f=!0:(n={},n[l.defaultPaintID]="Owned"):(n={},n[l.defaultPaintID]="Owned");void 0!=n&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.Inventory[g].ItemInstanceId,Data:n});break}0==d&&(paintToGive=[],paintToGive.push("PaintJobs"),a=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),n={},n[l.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:n}));g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:l.defaultPaintID,
DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:Number(l.basePr)+l.prPerLvl[1]};r=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:r},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:g}];0==f&&(a={},a[l.defaultPaintID]="Owned",r.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:a}));a={};g={Inventory:r};void 0!=q&&(a[q.VirtualCurrency]=q.Balance,g.VirtualCurrency=a);updateProfileCar(b,k,currentPlayerId);g.Experience=UpdateExperience("Balancing","BalancingItem",
"Car_"+l.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",g)}
function upgradePart(b,k,a,c,e){for(var d=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),h=!1,f=0;f<d.Catalog.length;f++)if(d.Catalog[f].ItemId==b.carId){h=!0;break}if(!1===h)return generateErrObj("car with ID: "+b.carId+" not found in catalog.");for(var d=server.GetCatalogItems({CatalogVersion:"PartCards"}),h=!1,g,f=0;f<d.Catalog.length;f++)if(d.Catalog[f].ItemId==b.partId){g=JSON.parse(d.Catalog[f].CustomData);h=!0;break}if(0==h)return generateErrObj("part with ID: "+b.partId+" not found in catalog.");
for(var h=!1,l,f=0;f<a.Inventory.length;f++)if(a.Inventory[f].ItemId==b.carId&&"CarsProgress"==a.Inventory[f].CatalogVersion){h=!0;l=a.Inventory[f];break}if(!1===h)return generateFailObj("car with ID: "+b.carId+" not found in user inventory.");for(var n=!1,h=0,t={},f=0;f<a.Inventory.length;f++)if(a.Inventory[f].ItemId==b.partId&&"PartCards"==a.Inventory[f].CatalogVersion){var n=!0,r={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},
h=parseInt(l.CustomData[r[b.partId]])+1;if(h>=Number(g.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var q=getObjectValueFromLevel(g,"cardCostPerLvl",h),D=getObjectValueFromLevel(g,"currCostPerLvl",h);t[r[b.partId]]=h;l.CustomData[r[b.partId]]=h;var A;c=checkBalance(g.currType,D,c,e);if("OK"!=c)return c;try{if(void 0!==a.Inventory[f].CustomData&&void 0!==a.Inventory[f].CustomData.Amount&&a.Inventory[f].CustomData.Amount>=q)a.Inventory[f].CustomData.Amount-=q,A={Amount:a.Inventory[f].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[f].ItemInstanceId,Data:A});else return generateFailObj("Insufficient cards")}catch(m){return generateFailObj("Insufficient cards")}break}if(0==n)return generateFailObj("Part not found");var C;0<D&&(C=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g.currType,Amount:D}),updateCurrencySpentStatistic(g.currType,D));f=recalculateCarPr(l.CustomData,l.ItemId,void 0,d);t.Pr=f;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:l.ItemInstanceId,Data:t});l={};f={Inventory:[{ItemId:b.partId,CatalogVersion:"PartCards",CustomData:A},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:t}]};void 0!==C&&(l[C.VirtualCurrency]=C.Balance,f.VirtualCurrency=l);updateProfileCar(b,k,currentPlayerId);f.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+g.rarity,h,!0);return generateInventoryChange("InventoryUpdatePart",f)};
