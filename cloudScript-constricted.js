handlers.endGame=function(b,l){var a="01",d,e="0";"rWin"==b.outcome&&(e="1");var f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=f.Statistics.length&&(d=f.Statistics[0].Value.toString(),log.debug("wlStatInt "+d),a=Number(d).toString(2),log.debug("wlStat "+a));var f=0,k;log.debug("wlStat.length "+a.length);k=Array(a.length);log.debug("tempString.length "+k.length);for(var h=0;h<k.length-1;h++)k[h]=a[h];k[k.length-1]=e;log.debug("tempString "+k);a=k;log.debug("wlStat "+
a);e=a.length;for(h=0;h<a.length;h++)"1"==a[h]&&f++;log.debug("wlStatNew "+a);k=Math.round(f/e*100);log.debug("winRatio "+k);var c=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),e=0,g,f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=f.Statistics.length&&(e=f.Statistics[0].Value,log.debug("getting trophy count "+f.Statistics[0].Value));g=e;"rWin"==b.outcome&&(e=50>=e?50:e+60);log.debug("trophies change: "+g+" => "+e);f=calculateLeague(e);
for(h=d=0;h<a.length;h++)"1"==a[h]&&(d+=Math.pow(2,h));h=[];h.push({StatisticName:"WinLoss",Version:"0",Value:d});a={StatisticName:"TrophyCount",Version:"0",Value:e};h.push(a);a={StatisticName:"League",Version:"0",Value:f};h.push(a);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:h});if("rOot"==b.outcome){var m={TrophyCount:e,League:f};return{Result:m}}a=JSON.parse(c.Data.SubdivisionTrophyRanges);log.debug("SubdivisionTrophyRanges "+a);for(h=0;h<a.subdivisions.length;h++)if(g<
a.subdivisions[h]){m=h;break}log.debug("user is in subdivision "+m);h=[];h.push({Key:b.envIndex+"_"+b.courseIndex+"_RecPos",Value:b.recordingPos});h.push({Key:b.envIndex+"_"+b.courseIndex+"_RecRot",Value:b.recordingRot});h.push({Key:b.envIndex+"_"+b.courseIndex+"_RecHeader",Value:b.recordingHeader});log.debug("updating user read only data ");h=server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:h});log.debug("updated user read only data for "+currentPlayerId+" "+h);h=server.GetTitleInternalData({Key:"RecSubDivision"+
m}).Data["RecSubDivision"+m];log.debug("recPool: "+h);if(void 0==h)a=[],k={wl:k,e:b.envIndex,c:b.courseIndex,uId:currentPlayerId},a.push(k),h=JSON.stringify(a),log.debug("recArray: "+h);else{a=JSON.parse(h);log.debug("recArray: "+a);k={wl:k,e:b.envIndex,c:b.courseIndex,uId:currentPlayerId};c=!1;for(h=g=0;h<a.length;h++)a[h].uId==currentPlayerId&&g++;if(2<g)return m={TrophyCount:e,League:f},{Result:m};for(h=0;h<a.length;h++)if(a[h].e==b.envIndex&&a[h].c==b.courseIndex){c=!0;a[h]=k;if(1==a.length)break;
if(0<h)if(a[h].wl>a[h-1].wl){if(h==a.length-1)break;for(g=h+1;g<a.length;g++)if(a[g-1].wl>a[g].wl)d=a[g],a[g]=a[g-1],a[g-1]=d;else break}else for(g=h-1;0<=g;g--)if(a[g+1].wl<a[g].wl)d=a[g],a[g]=a[g+1],a[g+1]=d;else break;else for(g=h+1;g<a.length;g++)if(a[g-1].wl>a[g].wl)d=a[g],a[g]=a[g-1],a[g-1]=d;else break}0==c&&(log.debug("recArrayLNbefore: "+a.length),a.push(k),log.debug("recArrayLNafter: "+a.length));h=JSON.stringify(a);log.debug("titleKeyVal: "+h)}server.SetTitleInternalData({Key:"RecSubDivision"+
m,Value:h});m={TrophyCount:e,League:f};return{Result:m}};
handlers.startGame=function(b,l){var a="01",d=50,e=0,f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});if(0!=f.Statistics.length){a=f.Statistics[0].Value.toString();a=Number(a).toString(2);d=a.length;for(f=0;f<a.length;f++)"1"==a[f]&&e++;d=Math.round(e/d*100)}log.debug("wlStatBeforeshiftandAdd "+a);a+="0";log.debug("wlStatBeforeshift "+a);20<a.length&&a.shift();log.debug("wlStat "+a);var f=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),
k=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]}),e=0;0!=k.Statistics.length&&(e=k.Statistics[0].Value);k=JSON.parse(f.Data.SubdivisionTrophyRanges);log.debug("SubdivisionTrophyRanges "+k);for(var h=43,f=0;f<k.subdivisions.length;f++)if(e<k.subdivisions[f]){h=f;break}log.debug("user is in subdivision "+h);var f=server.GetTitleInternalData({Keys:"RecSubDivision"+h}).Data["RecSubDivision"+h],c=!1;void 0==f&&(c=!0);var g;g=0==c?JSON.parse(f):[];var m=[0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0];log.debug("subrecording pool has "+g.length+" length. Must have: 15 length");15>g.length&&(c=!0);k=Array(g.length);h=0;log.debug("iterating through recArray");for(f=0;f<g.length;f++)1==c&&(m[5*Number(g[f].e)+Number(g[f].c)]=1),g[f].uId==currentPlayerId?log.debug("found: "+g[f].uId+"... skipping"):(k[h]=g[f],h++);log.debug("isIncompleteSubDivision: "+c);if(1==c){for(f=g=c=0;f<m.length;f++)if(0==m[f]){c=Math.floor(f/5);g=f%5;break}log.debug("gettingDefaultUser: env: "+c+" course: "+
g);f=server.GetTitleData({Keys:"MasterUser"});if(void 0!=f.Data.MasterUser&&(log.debug("master user: "+f.Data.MasterUser),f=server.GetUserReadOnlyData({PlayFabId:f.Data.MasterUser,Keys:[c+"_"+g+"_RecPos",c+"_"+g+"_RecRot",c+"_"+g+"_RecHeader"]}),void 0!=f.Data&&(log.debug("defaultRecordingData: "+f.Data),void 0!=f.Data[c+"_"+g+"_RecPos"]&&void 0!=f.Data[c+"_"+g+"_RecRot"]&&void 0!=f.Data[c+"_"+g+"_RecHeader"])))return log.debug("found valid default rec"),{Result:"OK",RecType:"Default",PosData:f.Data[c+
"_"+g+"_RecPos"].Value,RotData:f.Data[c+"_"+g+"_RecRot"].Value,HeaderData:f.Data[c+"_"+g+"_RecHeader"].Value,Opp:"Mniezo"}}log.debug("looking for user generated recording");if(0==h)return generateErrObj("no valid recording found for this subdivision");c=h-1;for(f=0;f<h;f++)if(k[f].wl>d){c=f;break}log.debug("pivot is: "+c);d=Math.min(h,3);log.debug("finalRecArraySize: "+d);m=Array(d);for(f=0;f<d;f++)m[f]=0>=c?k[f]:c>=h-1?k[h-1-f]:k[c-d/2+f];log.debug("validRecArray: "+k);log.debug("finalRecArray: "+
m);f=Math.floor(Math.random()*d);h=m[f].uId;d=m[f].e;f=m[f].c;k=[d+"_"+f+"_RecPos",d+"_"+f+"_RecRot",d+"_"+f+"_RecHeader"];log.debug("requesting "+k);k=server.GetUserReadOnlyData({PlayFabId:h,Keys:k});if(void 0==k)return generateErrObj("Did not find recording for this user: "+h);h=server.GetPlayerCombinedInfo({PlayFabId:h,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,
GetPlayerStatistics:!1}});e-=30;0>=e&&(e=0);a=parseInt(a,2);log.debug("updating WL to:  "+a);m=calculateLeague(e);c=[];c.push({StatisticName:"WinLoss",Version:"0",Value:a});c.push({StatisticName:"TrophyCount",Version:"0",Value:e});c.push({StatisticName:"League",Version:"0",Value:m});log.debug("updatingStats: "+c);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});return{Result:"OK",RecType:"UserGenerated",PosData:k.Data[d+"_"+f+"_RecPos"].Value,RotData:k.Data[d+"_"+f+"_RecRot"].Value,
HeaderData:k.Data[d+"_"+f+"_RecHeader"].Value,Opp:h.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateTrophyCount=function(b,l){var a=0,d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=d.Statistics.length&&(a=d.Statistics[0].Value);"rStart"==b.val&&(a-=30);0>a&&(a=0);"rWin"==b.val&&(a+=60);if("rLose"==b.val)return{val:a};d=[];d.push({StatisticName:"TrophyCount",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:d});if("rWin"==b.val)return{val:a}};
handlers.initServerData=function(b){b=[];var l={StatisticName:"TrophyCount",Version:"0",Value:"0"};b.push(l);l={StatisticName:"League",Version:"0",Value:"0"};b.push(l);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=[];b.push("Decals");b.push("PaintJobs");b.push("Plates");b.push("Rims");b.push("WindshieldText");b=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:b});for(var l={0:"Owned"},a=0;a<b.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[a].ItemInstanceId,Data:l});b=[];b.push("FordFocus");b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b});l={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});l={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});l={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:3E3});server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:200})};
handlers.requestInventory=function(b){b=server.GetUserInventory({PlayFabId:currentPlayerId});for(var l=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),d=0;d<b.Inventory.length;d++)if("CarsProgress"==b.Inventory[d].CatalogVersion){var e=checkCarDataValidity(b.Inventory[d],l);log.debug("check "+e);if("PlayFabError"==e||void 0==e)return generateErrObj("PlayfabError");"OK"==e?log.debug("Data for "+b.Inventory[d].ItemId+" OK"):b.Inventory[d].CustomData=
e;b.Inventory[d].CustomData.Pr=recalculateCarPr(b.Inventory[d].CustomData,b.Inventory[d].ItemId,l,a);e={};e.Pr=b.Inventory[d].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[d].ItemInstanceId,Data:e})}return b};
function checkCarDataValidity(b,l){if(void 0==b.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});for(var d=0,e=0;e<l.Catalog.length;e++)if(l.Catalog[e].ItemId==b.ItemId){var f=
JSON.parse(l.Catalog[e].CustomData),d=parseInt(f.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a})}catch(k){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:d}}return"OK"}function generateFailObj(b){return{Result:"Failed",Message:b}}
function generateErrObj(b){return{Result:"Error",Message:b}}function checkBalance(b,l,a,d){if("SC"==b){if(a<l)return generateFailObj("NotEnoughSC")}else if(d<l)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(b){td=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==td.Data.LeagueSubdivisions||void 0==td.Data.SubdivisionTrophyRanges)return 1;for(var l=JSON.parse(td.Data.LeagueSubdivisions).leagues,a=JSON.parse(td.Data.SubdivisionTrophyRanges).subdivisions,d=0;d<l.length;d++)if(!(Number(b)>Number(a[l[d]])))return d}
function recalculateCarPr(b,l,a,d){var e=0,f;f=void 0==a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<f.Catalog.length;a++)if(f.Catalog[a].ItemId==l){a=JSON.parse(f.Catalog[a].CustomData);e+=parseInt(a.basePr)+parseInt(a.prPerLvl)*(parseInt(b.CarLvl)-1);break}d=void 0==d?server.GetCatalogItems({CatalogVersion:"PartCards"}):d;b={Exhaust:b.ExhaustLvl,Engine:b.EngineLvl,Gearbox:b.GearboxLvl,Suspension:b.SuspensionLvl,Tires:b.TiresLvl,Turbo:b.TurboLvl};for(a=0;a<d.Catalog.length;a++)l=
JSON.parse(d.Catalog[a].CustomData),e+=parseInt(l.basePr)+parseInt(l.prPerLvl)*b[d.Catalog[a].ItemId];return e}
function GenerateBlackMarket(b){var l=server.GetCatalogItems({CatalogVersion:"PartCards"}),a={};a.BMTime=(new Date).getTime();var d=Math.floor(Math.random()*l.Catalog.length),e=JSON.parse(l.Catalog[d].CustomData);if(void 0==e)return generateErrObj("Part card "+l.Catalog[k].ItemId+" has no custom data.");a.BMItem0=l.Catalog[d].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy;var f=Math.floor(Math.random()*l.Catalog.length);f==d&&(f=l.Catalog.length-d-1);e=JSON.parse(l.Catalog[f].CustomData);
if(void 0==e)return generateErrObj("Part card "+l.Catalog[k].ItemId+" has no custom data.");a.BMItem1=l.Catalog[f].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy;for(var l=server.GetCatalogItems({CatalogVersion:"CarCards"}),e=[],f=[],k=0;k<l.Catalog.length;k++){d=JSON.parse(l.Catalog[k].CustomData);if(void 0==d)return generateErrObj("Car card "+l.Catalog[k].ItemId+" has no custom data.");"false"==d.rareCar?e.push(l.Catalog[k].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy):
f.push(l.Catalog[k].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy)}0>=e.length?(a.BMItem2=f[Math.floor(Math.random()*f.length)],a.BMItem3=f[Math.floor(Math.random()*f.length)]):0>=f.length?(a.BMItem2=e[Math.floor(Math.random()*e.length)],a.BMItem3=e[Math.floor(Math.random()*e.length)]):(a.BMItem2=e[Math.floor(Math.random()*e.length)],a.BMItem3=f[Math.floor(Math.random()*f.length)]);server.UpdateUserInternalData({PlayFabId:b,Data:a});k=[];k.push("BlackMarketResetMinutes");b=server.GetTitleData({PlayFabId:b,
Keys:k});a.BMTime=60*parseInt(b.Data.BlackMarketResetMinutes);return a}function GetCurrentBlackMarket(b,l){var a={},d=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:b,Keys:e});a.BMTime=60*parseInt(e.Data.BlackMarketResetMinutes)-Math.floor((d.getTime()-l.Data.BMTime.Value)/1E3);for(d=0;4>d;d++)a["BMItem"+d]=l.Data["BMItem"+d].Value;return a}
handlers.purchaseBMItem=function(b,l){log.debug("purchasing item "+b.itemId+" from black market");if(0>b.itemId||3<b.itemId)return generateFailObj("invalid item index");var a=[];a.push("BMItem"+b.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),d=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+b.itemId].Value.split("_");log.debug("userArray: "+a);var e=d.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var f;f=2>b.itemId?"PartCards":"CarCards";var k=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),e=checkBalance(a[1],k,e,e);if("OK"!=e)return e;var h,c;log.debug("searching for: "+a[0]+" in "+f);for(e=0;e<d.Inventory.length;e++)if(d.Inventory[e].ItemId==a[0]&&d.Inventory[e].CatalogVersion==f){log.debug("found it!");h=d.Inventory[e].ItemInstanceId;void 0==d.Inventory[e].CustomData?(log.debug("no custom data. creating ..."),c={Amount:1}):void 0==d.Inventory[e].CustomData.Amount?c={Amount:1}:(c=Number(d.Inventory[e].CustomData.Amount)+
1,isNaN(c)&&(c=1),c={Amount:c});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h,Data:c});break}void 0==h&&(log.debug("cardInstance is undefined"),h=[],h.push(a[0]),h=server.GrantItemsToUser({CatalogVersion:f,PlayFabId:currentPlayerId,ItemIds:h}).ItemGrantResults[0].ItemInstanceId,void 0==h?generateErrObj("grantRequest denied"):(c={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h,Data:c})));h=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:a[1],Amount:k});k=a[0]+"_"+a[1]+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];log.debug("generatedArray: "+k);d={};d["BMItem"+b.itemId]=k;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});c=[{ItemId:a[0],CatalogVersion:f,CustomData:c}];f={};f[h.VirtualCurrency]=h.Balance;a=b.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];e={Inventory:c,VirtualCurrency:f};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:e,BMItemChange:a}};
handlers.retrieveBlackMarket=function(b,l){var a=[];a.push("BMTime");for(var d=0;4>d;d++)a.push("BMItem"+d);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a});if(void 0==a.Data.BMTime)return log.debug("No user BM data detected; generating ..."),GenerateBlackMarket(currentPlayerId);d=new Date;log.debug("milliseconds passed: "+d.getTime());log.debug("BMTime: "+a.Data.BMTime.Value);var e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:e});if(d.getTime()-
parseInt(a.Data.BMTime.Value)>6E4*parseInt(e.Data.BlackMarketResetMinutes))return log.debug("regenerating market"),GenerateBlackMarket(currentPlayerId);log.debug("get current market");return GetCurrentBlackMarket(currentPlayerId,a)};
handlers.updateCarCust=function(b,l){for(var a=server.GetUserInventory({PlayFabId:currentPlayerId}),d=[],e="-1",f={},k={PaintJobs:{itemOwned:"no",itemCustData:b.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:b.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:b.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:b.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",itemCustData:b.wsId,carItemId:"WindshieldId"}},h=0;h<a.Inventory.length;h++)a.Inventory[h].ItemId==
b.carId&&"CarsProgress"==a.Inventory[h].CatalogVersion&&(e=a.Inventory[h].ItemInstanceId),a.Inventory[h].ItemId in k&&(k[a.Inventory[h].ItemId].itemOwned="yes",k[a.Inventory[h].ItemId].itemCustData in a.Inventory[h].CustomData?f[k[a.Inventory[h].ItemId].carItemId]=k[a.Inventory[h].ItemId].itemCustData:log.debug("user doesn't own: "+a.Inventory[h].ItemId+" "+k[a.Inventory[h].ItemId].itemCustData));if("-1"==e)return generateFailObj("User does not own car with id: "+b.carId);for(var c in k)k.hasOwnProperty(c)&&
"no"==k[c].itemOwned&&d.push(c);if(f=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e,Data:f});a=[{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:f}];if(0<d.length)for(d=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:d}),e={0:"Owned"},h=0;h<d.ItemGrantResults.length;h++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:d.ItemGrantResults[h].ItemInstanceId,Data:e});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:a}}};
handlers.purchaseItems=function(b,l){log.debug("RETRIEVING USER INVENTORY");var a=server.GetUserInventory({PlayFabId:currentPlayerId}),d=a.VirtualCurrency.SC,e=a.VirtualCurrency.HC;log.debug("user currency: SC: "+d+" HC: "+e);switch(b.purchaseType){case "carUpgrade":log.debug("== carUpgrade request: carId: "+b.carId);log.debug("RETRIEVING CARDS CATALOGUE");for(var f=server.GetCatalogItems({CatalogVersion:"CarCards"}),k=!1,h,c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.carId&&"CarsProgress"==
a.Inventory[c].CatalogVersion){k=!0;log.debug("car is in user's inventory!");h=a.Inventory[c];break}for(var g,c=0;c<f.Catalog.length;c++)if(f.Catalog[c].ItemId==b.carId){g=JSON.parse(f.Catalog[c].CustomData);log.debug("cardInfo found!");break}if(void 0==g)return log.error("cardInfo undefined!"),g={Result:"Error",Message:"CardNotFoundForCarwithID: "+b.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data."};if(1==k){log.debug("user has car: "+b.carId+
"... upgrading");var m=parseInt(h.CustomData.CarLvl)+1,r=parseInt(g.baseCurrCost)+m*parseInt(g.currCostPerLvl),e=checkBalance(g.currType,r,d,e);if("OK"!=e)return e;log.debug("user has enough currency. Let's check for card balance");e=parseInt(g.baseCardCost)+parseInt(h.CustomData.CarLvl)*parseInt(g.cardCostPerLvl);log.debug("cardCost: "+e);for(var k=!1,q,c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.carId&&"CarCards"==a.Inventory[c].CatalogVersion){log.debug("consuming: "+a.Inventory[c].ItemInstanceId);
k=!0;try{if(void 0==a.Inventory[c].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");if(void 0==a.Inventory[c].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(a.Inventory[c].CustomData.Amount)>=e)a.Inventory[c].CustomData.Amount-=e,q={Amount:a.Inventory[c].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[c].ItemInstanceId,Data:q});else return generateFailObj("Insufficient cards for real: "+
a.Inventory[c].CustomData.Amount+" vs "+e)}catch(u){return log.debug("itemConsumptionResult.errorCode "+u),generateFailObj("Insufficient cards")}break}if(0==k)return generateFailObj("No cards found");log.debug("user has enough cards to purchase upgrade!");a=recalculateCarPr(h.CustomData,h.ItemId,f,void 0);log.debug("upgrading to car lvl: "+m+" and pr: "+a);c={CarLvl:m,Pr:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemInstanceId,Data:c});var n;0<r&&(n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:g.currType,Amount:r}));log.debug("Upgrade Complete!");a=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:q},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:c}];g={};c={Inventory:a};void 0!=n&&(g[n.VirtualCurrency]=n.Balance,c.VirtualCurrency=g);g={Result:"OK",Message:"InventoryUpdate",InventoryChange:c}}else{log.debug("user doesn't have car: "+b.carId+"... looking for card");for(var k=!1,t,c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.carId&&"CarCards"==a.Inventory[c].CatalogVersion){log.debug("consuming: "+
a.Inventory[c].ItemInstanceId);k=!0;try{if(void 0==a.Inventory[c].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0==a.Inventory[c].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");if(Number(a.Inventory[c].CustomData.Amount)>=Number(g.baseCardCost))t=a.Inventory[c].ItemInstanceId,a.Inventory[c].CustomData.Amount-=g.baseCardCost,q={Amount:a.Inventory[c].CustomData.Amount};else return generateFailObj("Insufficient cards: "+a.Inventory[c].CustomData.Amount+
" vs "+g.baseCardCost+".")}catch(u){return generateFailObj("Insufficient cards: "+u)}break}if(0==k)return generateFailObj("No cards found");log.debug("user has enough cards to purchase car. Checking if enough currency is availabe");e=checkBalance(g.currType,g.baseCurrCost,d,e);if("OK"!=e)return e;c=[];c.push(b.carId);e=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c});if(0==e.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),
generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:t,Data:q});0<g.baseCurrCost&&(n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g.currType,Amount:g.baseCurrCost}));c={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[0].ItemInstanceId,
Data:c});c={TiresLvl:"0",TurboLvl:"0",PaintId:g.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[0].ItemInstanceId,Data:c});c={PlatesId:"0",WindshieldId:"0",Pr:g.basePr};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[0].ItemInstanceId,Data:c});for(var d=e=!1,p,c=0;c<a.Inventory.length;c++)if("PaintJobs"==a.Inventory[c].ItemId){d=!0;log.debug("user has paintjobs");
void 0!=a.Inventory[c].CustomData?(log.debug("user has paintjobs customData"),g.defaultPaintID in a.Inventory[c].CustomData?(log.debug("user has paintjob already"),e=!0):(log.debug("user doesn't have paintjob"),p={},p[g.defaultPaintID]="Owned")):(p={},p[g.defaultPaintID]="Owned");void 0!=p&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[c].ItemInstanceId,Data:p});break}0==d&&(paintToGive=[],paintToGive.push("PaintJobs"),a=server.GrantItemsToUser({CatalogVersion:"Customization",
PlayFabId:currentPlayerId,ItemIds:paintToGive}),p={},p[g.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:p}));c={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:g.defaultPaintID,DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:g.basePr};a=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:q},{ItemId:b.carId,CatalogVersion:"CarsProgress",
CustomData:c}];0==e&&(c={},c[g.defaultPaintID]="Owned",a.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:c}));g={};c={Inventory:a};void 0!=n&&(g[n.VirtualCurrency]=n.Balance,c.VirtualCurrency=g);g={Result:"OK",Message:"InventoryUpdateNewCar",InventoryChange:c}}return g;case "partUpgrade":log.debug("Upgrading Part: "+b.partId+" on Car: "+b.carId);log.debug("Checking to see if car exists in catalog");q=server.GetCatalogItems({CatalogVersion:"CarsProgress"});p=!1;for(c=0;c<q.Catalog.length;c++)if(q.Catalog[c].ItemId==
b.carId){p=!0;break}if(0==p)return log.error("invalid car ID"),g={Result:"Error",Message:"car with ID: "+b.carId+" not found in catalog."};log.debug("Checking to see if part exists in catalog");q=server.GetCatalogItems({CatalogVersion:"PartCards"});p=!1;for(c=0;c<q.Catalog.length;c++)if(q.Catalog[c].ItemId==b.partId){g=JSON.parse(q.Catalog[c].CustomData);p=!0;break}if(0==p)return log.error("invalid part ID"),g={Result:"Error",Message:"part with ID: "+b.partId+" not found in catalog."};log.debug("Checking to see if user has car: "+
b.carId);k=!1;for(c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.carId&&"CarsProgress"==a.Inventory[c].CatalogVersion){k=!0;log.debug("car is in user's inventory!");h=a.Inventory[c];break}if(0==k)return generateFailObj("car with ID: "+b.carId+" not found in user inventory.");log.debug("Checking to see if user has part and or has enough parts");p=!1;for(c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.partId&&"PartCards"==a.Inventory[c].CatalogVersion){p=!0;log.debug("part is in user's inventory!");
f={};k={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"};log.debug("calculating "+b.partId+" cost and modifying "+k[b.partId]);t=parseInt(g.baseCardCost,10)+parseInt(h.CustomData[k[b.partId]],10)*parseInt(g.cardCostPerLvl,10);var v=parseInt(h.CustomData[k[b.partId]])+1,r=Number(g.baseCurrCost)+v*Number(g.currCostPerLvl);f[k[b.partId]]=v;h.CustomData[k[b.partId]]=v;log.debug("we need: "+t+" cards and "+r+" money => base: "+parseInt(g.baseCurrCost)+
" lvls: "+parseInt(h.CustomData[k[b.partId]])+" perLvlCost: "+parseInt(g.currCostPerLvl)+" equalling: "+parseInt(h.CustomData[k[b.partId]],10)*parseInt(g.currCostPerLvl,10));e=checkBalance(g.currType,r,d,e);if("OK"!=e)return e;log.debug("consuming part instance: "+a.Inventory[c].ItemInstanceId);try{if(void 0!=a.Inventory[c].CustomData&&void 0!=a.Inventory[c].CustomData.Amount&&a.Inventory[c].CustomData.Amount>=t)a.Inventory[c].CustomData.Amount-=t,m={Amount:a.Inventory[c].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.Inventory[c].ItemInstanceId,Data:m});else return generateFailObj("Insufficient cards")}catch(u){return log.debug("itemConsumptionResult.errorCode "+u),generateFailObj("Insufficient cards")}break}if(0==p)return generateFailObj("Part not found");0<r&&(n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g.currType,Amount:r}));a=recalculateCarPr(h.CustomData,h.ItemId,void 0,q);f.Pr=a;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemInstanceId,
Data:f});a=[{ItemId:b.partId,CatalogVersion:"PartCards",CustomData:m},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:f}];log.debug("succesfully upgraded part!");g={};c={Inventory:a};void 0!=n&&(g[n.VirtualCurrency]=n.Balance,c.VirtualCurrency=g);return g={Result:"OK",Message:"InventoryUpdatePart",InventoryChange:c};case "custPurchase":log.debug("Purchasing Customization: "+b.custId+" with val: "+b.custVal);log.debug("Checking to see if customization exists in catalog");h=server.GetCatalogItems({CatalogVersion:"Customization"});
g=0;n="SC";for(c=0;c<h.Catalog.length;c++)if(h.Catalog[c].ItemId==b.custId){v=h.Catalog[c];g=JSON.parse(h.Catalog[c].CustomData);c=b.custVal+",Cost";n=g[b.custVal+",Curr"];g=g[c];e=checkBalance(n,g,d,e);if("OK"!=e)return e;log.debug("custCurr: "+n);log.debug("custPrice: "+g);break}if(void 0==v)return log.error("Customization does not exist in catalog"),g={Result:"Error",Message:"Customization does not exist in catalog."};log.debug("Checking to see if user has said customization");for(var w,c=0;c<
a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.custId){log.debug("user has customization category!");w=a.Inventory[c];k=a.Inventory[c].ItemInstanceId;if(void 0!=w.CustomData&&String(b.custVal)in w.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==w){log.info("user doesn't have customization category. Granting ... ");c=[];c.push(b.custId);a=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:c});if(0==a.ItemGrantResults[0].Result)return log.error("something went wrong while granting user customization class object"),
g={Result:"Error",Message:"something went wrong while granting user customization class object."};k=a.ItemGrantResults[0].ItemInstanceId}a={};a[String(b.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k,Data:a});a=[{ItemId:b.custId,CatalogVersion:"Customization",CustomData:a}];0<g?(n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:n,Amount:g}),g={},g[n.VirtualCurrency]=n.Balance,c={Inventory:a,VirtualCurrency:g}):c=
{Inventory:a};return g={Result:"OK",Message:"InventoryUpdateNewCustomization",InventoryChange:c};case "softCurrencyPurchase":log.debug("Purchasing pack: "+b.packId);log.debug("Checking to see if pack exists in catalog");n=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});a=!1;for(c=d=0;c<n.Catalog.length;c++)if(n.Catalog[c].ItemId==b.packId){d=n.Catalog[c].VirtualCurrencyPrices.HC;g=JSON.parse(n.Catalog[c].CustomData);a=!0;break}if(0==a)return g={Result:"Error",Message:"pack with ID: "+
b.packId+" not found in catalog."};if(0>=d)return g={Result:"Error",Message:"pack with ID: "+b.packId+" shouldn't have negative cost."};if(d>e)return generateFailObj("Not enough HC.");n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:d});a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:g.quantity});g={};g[a.VirtualCurrency]=a.Balance;g[n.VirtualCurrency]=n.Balance;return g={Result:"OK",Message:"SoftCurrencyPurchased",
InventoryChange:{VirtualCurrency:g}};default:log.debug("invalid purchase parameter")}};handlers.giveMoney=function(b){b=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.amount});var l={};l[b.VirtualCurrency]=b.Balance;return{Result:"OK",Message:"CurrencyChanged",InventoryChange:{VirtualCurrency:l}}};
handlers.grantItems=function(b){for(var l=server.GetUserInventory({PlayFabId:currentPlayerId}),a,d=!1,e=0;e<l.Inventory.length;e++)if(l.Inventory[e].ItemId==b.itemId&&l.Inventory[e].CatalogVersion==b.catalogId){log.debug("adding amount to: "+l.Inventory[e].ItemInstanceId);a=void 0==l.Inventory[e].CustomData?b.amount:void 0==l.Inventory[e].CustomData.Amount?b.amount:isNaN(Number(l.Inventory[e].CustomData.Amount))?b.amount:Number(l.Inventory[e].CustomData.Amount)+b.amount;a={Amount:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:l.Inventory[e].ItemInstanceId,Data:a});d=!0;break}0==d&&(l=[],l.push(b.itemId),l=server.GrantItemsToUser({CatalogVersion:b.catalogId,PlayFabId:currentPlayerId,ItemIds:l}),a={Amount:b.amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:l.ItemGrantResults[0].ItemInstanceId,Data:a}));return{Result:"OK",Message:"InventoryUpdated",InventoryChange:{Inventory:[{ItemId:b.itemId,CatalogVersion:b.catalogId,CustomData:a}]}}};
handlers.openChest=function(b,l){var a=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<b.currCost){if("OK"!=checkBalance(b.currType,b.currCost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.currType,Amount:b.currCost})}for(var d in b.currencyReq)0<b.currencyReq[d]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:d,Amount:b.currencyReq[d]});var e;
for(d in b.carCardsRequest)if(log.debug(d+" : "+b.carCardsRequest[d]),b.carCardsRequest.hasOwnProperty(d)){e=!1;log.debug("looking for: "+d);for(var f=0;f<a.Inventory.length;f++)if(a.Inventory[f].ItemId==d&&"CarCards"==a.Inventory[f].CatalogVersion){log.debug("adding amount to: "+a.Inventory[f].ItemInstanceId);e=void 0==a.Inventory[f].CustomData?Number(b.carCardsRequest[d]):void 0==a.Inventory[f].CustomData.Amount?Number(b.carCardsRequest[d]):isNaN(Number(a.Inventory[f].CustomData.Amount))?Number(b.carCardsRequest[d]):
Number(a.Inventory[f].CustomData.Amount)+Number(b.carCardsRequest[d]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[f].ItemInstanceId,Data:e});e=!0;break}0==e&&(f=[d],f=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:f}),e={Amount:b.carCardsRequest[d]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:e}))}for(d in b.partCardsRequest)if(log.debug(d+
" : "+b.partCardsRequest[d]),b.partCardsRequest.hasOwnProperty(d)){e=!1;log.debug("looking for: "+d);for(f=0;f<a.Inventory.length;f++)if(a.Inventory[f].ItemId==d&&"PartCards"==a.Inventory[f].CatalogVersion){log.debug("adding amount to: "+a.Inventory[f].ItemInstanceId);e=void 0==a.Inventory[f].CustomData?Number(b.partCardsRequest[d]):void 0==a.Inventory[f].CustomData.Amount?Number(b.partCardsRequest[d]):isNaN(Number(a.Inventory[f].CustomData.Amount))?Number(b.partCardsRequest[d]):Number(a.Inventory[f].CustomData.Amount)+
Number(b.partCardsRequest[d]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[f].ItemInstanceId,Data:e});e=!0;break}0==e&&(f=[d],f=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:f}),e={Amount:b.partCardsRequest[d]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:e}))}return{Result:"OK",Message:"InventoryUpdated",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId})}};
handlers.buyChest=function(b,l){var a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(b.curr,b.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");var a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.cost}),d={};d[a.VirtualCurrency]=a.Balance;return{Result:"OK",Message:"ChestBought",InventoryChange:{VirtualCurrency:d}}};handlers.getServerTime=function(b,l){return{time:new Date}};
