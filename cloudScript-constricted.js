handlers.endGame=function(b,l){var a="01",e,d="0";"rWin"==b.outcome&&(d="1");var h=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=h.Statistics.length&&(e=h.Statistics[0].Value.toString(),log.debug("wlStatInt "+e),a=Number(e).toString(2),log.debug("wlStat "+a));var h=0,k;log.debug("wlStat.length "+a.length);k=Array(a.length);log.debug("tempString.length "+k.length);for(var f=0;f<k.length-1;f++)k[f]=a[f];k[k.length-1]=d;log.debug("tempString "+k);a=k;log.debug("wlStat "+
a);d=a.length;for(f=0;f<a.length;f++)"1"==a[f]&&h++;log.debug("wlStatNew "+a);k=Math.round(h/d*100);log.debug("winRatio "+k);var c=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),d=0,g,h=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=h.Statistics.length&&(d=h.Statistics[0].Value);g=d;"rWin"==b.outcome&&(d=0>=d?30:d+60);log.debug("trophies change: "+g+" => "+d);h=calculateLeague(d);for(f=e=0;f<a.length;f++)"1"==a[f]&&(e+=Math.pow(2,
f));f=[];f.push({StatisticName:"WinLoss",Version:"0",Value:e});a={StatisticName:"TrophyCount",Version:"0",Value:d};f.push(a);a={StatisticName:"League",Version:"0",Value:h};f.push(a);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:f});if("rOot"==b.outcome){var p={TrophyCount:d,League:h};return{Result:p}}a=JSON.parse(c.Data.SubdivisionTrophyRanges);log.debug("SubdivisionTrophyRanges "+a);for(f=0;f<a.subdivisions.length;f++)if(g<a.subdivisions[f]){p=f;break}log.debug("user is in subdivision "+
p);f=[];f.push({Key:b.envIndex+"_"+b.courseIndex+"_RecPos",Value:b.recordingPos});f.push({Key:b.envIndex+"_"+b.courseIndex+"_RecRot",Value:b.recordingRot});f.push({Key:b.envIndex+"_"+b.courseIndex+"_RecHeader",Value:b.recordingHeader});log.debug("updating user read only data ");f=server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:f});log.debug("updated user read only data for "+currentPlayerId+" "+f);f=server.GetTitleInternalData({Key:"RecSubDivision"+p}).Data["RecSubDivision"+p];log.debug("recPool: "+
f);if(void 0==f)a=[],k={wl:k,e:b.envIndex,c:b.courseIndex,uId:currentPlayerId},a.push(k),f=JSON.stringify(a),log.debug("recArray: "+f);else{a=JSON.parse(f);log.debug("recArray: "+a);k={wl:k,e:b.envIndex,c:b.courseIndex,uId:currentPlayerId};c=!1;for(f=0;f<a.length;f++)if(a[f].e==b.envIndex&&a[f].c==b.courseIndex){c=!0;a[f]=k;if(1==a.length)break;if(0<f)if(a[f].wl>a[f-1].wl){if(f==a.length-1)break;for(g=f+1;g<a.length;g++)if(a[g-1].wl>a[g].wl)e=a[g],a[g]=a[g-1],a[g-1]=e;else break}else for(g=f-1;0<=
g;g--)if(a[g+1].wl<a[g].wl)e=a[g],a[g]=a[g+1],a[g+1]=e;else break;else for(g=f+1;g<a.length;g++)if(a[g-1].wl>a[g].wl)e=a[g],a[g]=a[g-1],a[g-1]=e;else break}0==c&&(log.debug("recArrayLNbefore: "+a.length),a.push(k),log.debug("recArrayLNafter: "+a.length));f=JSON.stringify(a);log.debug("titleKeyVal: "+f)}server.SetTitleInternalData({Key:"RecSubDivision"+p,Value:f});p={TrophyCount:d,League:h};return{Result:p}};
handlers.startGame=function(b,l){var a="01",e=50,d=0,h=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});if(0!=h.Statistics.length){for(var a=h.Statistics[0].Value.toString(),a=Number(a).toString(2),e=a.length,k=0;k<a.length;k++)"1"==a[k]&&d++;e=Math.round(d/e*100)}log.debug("wlStatBeforeshiftandAdd "+a);a+="0";log.debug("wlStatBeforeshift "+a);20<a.length&&a.shift();log.debug("wlStat "+a);h=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]});
k=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});d=0;0!=k.Statistics.length&&(d=k.Statistics[0].Value);h=JSON.parse(h.Data.SubdivisionTrophyRanges);log.debug("SubdivisionTrophyRanges "+h);for(var f,k=0;k<h.subdivisions.length;k++)if(d<h.subdivisions[k]){f=k;break}log.debug("user is in subdivision "+f);f=server.GetTitleInternalData({Keys:"RecSubDivision"+f}).Data["RecSubDivision"+f];log.debug("recPool "+f);if(void 0==f)return generateErrObj("Recording pool for this subdivision is null");
log.debug("parsing to json array");var c=JSON.parse(f),g=c[c.length-1].uId;f=c[c.length-1].e;h=c[c.length-1].c;for(k=0;k<c.length;k++)if(e<c[k].wl){g=c[k].uId;f=c[k].e;h=c[k].c;break}e=[f+"_"+h+"_RecPos",f+"_"+h+"_RecRot",f+"_"+h+"_RecHeader"];log.debug("requesting "+e);e=server.GetUserReadOnlyData({PlayFabId:g,Keys:e});if(void 0==e)return generateErrObj("Did not find recording for this user: "+g);k=server.GetPlayerCombinedInfo({PlayFabId:g,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,
GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}});d-=30;0>=d&&(d=0);a=parseInt(a,2);log.debug("updating WL to:  "+a);g=calculateLeague(d);c=[];c.push({StatisticName:"WinLoss",Version:"0",Value:a});c.push({StatisticName:"TrophyCount",Version:"0",Value:d});c.push({StatisticName:"League",Version:"0",Value:g});log.debug("updatingStats: "+c);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});
return{Result:"OK",PosData:e.Data[f+"_"+h+"_RecPos"].Value,RotData:e.Data[f+"_"+h+"_RecRot"].Value,HeaderData:e.Data[f+"_"+h+"_RecHeader"].Value,Opp:k.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateTrophyCount=function(b,l){var a=0,e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=e.Statistics.length&&(a=e.Statistics[0].Value);"rStart"==b.val&&(a-=30);0>a&&(a=0);"rWin"==b.val&&(a+=60);if("rLose"==b.val)return{val:a};e=[];e.push({StatisticName:"TrophyCount",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});if("rWin"==b.val)return{val:a}};
handlers.initServerData=function(b){b=[];var l={StatisticName:"TrophyCount",Version:"0",Value:"0"};b.push(l);l={StatisticName:"League",Version:"0",Value:"0"};b.push(l);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=[];b.push("Decals");b.push("PaintJobs");b.push("Plates");b.push("Rims");b.push("WindshieldText");b=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:b});for(var l={0:"Owned"},a=0;a<b.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[a].ItemInstanceId,Data:l});b=[];b.push("FordFocus");b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b});l={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});l={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});l={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:3E3});server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:200})};
handlers.requestInventory=function(b){b=server.GetUserInventory({PlayFabId:currentPlayerId});for(var l=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),e=0;e<b.Inventory.length;e++)if("CarsProgress"==b.Inventory[e].CatalogVersion){log.debug("found "+b.Inventory[e].ItemId);b.Inventory[e].CustomData.Pr=recalculateCarPr(b.Inventory[e].CustomData,b.Inventory[e].ItemId,l,a);var d={};d.Pr=b.Inventory[e].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.Inventory[e].ItemInstanceId,Data:d})}return b};function generateFailObj(b){return{Result:"Failed",Message:b}}function generateErrObj(b){return{Result:"Error",Message:b}}function checkBalance(b,l,a,e){if("SC"==b){if(a<l)return generateFailObj("NotEnoughSC")}else if(e<l)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(b){td=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==td.Data.LeagueSubdivisions||void 0==td.Data.SubdivisionTrophyRanges)return 1;for(var l=JSON.parse(td.Data.LeagueSubdivisions).leagues,a=JSON.parse(td.Data.SubdivisionTrophyRanges).subdivisions,e=0;e<l.length;e++)if(!(Number(b)>Number(a[l[e]])))return e}
function recalculateCarPr(b,l,a,e){var d=0,h;h=void 0==a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<h.Catalog.length;a++)if(h.Catalog[a].ItemId==l){a=JSON.parse(h.Catalog[a].CustomData);d+=parseInt(a.basePr)+parseInt(a.prPerLvl)*(parseInt(b.CarLvl)-1);break}e=void 0==e?server.GetCatalogItems({CatalogVersion:"PartCards"}):e;b={Exhaust:b.ExhaustLvl,Engine:b.EngineLvl,Gearbox:b.GearboxLvl,Suspension:b.SuspensionLvl,Tires:b.TiresLvl,Turbo:b.TurboLvl};for(a=0;a<e.Catalog.length;a++)l=
JSON.parse(e.Catalog[a].CustomData),d+=parseInt(l.basePr)+parseInt(l.prPerLvl)*b[e.Catalog[a].ItemId];return d}
function GenerateBlackMarket(b){var l=server.GetCatalogItems({CatalogVersion:"PartCards"}),a={};a.BMTime=(new Date).getTime();var e=Math.floor(Math.random()*l.Catalog.length),d=JSON.parse(l.Catalog[e].CustomData);if(void 0==d)return generateErrObj("Part card "+l.Catalog[k].ItemId+" has no custom data.");a.BMItem0=l.Catalog[e].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy;var h=Math.floor(Math.random()*l.Catalog.length);h==e&&(h=l.Catalog.length-e-1);d=JSON.parse(l.Catalog[h].CustomData);
if(void 0==d)return generateErrObj("Part card "+l.Catalog[k].ItemId+" has no custom data.");a.BMItem1=l.Catalog[h].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy;for(var l=server.GetCatalogItems({CatalogVersion:"CarCards"}),d=[],h=[],k=0;k<l.Catalog.length;k++){e=JSON.parse(l.Catalog[k].CustomData);if(void 0==e)return generateErrObj("Car card "+l.Catalog[k].ItemId+" has no custom data.");"false"==e.rareCar?d.push(l.Catalog[k].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy):
h.push(l.Catalog[k].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy)}0>=d.length?(a.BMItem2=h[Math.floor(Math.random()*h.length)],a.BMItem3=h[Math.floor(Math.random()*h.length)]):0>=h.length?(a.BMItem2=d[Math.floor(Math.random()*d.length)],a.BMItem3=d[Math.floor(Math.random()*d.length)]):(a.BMItem2=d[Math.floor(Math.random()*d.length)],a.BMItem3=h[Math.floor(Math.random()*h.length)]);server.UpdateUserInternalData({PlayFabId:b,Data:a});k=[];k.push("BlackMarketResetMinutes");b=server.GetTitleData({PlayFabId:b,
Keys:k});a.BMTime=60*parseInt(b.Data.BlackMarketResetMinutes);return a}function GetCurrentBlackMarket(b,l){var a={},e=new Date,d=[];d.push("BlackMarketResetMinutes");d=server.GetTitleData({PlayFabId:b,Keys:d});a.BMTime=60*parseInt(d.Data.BlackMarketResetMinutes)-Math.floor((e.getTime()-l.Data.BMTime.Value)/1E3);for(e=0;4>e;e++)a["BMItem"+e]=l.Data["BMItem"+e].Value;return a}
handlers.purchaseBMItem=function(b,l){log.debug("purchasing item "+b.itemId+" from black market");if(0>b.itemId||3<b.itemId)return generateFailObj("invalid item index");var a=[];a.push("BMItem"+b.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),e=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+b.itemId].Value.split("_");log.debug("userArray: "+a);var d=e.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var h;h=2>b.itemId?"PartCards":"CarCards";var k=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),d=checkBalance(a[1],k,d,d);if("OK"!=d)return d;var f,c;log.debug("searching for: "+a[0]+" in "+h);for(d=0;d<e.Inventory.length;d++)if(e.Inventory[d].ItemId==a[0]&&e.Inventory[d].CatalogVersion==h){log.debug("found it!");f=e.Inventory[d].ItemInstanceId;void 0==e.Inventory[d].CustomData?(log.debug("no custom data. creating ..."),c={Amount:1}):void 0==e.Inventory[d].CustomData.Amount?c={Amount:1}:(c=Number(e.Inventory[d].CustomData.Amount)+
1,isNaN(c)&&(c=1),c={Amount:c});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:c});break}void 0==f&&(log.debug("cardInstance is undefined"),f=[],f.push(a[0]),f=server.GrantItemsToUser({CatalogVersion:h,PlayFabId:currentPlayerId,ItemIds:f}).ItemGrantResults[0].ItemInstanceId,void 0==f?generateErrObj("grantRequest denied"):(c={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:c})));f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:a[1],Amount:k});k=a[0]+"_"+a[1]+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];log.debug("generatedArray: "+k);e={};e["BMItem"+b.itemId]=k;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:e});c=[{ItemId:a[0],CatalogVersion:h,CustomData:c}];h={};h[f.VirtualCurrency]=f.Balance;a=b.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];d={Inventory:c,VirtualCurrency:h};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:d,BMItemChange:a}};
handlers.retrieveBlackMarket=function(b,l){var a=[];a.push("BMTime");for(var e=0;4>e;e++)a.push("BMItem"+e);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a});if(void 0==a.Data.BMTime)return log.debug("No user BM data detected; generating ..."),GenerateBlackMarket(currentPlayerId);e=new Date;log.debug("milliseconds passed: "+e.getTime());log.debug("BMTime: "+a.Data.BMTime.Value);var d=[];d.push("BlackMarketResetMinutes");d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:d});if(e.getTime()-
parseInt(a.Data.BMTime.Value)>6E4*parseInt(d.Data.BlackMarketResetMinutes))return log.debug("regenerating market"),GenerateBlackMarket(currentPlayerId);log.debug("get current market");return GetCurrentBlackMarket(currentPlayerId,a)};
handlers.updateCarCust=function(b,l){for(var a=server.GetUserInventory({PlayFabId:currentPlayerId}),e=[],d="-1",h={},k={PaintJobs:{itemOwned:"no",itemCustData:b.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:b.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:b.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:b.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",itemCustData:b.wsId,carItemId:"WindshieldId"}},f=0;f<a.Inventory.length;f++)a.Inventory[f].ItemId==
b.carId&&"CarsProgress"==a.Inventory[f].CatalogVersion&&(d=a.Inventory[f].ItemInstanceId),a.Inventory[f].ItemId in k&&(k[a.Inventory[f].ItemId].itemOwned="yes",k[a.Inventory[f].ItemId].itemCustData in a.Inventory[f].CustomData?h[k[a.Inventory[f].ItemId].carItemId]=k[a.Inventory[f].ItemId].itemCustData:log.debug("user doesn't own: "+a.Inventory[f].ItemId+" "+k[a.Inventory[f].ItemId].itemCustData));if("-1"==d)return generateFailObj("User does not own car with id: "+b.carId);for(var c in k)k.hasOwnProperty(c)&&
"no"==k[c].itemOwned&&e.push(c);if(h=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d,Data:h});a=[{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:h}];if(0<e.length)for(e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e}),d={0:"Owned"},f=0;f<e.ItemGrantResults.length;f++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:e.ItemGrantResults[f].ItemInstanceId,Data:d});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:a}}};
handlers.purchaseItems=function(b,l){log.debug("RETRIEVING USER INVENTORY");var a=server.GetUserInventory({PlayFabId:currentPlayerId}),e=a.VirtualCurrency.SC,d=a.VirtualCurrency.HC;log.debug("user currency: SC: "+e+" HC: "+d);switch(b.purchaseType){case "carUpgrade":log.debug("== carUpgrade request: carId: "+b.carId);log.debug("RETRIEVING CARDS CATALOGUE");for(var h=server.GetCatalogItems({CatalogVersion:"CarCards"}),k=!1,f,c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.carId&&"CarsProgress"==
a.Inventory[c].CatalogVersion){k=!0;log.debug("car is in user's inventory!");f=a.Inventory[c];break}for(var g,c=0;c<h.Catalog.length;c++)if(h.Catalog[c].ItemId==b.carId){g=JSON.parse(h.Catalog[c].CustomData);log.debug("cardInfo found!");break}if(void 0==g)return log.error("cardInfo undefined!"),g={Result:"Error",Message:"CardNotFoundForCarwithID: "+b.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data."};if(1==k){log.debug("user has car: "+b.carId+
"... upgrading");var p=parseInt(g.baseCurrCost)+parseInt(f.CustomData.CarLvl)*parseInt(g.currCostPerLvl),d=checkBalance(g.currType,p,e,d);if("OK"!=d)return d;log.debug("user has enough currency. Let's check for card balance");d=parseInt(g.baseCardCost)+parseInt(f.CustomData.CarLvl)*parseInt(g.cardCostPerLvl);log.debug("cardCost: "+d);for(var r=!1,q,c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.carId&&"CarCards"==a.Inventory[c].CatalogVersion){log.debug("consuming: "+a.Inventory[c].ItemInstanceId);
r=!0;try{if(void 0==a.Inventory[c].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");if(void 0==a.Inventory[c].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(a.Inventory[c].CustomData.Amount)>=d)a.Inventory[c].CustomData.Amount-=d,q={Amount:a.Inventory[c].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[c].ItemInstanceId,Data:q});else return generateFailObj("Insufficient cards for real: "+
a.Inventory[c].CustomData.Amount+" vs "+d)}catch(u){return log.debug("itemConsumptionResult.errorCode "+u),generateFailObj("Insufficient cards")}break}if(0==r)return generateFailObj("No cards found");log.debug("user has enough cards to purchase upgrade!");c=parseInt(f.CustomData.CarLvl)+1;a=recalculateCarPr(f.CustomData,f.ItemId,h,void 0);log.debug("upgrading to car lvl: "+c+" and pr: "+a);c={CarLvl:c,Pr:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemInstanceId,
Data:c});var m;0<p&&(m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g.currType,Amount:p}));log.debug("Upgrade Complete!");a=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:q},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:c}];g={};c={Inventory:a};void 0!=m&&(g[m.VirtualCurrency]=m.Balance,c.VirtualCurrency=g);g={Result:"OK",Message:"InventoryUpdate",InventoryChange:c}}else{log.debug("user doesn't have car: "+b.carId+"... looking for card");for(var r=
!1,t,c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.carId&&"CarCards"==a.Inventory[c].CatalogVersion){log.debug("consuming: "+a.Inventory[c].ItemInstanceId);r=!0;try{if(void 0==a.Inventory[c].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0==a.Inventory[c].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");if(Number(a.Inventory[c].CustomData.Amount)>=Number(g.baseCardCost))t=a.Inventory[c].ItemInstanceId,a.Inventory[c].CustomData.Amount-=
g.baseCardCost,q={Amount:a.Inventory[c].CustomData.Amount};else return generateFailObj("Insufficient cards: "+a.Inventory[c].CustomData.Amount+" vs "+g.baseCardCost+".")}catch(u){return generateFailObj("Insufficient cards: "+u)}break}if(0==r)return generateFailObj("No cards found");log.debug("user has enough cards to purchase car. Checking if enough currency is availabe");d=checkBalance(g.currType,g.baseCurrCost,e,d);if("OK"!=d)return d;c=[];c.push(b.carId);d=server.GrantItemsToUser({CatalogVersion:"CarsProgress",
PlayFabId:currentPlayerId,ItemIds:c});if(0==d.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:t,Data:q});0<g.baseCurrCost&&(m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:g.currType,Amount:g.baseCurrCost}));c={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",
GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:c});c={TiresLvl:"0",TurboLvl:"0",PaintId:g.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:c});c={PlatesId:"0",WindshieldId:"0",Pr:g.basePr};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,
Data:c});f=d=!1;for(var n,c=0;c<a.Inventory.length;c++)if("PaintJobs"==a.Inventory[c].ItemId){f=!0;log.debug("user has paintjobs");void 0!=a.Inventory[c].CustomData?(log.debug("user has paintjobs customData"),g.defaultPaintID in a.Inventory[c].CustomData?(log.debug("user has paintjob already"),d=!0):(log.debug("user doesn't have paintjob"),n={},n[g.defaultPaintID]="Owned")):(n={},n[g.defaultPaintID]="Owned");void 0!=n&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[c].ItemInstanceId,
Data:n});break}0==f&&(paintToGive=[],paintToGive.push("PaintJobs"),a=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),n={},n[g.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:n}));c={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:g.defaultPaintID,DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",
Pr:g.basePr};a=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:q},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:c}];0==d&&(c={},c[g.defaultPaintID]="Owned",a.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:c}));g={};c={Inventory:a};void 0!=m&&(g[m.VirtualCurrency]=m.Balance,c.VirtualCurrency=g);g={Result:"OK",Message:"InventoryUpdateNewCar",InventoryChange:c}}return g;case "partUpgrade":log.debug("Upgrading Part: "+b.partId+" on Car: "+b.carId);log.debug("Checking to see if car exists in catalog");
q=server.GetCatalogItems({CatalogVersion:"CarsProgress"});n=!1;for(c=0;c<q.Catalog.length;c++)if(q.Catalog[c].ItemId==b.carId){n=!0;break}if(0==n)return log.error("invalid car ID"),g={Result:"Error",Message:"car with ID: "+b.carId+" not found in catalog."};log.debug("Checking to see if part exists in catalog");q=server.GetCatalogItems({CatalogVersion:"PartCards"});n=!1;for(c=0;c<q.Catalog.length;c++)if(q.Catalog[c].ItemId==b.partId){g=JSON.parse(q.Catalog[c].CustomData);n=!0;break}if(0==n)return log.error("invalid part ID"),
g={Result:"Error",Message:"part with ID: "+b.partId+" not found in catalog."};log.debug("Checking to see if user has car: "+b.carId);k=!1;for(c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.carId&&"CarsProgress"==a.Inventory[c].CatalogVersion){k=!0;log.debug("car is in user's inventory!");f=a.Inventory[c];break}if(0==k)return generateFailObj("car with ID: "+b.carId+" not found in user inventory.");log.debug("Checking to see if user has part and or has enough parts");n=!1;for(c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==
b.partId&&"PartCards"==a.Inventory[c].CatalogVersion){n=!0;log.debug("part is in user's inventory!");h={};k={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"};log.debug("calculating "+b.partId+" cost and modifying "+k[b.partId]);t=parseInt(g.baseCardCost,10)+parseInt(f.CustomData[k[b.partId]],10)*parseInt(g.cardCostPerLvl,10);var p=Number(g.baseCurrCost)+Number(f.CustomData[k[b.partId]])*Number(g.currCostPerLvl),v=parseInt(f.CustomData[k[b.partId]])+
1;h[k[b.partId]]=v;f.CustomData[k[b.partId]]=v;log.debug("we need: "+t+" cards and "+p+" money => base: "+parseInt(g.baseCurrCost)+" lvls: "+parseInt(f.CustomData[k[b.partId]])+" perLvlCost: "+parseInt(g.currCostPerLvl)+" equalling: "+parseInt(f.CustomData[k[b.partId]],10)*parseInt(g.currCostPerLvl,10));d=checkBalance(g.currType,p,e,d);if("OK"!=d)return d;log.debug("consuming part instance: "+a.Inventory[c].ItemInstanceId);try{if(void 0!=a.Inventory[c].CustomData&&void 0!=a.Inventory[c].CustomData.Amount&&
a.Inventory[c].CustomData.Amount>=t)a.Inventory[c].CustomData.Amount-=t,r={Amount:a.Inventory[c].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[c].ItemInstanceId,Data:r});else return generateFailObj("Insufficient cards")}catch(u){return log.debug("itemConsumptionResult.errorCode "+u),generateFailObj("Insufficient cards")}break}if(0==n)return generateFailObj("Part not found");0<p&&(m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:g.currType,Amount:p}));a=recalculateCarPr(f.CustomData,f.ItemId,void 0,q);h.Pr=a;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemInstanceId,Data:h});a=[{ItemId:b.partId,CatalogVersion:"PartCards",CustomData:r},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:h}];log.debug("succesfully upgraded part!");g={};c={Inventory:a};void 0!=m&&(g[m.VirtualCurrency]=m.Balance,c.VirtualCurrency=g);return g={Result:"OK",Message:"InventoryUpdatePart",
InventoryChange:c};case "custPurchase":log.debug("Purchasing Customization: "+b.custId+" with val: "+b.custVal);log.debug("Checking to see if customization exists in catalog");f=server.GetCatalogItems({CatalogVersion:"Customization"});g=0;m="SC";for(c=0;c<f.Catalog.length;c++)if(f.Catalog[c].ItemId==b.custId){v=f.Catalog[c];g=JSON.parse(f.Catalog[c].CustomData);c=b.custVal+",Cost";m=g[b.custVal+",Curr"];g=g[c];d=checkBalance(m,g,e,d);if("OK"!=d)return d;log.debug("custCurr: "+m);log.debug("custPrice: "+
g);break}if(void 0==v)return log.error("Customization does not exist in catalog"),g={Result:"Error",Message:"Customization does not exist in catalog."};log.debug("Checking to see if user has said customization");for(var w,c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.custId){log.debug("user has customization category!");w=a.Inventory[c];k=a.Inventory[c].ItemInstanceId;if(void 0!=w.CustomData&&String(b.custVal)in w.CustomData)return generateFailObj("User already has this customization.");
break}if(void 0==w){log.info("user doesn't have customization category. Granting ... ");c=[];c.push(b.custId);a=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:c});if(0==a.ItemGrantResults[0].Result)return log.error("something went wrong while granting user customization class object"),g={Result:"Error",Message:"something went wrong while granting user customization class object."};k=a.ItemGrantResults[0].ItemInstanceId}a={};a[String(b.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:k,Data:a});a=[{ItemId:b.custId,CatalogVersion:"Customization",CustomData:a}];0<g?(m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:m,Amount:g}),g={},g[m.VirtualCurrency]=m.Balance,c={Inventory:a,VirtualCurrency:g}):c={Inventory:a};return g={Result:"OK",Message:"InventoryUpdateNewCustomization",InventoryChange:c};case "softCurrencyPurchase":log.debug("Purchasing pack: "+b.packId);log.debug("Checking to see if pack exists in catalog");m=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});
a=!1;for(c=f=0;c<m.Catalog.length;c++)if(m.Catalog[c].ItemId==b.packId){f=m.Catalog[c].VirtualCurrencyPrices.HC;g=JSON.parse(m.Catalog[c].CustomData);a=!0;break}if(0==a)return g={Result:"Error",Message:"pack with ID: "+b.packId+" not found in catalog."};if(0>=f)return g={Result:"Error",Message:"pack with ID: "+b.packId+" shouldn't have negative cost."};if(f>d)return generateFailObj("Not enough HC.");m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:f});a=
server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:g.quantity});g={};g[a.VirtualCurrency]=a.Balance;g[m.VirtualCurrency]=m.Balance;return g={Result:"OK",Message:"SoftCurrencyPurchased",InventoryChange:{VirtualCurrency:g}};default:log.debug("invalid purchase parameter")}};
handlers.giveMoney=function(b){b=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.amount});var l={};l[b.VirtualCurrency]=b.Balance;return{Result:"OK",Message:"CurrencyChanged",InventoryChange:{VirtualCurrency:l}}};
handlers.grantItems=function(b){for(var l=server.GetUserInventory({PlayFabId:currentPlayerId}),a,e=!1,d=0;d<l.Inventory.length;d++)if(l.Inventory[d].ItemId==b.itemId&&l.Inventory[d].CatalogVersion==b.catalogId){log.debug("adding amount to: "+l.Inventory[d].ItemInstanceId);a=void 0==l.Inventory[d].CustomData?b.amount:void 0==l.Inventory[d].CustomData.Amount?b.amount:isNaN(Number(l.Inventory[d].CustomData.Amount))?b.amount:Number(l.Inventory[d].CustomData.Amount)+b.amount;a={Amount:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:l.Inventory[d].ItemInstanceId,Data:a});e=!0;break}0==e&&(l=[],l.push(b.itemId),l=server.GrantItemsToUser({CatalogVersion:b.catalogId,PlayFabId:currentPlayerId,ItemIds:l}),a={Amount:b.amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:l.ItemGrantResults[0].ItemInstanceId,Data:a}));return{Result:"OK",Message:"InventoryUpdated",InventoryChange:{Inventory:[{ItemId:b.itemId,CatalogVersion:b.catalogId,CustomData:a}]}}};
handlers.openChest=function(b,l){var a=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<b.currCost){if("OK"!=checkBalance(b.currType,b.currCost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.currType,Amount:b.currCost})}for(var e in b.currencyReq)0<b.currencyReq[e]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:e,Amount:b.currencyReq[e]});var d;
for(e in b.carCardsRequest)if(log.debug(e+" : "+b.carCardsRequest[e]),b.carCardsRequest.hasOwnProperty(e)){d=!1;log.debug("looking for: "+e);for(var h=0;h<a.Inventory.length;h++)if(a.Inventory[h].ItemId==e&&"CarCards"==a.Inventory[h].CatalogVersion){log.debug("adding amount to: "+a.Inventory[h].ItemInstanceId);d=void 0==a.Inventory[h].CustomData?Number(b.carCardsRequest[e]):void 0==a.Inventory[h].CustomData.Amount?Number(b.carCardsRequest[e]):isNaN(Number(a.Inventory[h].CustomData.Amount))?Number(b.carCardsRequest[e]):
Number(a.Inventory[h].CustomData.Amount)+Number(b.carCardsRequest[e]);d={Amount:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[h].ItemInstanceId,Data:d});d=!0;break}0==d&&(h=[e],h=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:h}),d={Amount:b.carCardsRequest[e]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:d}))}for(e in b.partCardsRequest)if(log.debug(e+
" : "+b.partCardsRequest[e]),b.partCardsRequest.hasOwnProperty(e)){d=!1;log.debug("looking for: "+e);for(h=0;h<a.Inventory.length;h++)if(a.Inventory[h].ItemId==e&&"PartCards"==a.Inventory[h].CatalogVersion){log.debug("adding amount to: "+a.Inventory[h].ItemInstanceId);d=void 0==a.Inventory[h].CustomData?Number(b.partCardsRequest[e]):void 0==a.Inventory[h].CustomData.Amount?Number(b.partCardsRequest[e]):isNaN(Number(a.Inventory[h].CustomData.Amount))?Number(b.partCardsRequest[e]):Number(a.Inventory[h].CustomData.Amount)+
Number(b.partCardsRequest[e]);d={Amount:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[h].ItemInstanceId,Data:d});d=!0;break}0==d&&(h=[e],h=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:h}),d={Amount:b.partCardsRequest[e]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:d}))}return{Result:"OK",Message:"InventoryUpdated",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId})}};
handlers.buyChest=function(b,l){var a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(b.curr,b.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");var a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.cost}),e={};e[a.VirtualCurrency]=a.Balance;return{Result:"OK",Message:"ChestBought",InventoryChange:{VirtualCurrency:e}}};handlers.getServerTime=function(b,l){return{time:new Date}};
