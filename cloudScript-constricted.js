function checkCarDataValidity(c,k){if(void 0==c.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a});for(var d=0,e=0;e<k.Catalog.length;e++)if(k.Catalog[e].ItemId==c.ItemId){var b=
JSON.parse(k.Catalog[e].CustomData),d=parseInt(b.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:a})}catch(g){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:d}}return"OK"}function generateFailObj(c){return{Result:"Failed",Message:c}}
function generateErrObj(c){return{Result:"Error",Message:c}}
function CheckMaintenanceAndVersion(c){var k=!1,a="A.0.0.1";void 0!=c&&(k=c.debug,a=c.cVersion);if(void 0==a)return"update";c=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var d=c.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(d=c.Data.MinimumGameVersionActual_IOS);if(void 0==d)return"maintenance";for(var e=!1,d=d.split("."),b=0;3>b;b++){var g=0;a.length>b+1&&(g=Number(a[b+1]));var f=0;d.length>b&&
(f=Number(d[b]));if(g!=f){g<f&&(e=!0);break}}return 1==e?"update":1==k?"OK":c.Data.Maintenance?"false"==c.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(c){return"maintenance"==c?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(c,k){return{Result:"OK",Message:c,InventoryChange:k}}
function updateCurrencySpentStatistic(c,k){var a=[],d,e=0,b=Number(k);if(!(isNaN(b)||0>=b)&&("SC"==c&&(d="MoneySpent"),"HC"==c&&(d="GoldSpent"),void 0!=d)){var g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:[d]});0<g.Statistics.length&&(e=Number(g.Statistics[0].Value));a.push({StatisticName:d,Version:"0",Value:e+b});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a})}}
function checkBalance(c,k,a,d){if("SC"==c){if(a<k)return generateFailObj("NotEnoughSC")}else if(d<k)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(c){var k=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==k.Data.LeagueSubdivisions||void 0==k.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(k.Data.LeagueSubdivisions).leagues,k=JSON.parse(k.Data.SubdivisionTrophyRanges).subdivisions,d=0;d<a.length;d++)if(!(Number(c)>Number(k[a[d]])))return d;return a.length-1}
function recalculateCarPr(c,k,a,d){var e=0,b;b=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<b.Catalog.length;a++)if(b.Catalog[a].ItemId==k){e=JSON.parse(b.Catalog[a].CustomData);e=parseInt(e.basePr)+getObjectValueFromLevel(e,"prPerLvl",c.CarLvl);break}d=void 0===d?server.GetCatalogItems({CatalogVersion:"PartCards"}):d;c={Exhaust:c.ExhaustLvl,Engine:c.EngineLvl,Gearbox:c.GearboxLvl,Suspension:c.SuspensionLvl,Tires:c.TiresLvl,Turbo:c.TurboLvl};for(a=0;a<d.Catalog.length;a++)k=
JSON.parse(d.Catalog[a].CustomData),e+=getObjectValueFromLevel(k,"prPerLvl",Number(c[d.Catalog[a].ItemId]));return e}
function GenerateBlackMarket(c){var k=1,a=server.GetPlayerStatistics({PlayFabId:c,StatisticNames:["League"]});0!=a.Statistics.length&&(k=a.Statistics[0].Value.toString());0>=Number(k)&&(k=1);for(var d=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:c,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),e=JSON.parse(a.Data.BlackMarketRarityBias),b,g=[],f=[],h=[],l=0;l<d.Catalog.length;l++){b=JSON.parse(d.Catalog[l].CustomData);if(void 0==b)return generateErrObj("Part card "+
d.Catalog[l].ItemId+" has no custom data.");0==b.rarity&&g.push(d.Catalog[l].ItemId+"_"+b.BMCurrType+"_"+b.BMbasePrice+"_0_"+b.BMpriceIncrPerBuy);1==b.rarity&&f.push(d.Catalog[l].ItemId+"_"+b.BMCurrType+"_"+b.BMbasePrice+"_0_"+b.BMpriceIncrPerBuy);2==b.rarity&&h.push(d.Catalog[l].ItemId+"_"+b.BMCurrType+"_"+b.BMbasePrice+"_0_"+b.BMpriceIncrPerBuy)}d={};d.BMTime=(new Date).getTime();l=Math.floor(Math.random()*g.length);d.BMItem0=g[l];2<=g.length&&g.splice(l,1);Math.floor(100*Math.random())<Number(e.parts[2])?
g=h:(l=Number(e.parts[0])+Number(e.parts[1]),Math.floor(Math.random()*l)>=Number(e.parts[0])&&(g=f));d.BMItem1=g[Math.floor(Math.random()*g.length)];b=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var n,g=[],f=[],h=[],l=0;l<b.Catalog.length;l++){n=JSON.parse(b.Catalog[l].CustomData);if(void 0==n)return generateErrObj("Car card "+b.Catalog[l].ItemId+" has no custom data.");Number(n.unlockedAtRank)>=Number(k)+1||("0"==n.rarity&&g.push(b.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+
"_0_"+n.BMpriceIncrPerBuy),"1"==n.rarity&&f.push(b.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy),"2"==n.rarity&&h.push(b.Catalog[l].ItemId+"_"+n.BMCurrType+"_"+n.BMbasePrice+"_0_"+n.BMpriceIncrPerBuy))}k=Math.floor(Math.random()*g.length);d.BMItem2=g[k];2<=g.length&&g.splice(k,1);0>=f.length&&(0>=h.length?h=f=g:f=h);0>=h.length&&(h=f);Math.floor(100*Math.random())<Number(e.cars[2])?g=h:(l=Number(e.cars[0])+Number(e.cars[1]),Math.floor(Math.random()*l)>=Number(e.cars[0])&&
(g=f));k=Math.floor(Math.random()*g.length);d.BMItem3=g[k];server.UpdateUserInternalData({PlayFabId:c,Data:d});d.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return d}function GetCurrentBlackMarket(c,k){var a={},d=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:c,Keys:e});a.BMTime=60*parseInt(e.Data.BlackMarketResetMinutes)-Math.floor((d.getTime()-k.Data.BMTime.Value)/1E3);for(d=0;4>d;d++)a["BMItem"+d]=k.Data["BMItem"+d].Value;return a}
function GetValueFromStatistics(c,k,a){for(var d,e=0;e<c.length;e++)c[e].StatisticName===k&&(d=c[e]);return void 0===d?void 0!==a?a:0:Number(d.Value)}function GetVersionFromStatistics(c,k,a){for(var d,e=0;e<c.length;e++)c[e].StatisticName===k&&(d=c[e]);return void 0===d?void 0!==a?a:0:Number(d.Version)}function getCatalogItem(c,k){for(var a=server.GetCatalogItems({CatalogVersion:c}),d=0;d<a.Catalog.length;d++)if(a.Catalog[d].ItemId===k)return a.Catalog[d]}
function getObjectValueFromLevel(c,k,a,d){d||(d=0);if(!c[k]||!c[k].length)return d;var e=Number(c[k].length);a>=e&&(a=e-1);return Number(c[k][a])||d}function GiveUserPart(c,k,a,d){GiveUserCard(c,"PartsCards",k,a,d)}function GiveUserCarCard(c,k,a,d){GiveUserCard(c,"CarCards",k,a,d)}
function GiveUserCard(c,k,a,d,e){a=Number(a)<Number(d)?Number(a)+Math.floor(Math.random()*(Number(d)-Number(a))):Number(a);log.debug("cardsAmount: "+a);var b,g;for(d=0;d<e.Inventory.length;d++)if(e.Inventory[d].ItemId==c&&e.Inventory[d].CatalogVersion==k){b=e.Inventory[d].ItemInstanceId;g=void 0==e.Inventory[d].CustomData?a:void 0==e.Inventory[d].CustomData.Amount?a:isNaN(Number(e.Inventory[d].CustomData.Amount))?a:Number(e.Inventory[d].CustomData.Amount)+Number(g);break}if(void 0==b&&(g=a,b=[],b.push(c),
b=server.GrantItemsToUser({CatalogVersion:k,PlayFabId:e.PlayFabId,ItemIds:b}).ItemGrantResults[0].ItemInstanceId,void 0===b))return generateErrObj("grantRequest denied");a={Amount:g};log.debug("new amount is: "+g);server.UpdateUserInventoryItemCustomData({PlayFabId:e.PlayFabId,ItemInstanceId:b,Data:a});return{ItemId:c,CatalogVersion:k,CustomData:a}}
handlers.buyChest=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(c.curr,c.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<c.cost){a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.curr,Amount:c.cost});updateCurrencySpentStatistic(c.curr,c.cost);var d={};d[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",
{VirtualCurrency:d})}return generateInventoryChange("ChestBought",{})};
handlers.claimDailyMission=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a=Number(c.mIdx),d=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==d.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e=JSON.parse(e.Data.DailyMissionData),b=e.missionData[a].split("_"),d=JSON.parse(d.Data.DailyMissionStatus.Value),
g=d.dailyMissionClaimStatus;if(a>=g.length)return generateErrObj("Unlock index is out of bounds of playerData claim mission status array");if(1==g[a])return generateFailObj("Mission already claimed");g[a]=1;d={DailyMissionStatus:JSON.stringify({DailyStatus:d.DailyStatus,dailyMissionClaimStatus:g,timeStamp:d.timeStamp})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});if(a>=e.missionData.length)return generateErrObj("Unlock index is out of bounds of titleData claim mission reward array");
a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b[1],Amount:Number(b[2])});e={};e[a.VirtualCurrency]=a.Balance;return generateInventoryChange("MissionClaimed",{VirtualCurrency:e})};
handlers.endDaily=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==a.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e;tParsed=JSON.parse(d.Data.DailyMissionData);e=Number(tParsed.minutesToRefresh);for(var b=JSON.parse(a.Data.DailyMissionStatus.Value),
a=b.dailyMissionClaimStatus,g,d=-1,f=0;f<tParsed.missionData.length;f++)g=tParsed.missionData[f].split("_"),4>g.length&&generateErrObj("Title data is invalid!"),"OFF"==g[3]&&(a[f]=-1);for(f=0;f<b.dailyMissionClaimStatus.length;f++)if(-1!=a[f]&&0==a[f])return generateErrObj("Not all missions were claimed!");a=[0,0,0,0,0,0,0,0];f=new Date;f.getTime()-Number(b.timeStamp)>6E4*Number(e)?(g=2,f=f.getTime()):(g=0,d=60*Number(e)-Math.floor((f.getTime()-Number(b.timeStamp))/1E3),f=b.timeStamp);f={DailyMissionStatus:JSON.stringify({DailyStatus:g,
dailyMissionClaimStatus:a,timeStamp:f})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:f});e=server.GetUserInventory({PlayFabId:currentPlayerId});for(var h in c.currencyReq)0<c.currencyReq[h]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h,Amount:c.currencyReq[h]});for(h in c.carCardsRequest)if(c.carCardsRequest.hasOwnProperty(h)){b=!1;for(f=0;f<e.Inventory.length;f++)if(e.Inventory[f].ItemId==h&&"CarCards"==e.Inventory[f].CatalogVersion){b=void 0==e.Inventory[f].CustomData?
Number(c.carCardsRequest[h]):void 0==e.Inventory[f].CustomData.Amount?Number(c.carCardsRequest[h]):isNaN(Number(e.Inventory[f].CustomData.Amount))?Number(c.carCardsRequest[h]):Number(e.Inventory[f].CustomData.Amount)+Number(c.carCardsRequest[h]);b={Amount:b};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[f].ItemInstanceId,Data:b});b=!0;break}0==b&&(f=[h],f=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:f}),b={Amount:c.carCardsRequest[h]},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:b}))}for(h in c.partCardsRequest)if(c.partCardsRequest.hasOwnProperty(h)){b=!1;for(f=0;f<e.Inventory.length;f++)if(e.Inventory[f].ItemId==h&&"PartCards"==e.Inventory[f].CatalogVersion){b=void 0==e.Inventory[f].CustomData?Number(c.partCardsRequest[h]):void 0==e.Inventory[f].CustomData.Amount?Number(c.partCardsRequest[h]):isNaN(Number(e.Inventory[f].CustomData.Amount))?Number(c.partCardsRequest[h]):
Number(e.Inventory[f].CustomData.Amount)+Number(c.partCardsRequest[h]);b={Amount:b};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[f].ItemInstanceId,Data:b});b=!0;break}0==b&&(f=[h],f=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:f}),b={Amount:c.partCardsRequest[h]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:b}))}return{Result:"OK",
Message:"DailyCompleted",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId}),DailyStatus:{status:g,claimStatus:a,timeRemaining:d}}};
handlers.endGame=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),a=0,e,b=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=b.Statistics.length&&(a=b.Statistics[0].Value,1==c.debug&&log.debug("getting trophy count "+b.Statistics[0].Value));e=a=Number(a);var g=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose",
"trophyWin","LastGameOutcome","LatestStreak"]}),f;f=void 0==g.Data.trophyLose||void 0==g.Data.trophyWin?45:Number(g.Data.trophyLose.Value)+Number(g.Data.trophyWin.Value);var b=0,h="Loss";void 0!=g.Data.LatestStreak&&(b=Number(g.Data.LatestStreak.Value));1==isNaN(b)&&(b=0);void 0!=g.Data.LatestStreak&&(h=g.Data.LastGameOutcome.Value);void 0==h&&(h="Loss");g={quitLastGame:"false",LastGameOutcome:"Loss"};"rWin"==c.outcome&&(a+=f,g.LastGameOutcome="Win","Loss"==h?b=1:b++);g.LatestStreak=b;server.UpdateUserInternalData({PlayFabId:currentPlayerId,
Data:g});f=JSON.parse(c.recordingHeader);var l=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Wins","TotalGamesCompleted","LongestWinStreak","BestDriftScore","HighestLeagueReached"]}).Statistics,h=GetValueFromStatistics(l,"TotalGamesCompleted",0),h=Number(h)+1,g=GetValueFromStatistics(l,"Wins",0);"rWin"==c.outcome&&(g=Number(g)+1);var n=GetValueFromStatistics(l,"LongestWinStreak",0);GetVersionFromStatistics(l,"LongestWinStreak",0);Number(n)<b&&(n=b);var p=GetValueFromStatistics(l,
"BestDriftScore",0);Number(f.Score)>p&&(p=Number(f.Score));b=calculateLeague(a);l=GetValueFromStatistics(l,"HighestLeagueReached",1);b>l&&(l=b);var r=[];r.push({StatisticName:"TrophyCount",Value:a});r.push({StatisticName:"League",Value:b});r.push({StatisticName:"Wins",Value:g});r.push({StatisticName:"TotalGamesCompleted",Value:h});r.push({StatisticName:"LongestWinStreak",Value:n});r.push({StatisticName:"BestDriftScore",Value:p});r.push({StatisticName:"HighestLeagueReached",Value:l});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:r});if(100>=Number(f.Score))return a={TrophyCount:a,League:b},{Result:a};h=JSON.parse(d.Data.SubdivisionTrophyRanges);d=43;for(f=0;f<h.subdivisions.length;f++)if(e<h.subdivisions[f]){d=f;break}e=[];e.push({Key:c.envIndex+"_"+c.courseIndex+"_RecPos",Value:c.recordingPos});e.push({Key:c.envIndex+"_"+c.courseIndex+"_RecRot",Value:c.recordingRot});e.push({Key:c.envIndex+"_"+c.courseIndex+"_RecHeader",Value:c.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e});
e=server.GetTitleInternalData({Key:"RecSubDivision"+d}).Data["RecSubDivision"+d];if(void 0==e)e=[],h={e:c.envIndex,c:c.courseIndex,uId:currentPlayerId},e.push(h);else{e=JSON.parse(e);h={e:c.envIndex,c:c.courseIndex,uId:currentPlayerId};g=!1;for(f=n=0;f<e.length;f++)e[f].uId==currentPlayerId&&n++;if(2<n)return a={TrophyCount:a,League:b},{Result:a};for(f=0;f<e.length;f++)e[f].e==c.envIndex&&e[f].c==c.courseIndex&&(g=!0,e[f]=h);0==g&&e.push(h)}e=JSON.stringify(e);server.SetTitleInternalData({Key:"RecSubDivision"+
d,Value:e});a={TrophyCount:a,League:b};return{Result:a}};
function UpdateExperience(c,k,a,d,e,b){c=JSON.parse(getCatalogItem(c,k).CustomData)[a];k=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;k=k[k.length-1];b=b||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;b=GetValueFromStatistics(b,"Experience",0);if(b>=k)return k;if(isNaN(Number(c)))a=Number(c.length),d>=a&&(d=a-1),d=Number(c[d]);else if(d=Number(c),0===d)return b;b=Math.min(b+d,k);if(!e)return b;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:b}]});return b}
handlers.generateDaily=function(c,k){var a,d=new Date;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var e=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(e.DailyStatus);if(0==a){var d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),b;tParsed=JSON.parse(d.Data.DailyMissionData);b=Number(tParsed.minutesToRefresh);d=new Date;d.getTime()-Number(e.timeStamp)>6E4*Number(b)&&(a=1)}if(1!=a)return generateErrObj("DailyStatus is: "+
a+". Should be 1")}a=2;d=d.getTime();a={DailyMissionStatus:JSON.stringify({DailyStatus:a,dailyMissionClaimStatus:[0,0,0,0,0,0,0,0],timeStamp:d})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK"}};
handlers.getDailyMissionStatus=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d,a=[0,0,0,0,0,0,0,0],e=-1;d=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=d.Data.DailyMissionStatus){var b=JSON.parse(d.Data.DailyMissionStatus.Value);d=Number(b.DailyStatus);var g=a.length;g>b.dailyMissionClaimStatus.length&&(g=b.dailyMissionClaimStatus.length);for(var f=0;f<g;f++)a[f]=b.dailyMissionClaimStatus[f];
0==d&&(g=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),tParsed=JSON.parse(g.Data.DailyMissionData),g=Number(tParsed.minutesToRefresh),f=new Date,f.getTime()-Number(b.timeStamp)>6E4*Number(g)?(d=2,a=[0,0,0,0,0,0,0,0],b=f.getTime(),b={DailyStatus:d,dailyMissionClaimStatus:a,timeStamp:b},b=JSON.stringify(b),b={DailyMissionStatus:b},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b})):e=60*Number(g)-Math.floor((f.getTime()-Number(b.timeStamp))/1E3))}else d=2,
f=new Date,b=f.getTime(),b={DailyStatus:d,dailyMissionClaimStatus:a,timeStamp:b},b=JSON.stringify(b),b={DailyMissionStatus:b},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});return{Result:"OK",Message:" ",DailyStatus:{status:d,claimStatus:a,timeRemaining:e}}};
handlers.getLiveFeed=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetTitleInternalData({Keys:"LiveFeed"});return void 0==a||void 0==a.Data.LiveFeed?generateErrObj("No LivefeedFound"):{Result:"OK",Feed:a.Data.LiveFeed}};handlers.getServerTime=function(c,k){return{time:new Date}};
handlers.iapMade=function(c,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["IAPValue"]}).Statistics,d=Number(GetValueFromStatistics(a,"IAPValue",0));switch(c.bundle){case "co.tamatem.downshiftdrift.gold01":d+=99;break;case "co.tamatem.downshiftdrift.gold02":d+=499;break;case "co.tamatem.downshiftdrift.gold03":d+=2499;break;case "co.tamatem.downshiftdrift.gold04":d+=2499;break;case "co.tamatem.downshiftdrift.gold05":d+=4999;break;case "co.tamatem.downshiftdrift.gold06":d+=
9999;break;case "co.tamatem.downshiftdrift.bundle01":var d=d+599,e=server.GetUserInventory({PlayFabId:currentPlayerId}),b=server.GetCatalogItems({CatalogVersion:"BMBundleInfo"}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["HighestLeagueReached"]}).Statistics,a=Number(GetValueFromStatistics(a,"HighestLeagueReached",1)),g="bundle01league",g=10>a?g+"0"+a:g+a;1==c.debug&&log.debug("consuming: "+g);for(var f,a=0;a<b.Catalog.length;a++)if(b.Catalog[a].ItemId==g){f=JSON.parse(b.Catalog[a].CustomData);
break}if(void 0==f)return generateErrObj("Catalog item: "+g+" not found");for(a=0;a<e.Inventory.length;a++)if(e.Inventory[a].ItemId==c.bundle){try{server.ConsumeItem({PlayFabId:currentPlayerId,ItemInstanceId:e.Inventory[a].ItemInstanceId,ConsumeCount:1})}catch(n){return generateErrObj("err: "+n)}var h;h=[];var l={};if(void 0!=f.HCRange){1==c.debug&&log.debug("found HCRange: "+f.HCRange);b=f.HCRange.split(",");if(2<=b.length)b=Number(b[0])<Number(b[1])?Number(b[0])+Math.floor(Math.random()*(Number(b[1])-
Number(b[0]))):Number(b[0]);else return generateErrObj("Catalog data corrupt");0<b&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:b}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.SCRange){1==c.debug&&log.debug("found SCRange: "+f.SCRange);b=f.SCRange.split(",");if(2<=b.length)b=Number(b[0])<Number(b[1])?Number(b[0])+Math.floor(Math.random()*(Number(b[1])-Number(b[0]))):Number(b[0]);else return generateErrObj("Catalog data corrupt");
0<b&&(addUserCurrencyResult=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:b}),l[addUserCurrencyResult.VirtualCurrency]=addUserCurrencyResult.Balance)}if(void 0!=f.Engine)if(1==c.debug&&log.debug("found Engine: "+f.Engine),b=f.Engine.split(","),2<=b.length)b=GiveUserPart("Engine",b[0],b[1],e),h.push(b);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Exhaust)if(1==c.debug&&log.debug("found Exhaust: "+f.Exhaust),b=f.Exhaust.split(","),2<=b.length)b=
GiveUserPart("Exhaust",b[0],b[1],e),h.push(b);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Gearbox)if(1==c.debug&&log.debug("found Gearbox: "+f.Gearbox),b=f.Gearbox.split(","),2<=b.length)b=GiveUserPart("Gearbox",b[0],b[1],e),h.push(b);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Suspension)if(1==c.debug&&log.debug("found Suspension: "+f.Suspension),b=f.Suspension.split(","),2<=b.length)b=GiveUserPart("Suspension",b[0],b[1],e),h.push(b);else return generateErrObj("Catalog data corrupt");
if(void 0!=f.Tires)if(1==c.debug&&log.debug("found Tires: "+f.Tires),b=f.Tires.split(","),2<=b.length)b=GiveUserPart("Tires",b[0],b[1],e),h.push(b);else return generateErrObj("Catalog data corrupt");if(void 0!=f.Turbo)if(1==c.debug&&log.debug("found Turbo: "+f.Turbo),b=f.Turbo.split(","),2<=b.length)b=GiveUserPart("Turbo",b[0],b[1],e),h.push(b);else return generateErrObj("Catalog data corrupt");if(void 0!=f.CarCard&&(1==c.debug&&log.debug("found CarCard: "+f.CarCard),void 0!=f.CarCardAmount))if(1==
c.debug&&log.debug("found CarCardAmount: "+f.CarCardAmount),b=f.CarCardAmount.split(","),2<=b.length)b=GiveUserCarCard(f.CarCard,b[0],b[1],e),h.push(b);else return generateErrObj("Catalog data corrupt");void 0!=f.ChestModel&&1==c.debug&&log.debug("found ChestModel: "+f.ChestModel)}e=[];d={StatisticName:"IAPValue",Value:d};e.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});h={Inventory:h,VirtualCurrency:l};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:h};
default:1==c.debug&&log.debug("InvalidPurchaseParameter")}e=[];d={StatisticName:"IAPValue",Value:d};e.push(d);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e})};
handlers.initServerData=function(c){c=[];var k={StatisticName:"TrophyCount",Version:"0",Value:"0"};c.push(k);k={StatisticName:"League",Version:"0",Value:"0"};c.push(k);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});c=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var k={0:"Owned"},a=0;a<c.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[a].ItemInstanceId,Data:k});c=[];c.push("FordFocus");c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c});k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k});k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k});k={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k});k=[];k.push("Engine");k=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});k={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k})};
handlers.openChest=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<c.levelUpRewardIndex){var d=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),e={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}):d=a.Data.LastLevelReward.Value;var b=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,g=GetValueFromStatistics(a,"Experience",0);0==g&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var f=b.length,a=0;a<b.length;a++)if(!(g>=b[a])){f=a;break}if(Number(c.levelUpRewardIndex)<=Number(d))return generateFailObj("already got reward for level: "+d);if(Number(c.levelUpRewardIndex)<=Number(f))d=Number(c.levelUpRewardIndex),e.LastLevelReward=d,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:e}),a=""+d,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",PlayFabId:currentPlayerId,ItemIds:a});else return generateFailObj("You haven't reached this level yet")}d=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<c.currCost){if("OK"!=checkBalance(c.currType,c.currCost,d.VirtualCurrency.SC,d.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.currType,
Amount:c.currCost});updateCurrencySpentStatistic(c.currType,c.currCost)}for(var h in c.currencyReq)0<c.currencyReq[h]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h,Amount:c.currencyReq[h]});for(h in c.carCardsRequest)if(c.carCardsRequest.hasOwnProperty(h)){e=!1;for(a=0;a<d.Inventory.length;a++)if(d.Inventory[a].ItemId==h&&"CarCards"==d.Inventory[a].CatalogVersion){e=void 0==d.Inventory[a].CustomData?Number(c.carCardsRequest[h]):void 0==d.Inventory[a].CustomData.Amount?
Number(c.carCardsRequest[h]):isNaN(Number(d.Inventory[a].CustomData.Amount))?Number(c.carCardsRequest[h]):Number(d.Inventory[a].CustomData.Amount)+Number(c.carCardsRequest[h]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[h],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:c.carCardsRequest[h]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}for(h in c.partCardsRequest)if(c.partCardsRequest.hasOwnProperty(h)){e=!1;for(a=0;a<d.Inventory.length;a++)if(d.Inventory[a].ItemId==h&&"PartCards"==d.Inventory[a].CatalogVersion){e=void 0==d.Inventory[a].CustomData?Number(c.partCardsRequest[h]):void 0==d.Inventory[a].CustomData.Amount?Number(c.partCardsRequest[h]):isNaN(Number(d.Inventory[a].CustomData.Amount))?Number(c.partCardsRequest[h]):Number(d.Inventory[a].CustomData.Amount)+Number(c.partCardsRequest[h]);
e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.Inventory[a].ItemInstanceId,Data:e});e=!0;break}0==e&&(a=[h],a=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:a}),e={Amount:c.partCardsRequest[h]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:e}))}h=server.GetUserInventory({PlayFabId:currentPlayerId});c.chestId&&0>=c.levelUpRewardIndex&&
(d=UpdateExperience("Chests",c.chestId,"xpGain",0,!0),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["ChestsOpened"]}).Statistics,e=Number(GetValueFromStatistics(a,"ChestsOpened",0)),e++,a=[],a.push({StatisticName:"ChestsOpened",Value:e}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}),h.Experience=d);return generateInventoryChange("InventoryUpdated",h)};
handlers.purchaseBMItem=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>c.itemId||3<c.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+c.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),d=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+c.itemId].Value.split("_"),e=d.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var b;b=2>c.itemId?"PartCards":"CarCards";var g=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),e=checkBalance(a[1],g,e,e);if("OK"!=e)return e;for(var f,h,e=0;e<d.Inventory.length;e++)if(d.Inventory[e].ItemId==a[0]&&d.Inventory[e].CatalogVersion==b){f=d.Inventory[e].ItemInstanceId;void 0===d.Inventory[e].CustomData?h={Amount:1}:void 0===d.Inventory[e].CustomData.Amount?h={Amount:1}:(h=Number(d.Inventory[e].CustomData.Amount)+1,isNaN(h)&&(h=1),h={Amount:h});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:f,Data:h});break}void 0===f&&(f=[],f.push(a[0]),f=server.GrantItemsToUser({CatalogVersion:b,PlayFabId:currentPlayerId,ItemIds:f}).ItemGrantResults[0].ItemInstanceId,void 0===f?generateErrObj("grantRequest denied"):(h={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:h})));f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:g});updateCurrencySpentStatistic(a[1],g);g=a[0]+"_"+a[1]+"_"+a[2]+"_"+
(parseInt(a[3])+1)+"_"+a[4];d={};d["BMItem"+c.itemId]=g;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});h=[{ItemId:a[0],CatalogVersion:b,CustomData:h}];b={};b[f.VirtualCurrency]=f.Balance;a=c.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];e={Inventory:h,VirtualCurrency:b};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:e,BMItemChange:a}};
handlers.purchaseItems=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=server.GetUserInventory({PlayFabId:currentPlayerId}),e=d.VirtualCurrency.SC,b=d.VirtualCurrency.HC;switch(c.purchaseType){case "carUpgrade":return upgradeCar(c,d,e,b);case "partUpgrade":return upgradePart(c,d,e,b);case "custPurchase":for(var g=server.GetCatalogItems({CatalogVersion:"Customization"}),f,h=0,a="SC",l=0;l<g.Catalog.length;l++)if(g.Catalog[l].ItemId==c.custId){f=
g.Catalog[l];cardInfo=JSON.parse(g.Catalog[l].CustomData);h=c.custVal+",Cost";a=cardInfo[c.custVal+",Curr"];h=cardInfo[h];b=checkBalance(a,h,e,b);if("OK"!=b)return b;break}if(void 0==f)return generateErrObj("Customization does not exist in catalog.");for(var n,p,l=0;l<d.Inventory.length;l++)if(d.Inventory[l].ItemId==c.custId){n=d.Inventory[l];p=d.Inventory[l].ItemInstanceId;if(void 0!=n.CustomData&&String(c.custVal)in n.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
n){log.info("user doesn't have customization category. Granting ... ");b=[];b.push(c.custId);b=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:b});if(0==b.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");p=b.ItemGrantResults[0].ItemInstanceId}b={};b[String(c.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:p,Data:b});p=[{ItemId:c.custId,
CatalogVersion:"Customization",CustomData:b}];0<h?(b=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:h}),updateCurrencySpentStatistic(a,h),a={},a[b.VirtualCurrency]=b.Balance,l={Inventory:p,VirtualCurrency:a}):l={Inventory:p};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":h=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});p=!1;for(l=a=0;l<h.Catalog.length;l++)if(h.Catalog[l].ItemId==c.packId){a=h.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(h.Catalog[l].CustomData);p=!0;break}if(0==p)return generateErrObj("pack with ID: "+c.packId+" not found in catalog.");if(0>=a)return generateErrObj("pack with ID: "+c.packId+" shouldn't have negative cost.");if(a>b)return generateFailObj("Not enough HC.");b=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:a});updateCurrencySpentStatistic("HC",a);h=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});
a={};a[h.VirtualCurrency]=h.Balance;a[b.VirtualCurrency]=b.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:a});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(c){c=CheckMaintenanceAndVersion(c);return"OK"!=c?generateMaintenanceOrUpdateObj(c):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(c){c=server.GetUserInventory({PlayFabId:currentPlayerId});var k=Number(c.VirtualCurrency.SC);if(isNaN(k)||0>k)k=0;var a=Number(c.VirtualCurrency.HC);if(isNaN(a)||0>a)a=0;var d=[];d.push({StatisticName:"CurrentMoney",Version:"0",Value:k});d.push({StatisticName:"CurrentGold",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:d});for(var k=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),
d=!1,e=0;e<c.Inventory.length;e++)if("CarsProgress"==c.Inventory[e].CatalogVersion){var d=!0,b=checkCarDataValidity(c.Inventory[e],k);if("PlayFabError"==b||void 0===b)return generateErrObj("PlayfabError");"OK"==b?log.debug("Data for "+c.Inventory[e].ItemId+" OK"):c.Inventory[e].CustomData=b;c.Inventory[e].CustomData.Pr=recalculateCarPr(c.Inventory[e].CustomData,c.Inventory[e].ItemId,k,a);b={};b.Pr=c.Inventory[e].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[e].ItemInstanceId,
Data:b})}return!1===d?(c=[],c.push("FordFocus"),c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c}),k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k}),k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,
Data:k}),k={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:k}),generateErrObj("UserHasNoCars ... reiniting")):c};
handlers.retrieveBlackMarket=function(c,k){var a=CheckMaintenanceAndVersion(c);if(!0===c.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=[];d.push("BMTime");for(var e=0;4>e;e++)d.push("BMItem"+e);e=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:d});if(void 0===e.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var d=new Date,b=[];b.push("BlackMarketResetMinutes");b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:b});if(!0===c.reset){a="HC";e=200;d=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==d.Data.BlackMarketResetCost&&(e=d.Data.BlackMarketResetCost.split("_"),a=e[0],e=Number(e[1]));if(0<e){d=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,e,d.VirtualCurrency.SC,d.VirtualCurrency.HC))return generateFailObj("not enough money");d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:e});updateCurrencySpentStatistic(a,e);a=GenerateBlackMarket(currentPlayerId);e={};e[d.VirtualCurrency]=d.Balance;e={VirtualCurrency:e};
a.InventoryChange=e;return a}return GenerateBlackMarket(currentPlayerId)}return d.getTime()-parseInt(e.Data.BMTime.Value)>6E4*parseInt(b.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,e),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,e)};
handlers.rewardUsers=function(c,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,d=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),e=0;0>=d&&(a=Number(a)/3E3,e=Number(Math.floor(800*a)));d=Number(d)+e;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:d}]});return d};
handlers.startGame=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var d=server.GetTitleData({Key:"LeagueSubdivisions SubdivisionTrophyRanges TrophyGainRange TrophyLoseRange SubdivisionPrRanges TrophyDifferenceLimit".split(" ")}),a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TotalGames"]}).Statistics,a=GetValueFromStatistics(a,"TotalGames",0),a=Number(a)+1;1==c.debug&&log.debug("totalGamesStartedIs: "+a);var e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["TrophyCount"]}),b=0;0!=e.Statistics.length&&(b=e.Statistics[0].Value);for(var b=Number(b),g=JSON.parse(d.Data.SubdivisionTrophyRanges),f=JSON.parse(d.Data.LeagueSubdivisions),h=JSON.parse(d.Data.SubdivisionPrRanges),e=JSON.parse(d.Data.TrophyDifferenceLimit),l=Number(e.trophyReadjustRange),n=Number(e.maxDifference),p=e.subDivisionsToExclude,r=43,B=43,F,A=d.Data.TrophyGainRange.split("_"),E=d.Data.TrophyLoseRange.split("_"),e=Number(A[0]),d=Number(A[1]),A=Number(E[0]),E=Number(E[1]),
m=0;m<g.subdivisions.length;m++)if(b<Number(g.subdivisions[m])){r=m;m<g.subdivisions.length-1&&(B=m+1);break}F=Number(g.subdivisions[B])-Number(g.subdivisions[r]);0>=F&&(F=400);var u=server.GetTitleInternalData({Keys:"RecSubDivision"+r}).Data["RecSubDivision"+r],q=!1;void 0==u&&(q=!0);var y,t,z,I="noop",v="noop",m=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp","quitLastGame"]});t="false;";void 0!=m.Data.quitLastGame&&(t=m.Data.quitLastGame.Value);B=!1;void 0==t&&(t="false");
"true"==t&&(B=!0);if(void 0==m.Data||void 0==m.Data.lastOpp)v=I="noop";else for(t=m.Data.lastOpp.Value.split(","),m=0;m<t.length;m++)0==m&&(I=t[m]),1==m&&(v=t[m]);y=0==q?JSON.parse(u):[];var G=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>y.length&&(q=!0);var H=Array(y.length),C=0,u=Array(y.length);t=0;z=Array(y.length);for(var D=0,m=0;m<y.length;m++)1==q&&(G[5*Number(y[m].e)+Number(y[m].c)]=1),y[m].uId!=currentPlayerId&&(H[C]=y[m],C++,y[m].uId!=I&&(u[t]=y[m],t++,y[m].uId!=v&&(z[D]=y[m],D++)));if(1==q){q=[];
for(m=0;m<G.length;m++)0==G[m]&&q.push(m);q=q[Math.floor(Math.random()*q.length)];m=Math.floor(q/5);q%=5;v=server.GetTitleData({Keys:"MasterUser"});if(void 0!=v.Data.MasterUser&&(v=server.GetUserReadOnlyData({PlayFabId:v.Data.MasterUser,Keys:[m+"_"+q+"_RecPos",m+"_"+q+"_RecRot",m+"_"+q+"_RecHeader"]}),void 0!=v.Data&&void 0!=v.Data[m+"_"+q+"_RecPos"]&&void 0!=v.Data[m+"_"+q+"_RecRot"]&&void 0!=v.Data[m+"_"+q+"_RecHeader"])){f=!0;0==b?(b=d,f=!1):b-=A;1>=b&&(b=1);var w=[],b={StatisticName:"TrophyCount",
Version:"0",Value:b};w.push(b);b={StatisticName:"League",Version:"0",Value:x};w.push(b);b={StatisticName:"TotalGames",Version:"0",Value:a};w.push(b);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:w});a={trophyWin:Math.floor((Number(d)+Number(e))/2),trophyLose:Math.floor((Number(E)+Number(A))/2),quitLastGame:"true"};0==f&&(a.trophyWin=0,a.trophyLose=0);1==B&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:"TheStig",
PosData:v.Data[m+"_"+q+"_RecPos"].Value,RotData:v.Data[m+"_"+q+"_RecRot"].Value,HeaderData:v.Data[m+"_"+q+"_RecHeader"].Value,TrophyLose:A,TrophyWin:d,Opp:"TheStig"}}}if(0==C)return generateErrObj("no valid recording found for this subdivision");x=H;0<t&&(C=t,x=u);0<D&&(C=D,x=z);u=Math.floor(Math.random()*C);u>=C&&(u=C-1);t=Math.min(C,3);z=Array(t);for(m=0;m<t;m++)z[m]=0>=u?x[m]:u>=C-1?x[C-1-m]:x[u-Math.floor(t/2)+m];x=Math.floor(Math.random()*t);t=z[x].uId;u=z[x].e;z=z[x].c;D=server.GetUserReadOnlyData({PlayFabId:t,
Keys:[u+"_"+z+"_RecPos",u+"_"+z+"_RecRot",u+"_"+z+"_RecHeader"]});if(void 0==D)return generateErrObj("Did not find recording for this user: "+t);var C=server.GetPlayerCombinedInfo({PlayFabId:t,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),q=b,x=Number(calculateLeague(b)),H="UserGenerated",v=0<x?Number(g.subdivisions[f.leagues[x-
1]]):0,G=x>=f.leagues.length-1?2*v:Number(g.subdivisions[f.leagues[x]]);1==c.debug&&log.debug("I bet it will crash after this");g=JSON.parse(D.Data[u+"_"+z+"_RecHeader"].Value);1==c.debug&&log.debug("or not");void 0!=g&&(w=g.Trophies);w=Number(w);y=!0;1==c.debug&&log.debug("Adjusting trophies");if(void 0!=p)for(1==c.debug&&log.debug("excludedSubdivisionsFromTrophyAdjustment: "+p),m=0;m<p.length;m++)if(r==Number(p[m])){1==c.debug&&log.debug("in excluded subdivision: "+r);y=!1;break}1==y&&Number(Math.abs(q-
w))>=n&&(1==c.debug&&log.debug("generating new trophies. Reason: user trophies: "+q+" vs opponent trophies: "+w),w=q-l+Math.floor(Math.random()*l*2),g.Trophies=w,1==c.debug&&log.debug("performing stringify on recordingData header"),D.Data[u+"_"+z+"_RecHeader"].Value=JSON.stringify(g));0>=G-v?(l=E,n=e):Number(Math.abs(q-w))>Number(F)?(l=Math.floor((A+E)/2)-1+Math.floor(3*Math.random()),n=Math.floor((d+e)/2)-1+Math.floor(3*Math.random())):(l=A+Math.floor((E-A)/2*((q-w)/(G-v)+1)),n=e+Math.floor((d-e)/
2*((w-q)/(G-v)+1)));1==c.debug&&log.debug("Opponent's PR is TOO DAMN HIGH! "+g.Pr+" vs "+Number(h.subdivisions[Number(f.leagues[x-1])+1])+". You are in subdivision: "+Number(f.leagues[x-1]+1));g.Pr>Number(h.subdivisions[Number(f.leagues[x-1])+1])&&(l=Math.floor((A+E)/2)-1+Math.floor(3*Math.random()),n=Math.floor((d+e)/2)-1+Math.floor(3*Math.random()),H="MobyDick");e=!0;0==b?(e=!1,b=d):(b-=Number(l),1>=b&&(b=1));w=[];b={StatisticName:"TrophyCount",Version:"0",Value:b};w.push(b);b={StatisticName:"League",
Version:"0",Value:x};w.push(b);b={StatisticName:"TotalGames",Version:"0",Value:a};w.push(b);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:w});a={trophyWin:n,trophyLose:l,lastOpp:t+","+I,quitLastGame:"true"};0==e&&(a.trophyWin=0,a.trophyLose=0);1==B&&(a.LastGameOutcome="Loss");server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:H,PosData:D.Data[u+"_"+z+"_RecPos"].Value,RotData:D.Data[u+"_"+z+"_RecRot"].Value,HeaderData:D.Data[u+"_"+z+"_RecHeader"].Value,
TrophyLose:l,TrophyWin:n,Opp:C.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(c,k){var a=CheckMaintenanceAndVersion(c);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var d=server.GetUserInventory({PlayFabId:currentPlayerId}),e=[],b="-1",g={},f={PaintJobs:{itemOwned:"no",itemCustData:c.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:c.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:c.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:c.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:c.wsId,carItemId:"WindshieldId"}},a=0;a<d.Inventory.length;a++)d.Inventory[a].ItemId==c.carId&&"CarsProgress"==d.Inventory[a].CatalogVersion&&(b=d.Inventory[a].ItemInstanceId),d.Inventory[a].ItemId in f&&(f[d.Inventory[a].ItemId].itemOwned="yes",f[d.Inventory[a].ItemId].itemCustData in d.Inventory[a].CustomData?g[f[d.Inventory[a].ItemId].carItemId]=f[d.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+d.Inventory[a].ItemId+" "+f[d.Inventory[a].ItemId].itemCustData));if("-1"==
b)return generateFailObj("User does not own car with id: "+c.carId);for(var h in f)f.hasOwnProperty(h)&&"no"==f[h].itemOwned&&e.push(h);if(g=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b,Data:g});h=[{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:g}];if(0<e.length)for(e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e}),d={0:"Owned"},
a=0;a<e.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[a].ItemInstanceId,Data:d});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:h}}};
function upgradeCar(c,k,a,d){for(var e=server.GetCatalogItems({CatalogVersion:"CarCards"}),b=!1,g,f=0;f<k.Inventory.length;f++)if(k.Inventory[f].ItemId==c.carId&&"CarsProgress"==k.Inventory[f].CatalogVersion){b=!0;g=k.Inventory[f];break}for(var h,f=0;f<e.Catalog.length;f++)if(e.Catalog[f].ItemId==c.carId){h=JSON.parse(e.Catalog[f].CustomData);break}if(void 0===h)return generateErrObj("CardNotFoundForCarwithID: "+c.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===b){var l=parseInt(g.CustomData.CarLvl)+1;if(l>=Number(h.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var n=getObjectValueFromLevel(h,"currCostPerLvl",l),f=checkBalance(h.currType,n,a,d);if("OK"!=f)return f;a=getObjectValueFromLevel(h,"cardCostPerLvl",l);g.CustomData.CarLvl=l;for(var b=!1,p,f=0;f<k.Inventory.length;f++)if(k.Inventory[f].ItemId==c.carId&&"CarCards"==k.Inventory[f].CatalogVersion){b=!0;try{if(void 0===k.Inventory[f].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===k.Inventory[f].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(k.Inventory[f].CustomData.Amount)>=a)k.Inventory[f].CustomData.Amount-=a,p={Amount:k.Inventory[f].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[f].ItemInstanceId,Data:p});else return generateFailObj("Insufficient cards for real: "+k.Inventory[f].CustomData.Amount+" vs "+a)}catch(B){return generateFailObj("Insufficient cards")}break}if(!1===
b)return generateFailObj("No cards found");k=recalculateCarPr(g.CustomData,g.ItemId,e,void 0);f={CarLvl:l,Pr:k};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemInstanceId,Data:f});var r;0<n&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h.currType,Amount:n}),updateCurrencySpentStatistic(h.currType,n));c=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:f}];p=
{};f={Inventory:c};void 0!=r&&(p[r.VirtualCurrency]=r.Balance,f.VirtualCurrency=p);f.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+h.rarity,l,!0);return generateInventoryChange("InventoryUpdate",f)}b=!1;for(f=0;f<k.Inventory.length;f++)if(k.Inventory[f].ItemId==c.carId&&"CarCards"==k.Inventory[f].CatalogVersion){b=!0;try{if(void 0===k.Inventory[f].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===k.Inventory[f].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(k.Inventory[f].CustomData.Amount)>=Number(h.cardCostPerLvl[1]))n=k.Inventory[f].ItemInstanceId,k.Inventory[f].CustomData.Amount-=h.cardCostPerLvl[1],p={Amount:k.Inventory[f].CustomData.Amount};else return generateFailObj("Insufficient cards: "+k.Inventory[f].CustomData.Amount+" vs "+h.cardCostPerLvl[1]+".")}catch(B){return generateFailObj("Insufficient cards: "+B)}break}if(0==b)return generateFailObj("No cards found");f=checkBalance(h.currType,h.currCostPerLvl[1],a,d);if("OK"!=f)return f;
g=[];g.push(c.carId);g=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:g});if(!1===g.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:n,Data:p});0<h.currCostPerLvl[1]&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:h.currType,Amount:h.currCostPerLvl[1]}),updateCurrencySpentStatistic(h.currType,h.currCostPerLvl[1]));f={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:f});f={TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,
Data:f});f={PlatesId:"0",WindshieldId:"0",Pr:Number(h.basePr)+h.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[0].ItemInstanceId,Data:f});e=g=!1;for(f=0;f<k.Inventory.length;f++)if("PaintJobs"==k.Inventory[f].ItemId){e=!0;void 0!=k.Inventory[f].CustomData?h.defaultPaintID in k.Inventory[f].CustomData?g=!0:(l={},l[h.defaultPaintID]="Owned"):(l={},l[h.defaultPaintID]="Owned");void 0!=l&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:k.Inventory[f].ItemInstanceId,Data:l});break}0==e&&(paintToGive=[],paintToGive.push("PaintJobs"),k=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),l={},l[h.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:l}));f={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,
DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:Number(h.basePr)+h.prPerLvl[1]};c=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:f}];0==g&&(p={},p[h.defaultPaintID]="Owned",c.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:p}));p={};f={Inventory:c};void 0!=r&&(p[r.VirtualCurrency]=r.Balance,f.VirtualCurrency=p);f.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+h.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",
f)}
function upgradePart(c,k,a,d){for(var e=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),b=!1,g=0;g<e.Catalog.length;g++)if(e.Catalog[g].ItemId==c.carId){b=!0;break}if(!1===b)return generateErrObj("car with ID: "+c.carId+" not found in catalog.");for(var e=server.GetCatalogItems({CatalogVersion:"PartCards"}),b=!1,f,g=0;g<e.Catalog.length;g++)if(e.Catalog[g].ItemId==c.partId){f=JSON.parse(e.Catalog[g].CustomData);b=!0;break}if(0==b)return generateErrObj("part with ID: "+c.partId+" not found in catalog.");for(var b=
!1,h,g=0;g<k.Inventory.length;g++)if(k.Inventory[g].ItemId==c.carId&&"CarsProgress"==k.Inventory[g].CatalogVersion){b=!0;h=k.Inventory[g];break}if(!1===b)return generateFailObj("car with ID: "+c.carId+" not found in user inventory.");for(var l=!1,b=0,n={},g=0;g<k.Inventory.length;g++)if(k.Inventory[g].ItemId==c.partId&&"PartCards"==k.Inventory[g].CatalogVersion){var l=!0,p={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},b=
parseInt(h.CustomData[p[c.partId]])+1;if(b>=Number(f.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var r=getObjectValueFromLevel(f,"cardCostPerLvl",b),B=getObjectValueFromLevel(f,"currCostPerLvl",b);n[p[c.partId]]=b;h.CustomData[p[c.partId]]=b;var F;a=checkBalance(f.currType,B,a,d);if("OK"!=a)return a;try{if(void 0!==k.Inventory[g].CustomData&&void 0!==k.Inventory[g].CustomData.Amount&&k.Inventory[g].CustomData.Amount>=r)k.Inventory[g].CustomData.Amount-=r,F={Amount:k.Inventory[g].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[g].ItemInstanceId,Data:F});else return generateFailObj("Insufficient cards")}catch(E){return generateFailObj("Insufficient cards")}break}if(0==l)return generateFailObj("Part not found");var A;0<B&&(A=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:f.currType,Amount:B}),updateCurrencySpentStatistic(f.currType,B));g=recalculateCarPr(h.CustomData,h.ItemId,void 0,e);n.Pr=g;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:h.ItemInstanceId,Data:n});h={};g={Inventory:[{ItemId:c.partId,CatalogVersion:"PartCards",CustomData:F},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:n}]};void 0!==A&&(h[A.VirtualCurrency]=A.Balance,g.VirtualCurrency=h);g.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+f.rarity,b,!0);return generateInventoryChange("InventoryUpdatePart",g)};
