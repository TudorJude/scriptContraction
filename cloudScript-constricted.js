function checkCarDataValidity(d,k){if(void 0==d.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemInstanceId,Data:a});for(var c=0,g=0;g<k.Catalog.length;g++)if(k.Catalog[g].ItemId==d.ItemId){var e=
JSON.parse(k.Catalog[g].CustomData),c=parseInt(e.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemInstanceId,Data:a})}catch(h){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:c}}return"OK"}function generateFailObj(d){return{Result:"Failed",Message:d}}
function generateErrObj(d){return{Result:"Error",Message:d}}
function CheckMaintenanceAndVersion(d){var k=!1,a="A.0.0.1";void 0!=d&&(k=d.debug,a=d.cVersion);if(void 0==a)return"update";d=server.GetTitleData({Key:["Maintenance","MinimumGameVersionActual_IOS","MinimumGameVersionActual"]});var c=d.Data.MinimumGameVersionActual,a=a.split(".");if(4!=a.length)return"maintenance";"ios"==a[0]&&(c=d.Data.MinimumGameVersionActual_IOS);if(void 0==c)return"maintenance";for(var g=!1,c=c.split("."),e=0;3>e;e++){var h=0;a.length>e+1&&(h=Number(a[e+1]));var b=0;c.length>e&&
(b=Number(c[e]));log.debug("iteration: "+e+" currVer: "+h+" vs minVer: "+b);if(h<b){g=!0;break}}return 1==g?"update":1==k?"OK":d.Data.Maintenance?"false"==d.Data.Maintenance?"OK":"maintenance":"maintenance"}function generateMaintenanceOrUpdateObj(d){return"maintenance"==d?{Result:"Maintenance",Message:"Servers are temporarily offline"}:{Result:"Update",Message:"Game needs to be updated"}}function generateInventoryChange(d,k){return{Result:"OK",Message:d,InventoryChange:k}}
function checkBalance(d,k,a,c){if("SC"==d){if(a<k)return generateFailObj("NotEnoughSC")}else if(c<k)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(d){var k=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==k.Data.LeagueSubdivisions||void 0==k.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(k.Data.LeagueSubdivisions).leagues,k=JSON.parse(k.Data.SubdivisionTrophyRanges).subdivisions,c=0;c<a.length;c++)if(!(Number(d)>Number(k[a[c]])))return c}
function recalculateCarPr(d,k,a,c){var g=0,e;e=void 0===a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<e.Catalog.length;a++)if(e.Catalog[a].ItemId==k){g=JSON.parse(e.Catalog[a].CustomData);g=parseInt(g.basePr)+getObjectValueFromLevel(g,"prPerLvl",d.CarLvl);break}c=void 0===c?server.GetCatalogItems({CatalogVersion:"PartCards"}):c;d={Exhaust:d.ExhaustLvl,Engine:d.EngineLvl,Gearbox:d.GearboxLvl,Suspension:d.SuspensionLvl,Tires:d.TiresLvl,Turbo:d.TurboLvl};for(a=0;a<c.Catalog.length;a++)k=
JSON.parse(c.Catalog[a].CustomData),g+=getObjectValueFromLevel(k,"prPerLvl",Number(d[c.Catalog[a].ItemId]));return g}
function GenerateBlackMarket(d){var k=1,a=server.GetPlayerStatistics({PlayFabId:d,StatisticNames:["League"]});0!=a.Statistics.length&&(k=a.Statistics[0].Value.toString());0>=Number(k)&&(k=1);for(var c=server.GetCatalogItems({CatalogVersion:"PartCards"}),a=server.GetTitleData({PlayFabId:d,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),g=JSON.parse(a.Data.BlackMarketRarityBias),e,h=[],b=[],f=[],l=0;l<c.Catalog.length;l++){e=JSON.parse(c.Catalog[l].CustomData);if(void 0==e)return generateErrObj("Part card "+
c.Catalog[l].ItemId+" has no custom data.");0==e.rarity&&h.push(c.Catalog[l].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy);1==e.rarity&&b.push(c.Catalog[l].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy);2==e.rarity&&f.push(c.Catalog[l].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy)}c={};c.BMTime=(new Date).getTime();l=Math.floor(Math.random()*h.length);c.BMItem0=h[l];2<=h.length&&h.splice(l,1);Math.floor(100*Math.random())<Number(g.parts[2])?
h=f:(l=Number(g.parts[0])+Number(g.parts[1]),Math.floor(Math.random()*l)>=Number(g.parts[0])&&(h=b));c.BMItem1=h[Math.floor(Math.random()*h.length)];e=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var m,h=[],b=[],f=[],l=0;l<e.Catalog.length;l++){m=JSON.parse(e.Catalog[l].CustomData);if(void 0==m)return generateErrObj("Car card "+e.Catalog[l].ItemId+" has no custom data.");Number(m.unlockedAtRank)>=Number(k)+1||("0"==m.rarity&&h.push(e.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+
"_0_"+m.BMpriceIncrPerBuy),"1"==m.rarity&&b.push(e.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy),"2"==m.rarity&&f.push(e.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy))}k=Math.floor(Math.random()*h.length);c.BMItem2=h[k];2<=h.length&&h.splice(k,1);0>=b.length&&(0>=f.length?f=b=h:b=f);0>=f.length&&(f=b);Math.floor(100*Math.random())<Number(g.cars[2])?h=f:(l=Number(g.cars[0])+Number(g.cars[1]),Math.floor(Math.random()*l)>=Number(g.cars[0])&&
(h=b));k=Math.floor(Math.random()*h.length);c.BMItem3=h[k];server.UpdateUserInternalData({PlayFabId:d,Data:c});c.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return c}function GetCurrentBlackMarket(d,k){var a={},c=new Date,g=[];g.push("BlackMarketResetMinutes");g=server.GetTitleData({PlayFabId:d,Keys:g});a.BMTime=60*parseInt(g.Data.BlackMarketResetMinutes)-Math.floor((c.getTime()-k.Data.BMTime.Value)/1E3);for(c=0;4>c;c++)a["BMItem"+c]=k.Data["BMItem"+c].Value;return a}
function GetValueFromStatistics(d,k,a){for(var c,g=0;g<d.length;g++)d[g].StatisticName===k&&(c=d[g]);log.debug("Stat with name statisticsName: "+k+" is "+c);return void 0===c?void 0!==a?a:0:Number(c.Value)}function getCatalogItem(d,k){for(var a=server.GetCatalogItems({CatalogVersion:d}),c=0;c<a.Catalog.length;c++)if(a.Catalog[c].ItemId===k)return a.Catalog[c]}
function getObjectValueFromLevel(d,k,a,c){c||(c=0);if(!d[k]||!d[k].length)return c;var g=Number(d[k].length);a>=g&&(a=g-1);return Number(d[k][a])||c}
handlers.buyChest=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(d.curr,d.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<d.cost){var a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:d.curr,Amount:d.cost}),c={};c[a.VirtualCurrency]=a.Balance;return generateInventoryChange("ChestBought",{VirtualCurrency:c})}return generateInventoryChange("ChestBought",
{})};
handlers.claimDailyMission=function(d,k){var a=Number(d.mIdx),c=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==c.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");var c=JSON.parse(c.Data.DailyMissionStatus.Value),g=c.dailyMissionClaimStatus;if(a>=g.length)return generateErrObj("Unlock index is out of bounds of playerData claim mission status array");if(1==g[a])return generateFailObj("Mission already claimed");g[a]=
1;c={DailyMissionStatus:JSON.stringify({DailyStatus:c.DailyStatus,dailyMissionClaimStatus:g,timeStamp:c.timeStamp})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});c=JSON.parse(c.Data.DailyMissionData);if(a>=c.missionData.length)return generateErrObj("Unlock index is out of bounds of titleData claim mission reward array");a=c.missionData[a].split("_");a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:a[1],Amount:Number(a[2])});c={};c[a.VirtualCurrency]=a.Balance;return generateInventoryChange("MissionClaimed",{VirtualCurrency:c})};
handlers.endDaily=function(d,k){var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0==a.Data.DailyMissionStatus)return generateErrObj("No daily mission data found on server");for(var c=JSON.parse(a.Data.DailyMissionStatus.Value),a=c.dailyMissionClaimStatus,g,e=-1,h=0;h<c.dailyMissionClaimStatus.length;h++)if(0==a[h])return generateErrObj("Not all missions were claimed!");a=[0,0,0,0,0,0,0,0];g=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]});
tParsed=JSON.parse(g.Data.DailyMissionData);var h=Number(tParsed.minutesToRefresh),b=new Date;b.getTime()-Number(c.timeStamp)>6E4*Number(h)?(g=2,c=b.getTime()):(g=0,e=60*Number(h)-Math.floor((b.getTime()-Number(c.timeStamp))/1E3),c=c.timeStamp);c={DailyMissionStatus:JSON.stringify({DailyStatus:g,dailyMissionClaimStatus:a,timeStamp:c})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});var c=server.GetUserInventory({PlayFabId:currentPlayerId}),f;for(f in d.currencyReq)0<d.currencyReq[f]&&
server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:f,Amount:d.currencyReq[f]});for(f in d.carCardsRequest)if(d.carCardsRequest.hasOwnProperty(f)){b=!1;for(h=0;h<c.Inventory.length;h++)if(c.Inventory[h].ItemId==f&&"CarCards"==c.Inventory[h].CatalogVersion){b=void 0==c.Inventory[h].CustomData?Number(d.carCardsRequest[f]):void 0==c.Inventory[h].CustomData.Amount?Number(d.carCardsRequest[f]):isNaN(Number(c.Inventory[h].CustomData.Amount))?Number(d.carCardsRequest[f]):Number(c.Inventory[h].CustomData.Amount)+
Number(d.carCardsRequest[f]);b={Amount:b};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[h].ItemInstanceId,Data:b});b=!0;break}0==b&&(h=[f],h=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:h}),b={Amount:d.carCardsRequest[f]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:b}))}for(f in d.partCardsRequest)if(d.partCardsRequest.hasOwnProperty(f)){b=
!1;for(h=0;h<c.Inventory.length;h++)if(c.Inventory[h].ItemId==f&&"PartCards"==c.Inventory[h].CatalogVersion){b=void 0==c.Inventory[h].CustomData?Number(d.partCardsRequest[f]):void 0==c.Inventory[h].CustomData.Amount?Number(d.partCardsRequest[f]):isNaN(Number(c.Inventory[h].CustomData.Amount))?Number(d.partCardsRequest[f]):Number(c.Inventory[h].CustomData.Amount)+Number(d.partCardsRequest[f]);b={Amount:b};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[h].ItemInstanceId,
Data:b});b=!0;break}0==b&&(h=[f],h=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:h}),b={Amount:d.partCardsRequest[f]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:b}))}return{Result:"OK",Message:"DailyCompleted",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId}),DailyStatus:{status:g,claimStatus:a,timeRemaining:e}}};
handlers.endGame=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c="01",g,e="0";"rWin"==d.outcome&&(e="1");a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=a.Statistics.length&&(g=a.Statistics[0].Value.toString(),c=Number(g).toString(2));var a=0,h;h=Array(c.length);for(var b=0;b<h.length-1;b++)h[b]=c[b];h[h.length-1]=e;c=h;h=c.length;for(var f=e=0,b=1;b<c.length;b++)"1"==c[b]?(a++,f++):(f>e&&(e=f),f=0);
h=Math.round(a/h*100);var l=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),a=0,b=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=b.Statistics.length&&(a=b.Statistics[0].Value,log.debug("getting trophy count "+b.Statistics[0].Value));f=a=Number(a);b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose","trophyWin"]});b=void 0==b.Data.trophyLose||void 0==b.Data.trophyWin?45:Number(b.Data.trophyLose.Value)+Number(b.Data.trophyWin.Value);
"rWin"==d.outcome&&(a+=b);var m=JSON.parse(d.recordingHeader),b=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Wins","TotalGamesCompleted","LongestWinStreak","BestDriftScore"]}).Statistics,n=GetValueFromStatistics(b,"TotalGamesCompleted",0),n=Number(n)+1,r=GetValueFromStatistics(b,"Wins",0);"rWin"==d.outcome&&(r=Number(r)+1);var z=GetValueFromStatistics(b,"LongestWinStreak",0);e>z&&(z=e);var A=GetValueFromStatistics(b,"BestDriftScore",0);Number(m.Score)>A&&(A=Number(m.Score));
e=calculateLeague(a);for(b=g=0;b<c.length;b++)"1"==c[b]&&(g+=Math.pow(2,b));b=[];b.push({StatisticName:"WinLoss",Version:"0",Value:g});c={StatisticName:"TrophyCount",Version:"0",Value:a};b.push(c);c={StatisticName:"League",Version:"0",Value:e};b.push(c);c={StatisticName:"Wins",Version:"0",Value:r};b.push(c);c={StatisticName:"TotalGamesCompleted",Version:"0",Value:n};b.push(c);c={StatisticName:"LongestWinStreak",Version:"0",Value:z};b.push(c);c={StatisticName:"BestDriftScore",Version:"0",Value:A};
b.push(c);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});if(10>=Number(m.Score))return a={TrophyCount:a,League:e},{Result:a};l=JSON.parse(l.Data.SubdivisionTrophyRanges);c=43;for(b=0;b<l.subdivisions.length;b++)if(f<l.subdivisions[b]){c=b;break}b=[];b.push({Key:d.envIndex+"_"+d.courseIndex+"_RecPos",Value:d.recordingPos});b.push({Key:d.envIndex+"_"+d.courseIndex+"_RecRot",Value:d.recordingRot});b.push({Key:d.envIndex+"_"+d.courseIndex+"_RecHeader",Value:d.recordingHeader});
server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:b});b=server.GetTitleInternalData({Key:"RecSubDivision"+c}).Data["RecSubDivision"+c];if(void 0==b)f=[],h={wl:h,e:d.envIndex,c:d.courseIndex,uId:currentPlayerId},f.push(h);else{f=JSON.parse(b);h={wl:h,e:d.envIndex,c:d.courseIndex,uId:currentPlayerId};l=!1;for(b=m=0;b<f.length;b++)f[b].uId==currentPlayerId&&m++;if(2<m)return a={TrophyCount:a,League:e},{Result:a};for(b=0;b<f.length;b++)if(f[b].e==d.envIndex&&f[b].c==d.courseIndex){l=!0;f[b]=
h;if(1==f.length)break;if(0<b)if(f[b].wl>f[b-1].wl){if(b==f.length-1)break;for(m=b+1;m<f.length;m++)if(f[m-1].wl>f[m].wl)n=f[m],f[m]=f[m-1],f[m-1]=n;else break}else for(m=b-1;0<=m;m--)if(f[m+1].wl<f[m].wl)n=f[m],f[m]=f[m+1],f[m+1]=n;else break;else for(m=b+1;m<f.length;m++)if(f[m-1].wl>f[m].wl)n=f[m],f[m]=f[m-1],f[m-1]=n;else break}0==l&&f.push(h)}b=JSON.stringify(f);server.SetTitleInternalData({Key:"RecSubDivision"+c,Value:b});a={TrophyCount:a,League:e};return{Result:a}};
function UpdateExperience(d,k,a,c,g,e){d=JSON.parse(getCatalogItem(d,k).CustomData)[a];k=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;k=k[k.length-1];e=e||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;e=GetValueFromStatistics(e,"Experience",0);if(e>=k)return k;if(isNaN(Number(d)))a=Number(d.length),c>=a&&(c=a-1),c=Number(d[c]);else if(c=Number(d),0===c)return e;e=Math.min(e+c,k);if(!g)return e;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:e}]});return e}
handlers.generateDaily=function(d,k){var a,c=new Date;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var g=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(g.DailyStatus);if(0==a){var c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),e;tParsed=JSON.parse(c.Data.DailyMissionData);e=Number(tParsed.minutesToRefresh);c=new Date;c.getTime()-Number(g.timeStamp)>6E4*Number(e)&&(a=1)}if(1!=a)return generateErrObj("DailyStatus is: "+
a+". Should be 1")}a=2;c=c.getTime();a={DailyMissionStatus:JSON.stringify({DailyStatus:a,dailyMissionClaimStatus:[0,0,0,0,0,0,0,0],timeStamp:c})};server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK"}};
handlers.getDailyMissionStatus=function(d,k){var a,c=[0,0,0,0,0,0,0,0],g=-1;a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["DailyMissionStatus"]});if(void 0!=a.Data.DailyMissionStatus){var e=JSON.parse(a.Data.DailyMissionStatus.Value);a=Number(e.DailyStatus);var h=c.length;h>e.dailyMissionClaimStatus.length&&(h=e.dailyMissionClaimStatus.length);for(var b=0;b<h;b++)c[b]=e.dailyMissionClaimStatus[b];0==a&&(h=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DailyMissionData"]}),tParsed=
JSON.parse(h.Data.DailyMissionData),h=Number(tParsed.minutesToRefresh),b=new Date,b.getTime()-Number(e.timeStamp)>6E4*Number(h)?(a=2,c=[0,0,0,0,0,0,0,0],e=b.getTime(),e={DailyStatus:a,dailyMissionClaimStatus:c,timeStamp:e},e=JSON.stringify(e),e={DailyMissionStatus:e},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:e})):g=60*Number(h)-Math.floor((b.getTime()-Number(e.timeStamp))/1E3))}else a=2,b=new Date,e=b.getTime(),e={DailyStatus:a,dailyMissionClaimStatus:c,timeStamp:e},e=JSON.stringify(e),
e={DailyMissionStatus:e},server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:e});return{Result:"OK",Message:" ",DailyStatus:{status:a,claimStatus:c,timeRemaining:g}}};handlers.getServerTime=function(d,k){return{time:new Date}};
handlers.initServerData=function(d){d=[];var k={StatisticName:"TrophyCount",Version:"0",Value:"0"};d.push(k);k={StatisticName:"League",Version:"0",Value:"0"};d.push(k);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:d});d=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var k={0:"Owned"},a=0;a<d.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:d.ItemGrantResults[a].ItemInstanceId,Data:k});d=[];d.push("FordFocus");d=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:d});k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k});k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k});k={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k});k=[];k.push("Engine");k=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});k={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k})};
handlers.openChest=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0<d.levelUpRewardIndex){var c=0,a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),g={LastLevelReward:0};void 0==a.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:g}):c=a.Data.LastLevelReward.Value;var e=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,h=GetValueFromStatistics(a,"Experience",0);0==h&&(a=[],a.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}));for(var b=e.length,a=0;a<e.length;a++)if(!(h>=e[a])){b=a;break}if(Number(d.levelUpRewardIndex)<=Number(b))c=Number(d.levelUpRewardIndex),g.LastLevelReward=c,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:g}),a=""+c,a="000".substring(0,3-a.length)+a,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",
PlayFabId:currentPlayerId,ItemIds:a});else return generateFailObj("already got reward for level: "+c)}c=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<d.currCost){if("OK"!=checkBalance(d.currType,d.currCost,c.VirtualCurrency.SC,c.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:d.currType,Amount:d.currCost})}for(var f in d.currencyReq)0<d.currencyReq[f]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:f,Amount:d.currencyReq[f]});for(f in d.carCardsRequest)if(d.carCardsRequest.hasOwnProperty(f)){g=!1;for(a=0;a<c.Inventory.length;a++)if(c.Inventory[a].ItemId==f&&"CarCards"==c.Inventory[a].CatalogVersion){g=void 0==c.Inventory[a].CustomData?Number(d.carCardsRequest[f]):void 0==c.Inventory[a].CustomData.Amount?Number(d.carCardsRequest[f]):isNaN(Number(c.Inventory[a].CustomData.Amount))?Number(d.carCardsRequest[f]):Number(c.Inventory[a].CustomData.Amount)+Number(d.carCardsRequest[f]);
g={Amount:g};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[a].ItemInstanceId,Data:g});g=!0;break}0==g&&(a=[f],a=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:a}),g={Amount:d.carCardsRequest[f]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:g}))}for(f in d.partCardsRequest)if(d.partCardsRequest.hasOwnProperty(f)){g=!1;for(a=0;a<c.Inventory.length;a++)if(c.Inventory[a].ItemId==
f&&"PartCards"==c.Inventory[a].CatalogVersion){g=void 0==c.Inventory[a].CustomData?Number(d.partCardsRequest[f]):void 0==c.Inventory[a].CustomData.Amount?Number(d.partCardsRequest[f]):isNaN(Number(c.Inventory[a].CustomData.Amount))?Number(d.partCardsRequest[f]):Number(c.Inventory[a].CustomData.Amount)+Number(d.partCardsRequest[f]);g={Amount:g};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[a].ItemInstanceId,Data:g});g=!0;break}0==g&&(a=[f],a=server.GrantItemsToUser({CatalogVersion:"PartCards",
PlayFabId:currentPlayerId,ItemIds:a}),g={Amount:d.partCardsRequest[f]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:g}))}f=server.GetUserInventory({PlayFabId:currentPlayerId});d.chestId&&0>=d.levelUpRewardIndex&&(a=UpdateExperience("Chests",d.chestId,"xpGain",0,!0),f.Experience=a);return generateInventoryChange("InventoryUpdated",f)};
handlers.purchaseBMItem=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);if(0>d.itemId||3<d.itemId)return generateFailObj("invalid item index");a=[];a.push("BMItem"+d.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),c=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+d.itemId].Value.split("_"),g=c.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var e;e=2>d.itemId?"PartCards":"CarCards";var h=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),g=checkBalance(a[1],h,g,g);if("OK"!=g)return g;for(var b,f,g=0;g<c.Inventory.length;g++)if(c.Inventory[g].ItemId==a[0]&&c.Inventory[g].CatalogVersion==e){b=c.Inventory[g].ItemInstanceId;void 0===c.Inventory[g].CustomData?f={Amount:1}:void 0===c.Inventory[g].CustomData.Amount?f={Amount:1}:(f=Number(c.Inventory[g].CustomData.Amount)+1,isNaN(f)&&(f=1),f={Amount:f});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b,Data:f});break}void 0===b&&(b=[],b.push(a[0]),b=server.GrantItemsToUser({CatalogVersion:e,PlayFabId:currentPlayerId,ItemIds:b}).ItemGrantResults[0].ItemInstanceId,void 0===b?generateErrObj("grantRequest denied"):(f={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b,Data:f})));b=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a[1],Amount:h});h=a[0]+"_"+a[1]+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];c={};c["BMItem"+
d.itemId]=h;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});f=[{ItemId:a[0],CatalogVersion:e,CustomData:f}];e={};e[b.VirtualCurrency]=b.Balance;a=d.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];g={Inventory:f,VirtualCurrency:e};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:g,BMItemChange:a}};
handlers.purchaseItems=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=server.GetUserInventory({PlayFabId:currentPlayerId}),g=c.VirtualCurrency.SC,e=c.VirtualCurrency.HC;switch(d.purchaseType){case "carUpgrade":return upgradeCar(d,c,g,e);case "partUpgrade":return upgradePart(d,c,g,e);case "custPurchase":for(var h=server.GetCatalogItems({CatalogVersion:"Customization"}),b,f=0,a="SC",l=0;l<h.Catalog.length;l++)if(h.Catalog[l].ItemId==d.custId){b=
h.Catalog[l];cardInfo=JSON.parse(h.Catalog[l].CustomData);f=d.custVal+",Cost";a=cardInfo[d.custVal+",Curr"];f=cardInfo[f];e=checkBalance(a,f,g,e);if("OK"!=e)return e;break}if(void 0==b)return generateErrObj("Customization does not exist in catalog.");for(var m,n,l=0;l<c.Inventory.length;l++)if(c.Inventory[l].ItemId==d.custId){m=c.Inventory[l];n=c.Inventory[l].ItemInstanceId;if(void 0!=m.CustomData&&String(d.custVal)in m.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==
m){log.info("user doesn't have customization category. Granting ... ");e=[];e.push(d.custId);e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e});if(0==e.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");n=e.ItemGrantResults[0].ItemInstanceId}e={};e[String(d.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:n,Data:e});e=[{ItemId:d.custId,
CatalogVersion:"Customization",CustomData:e}];0<f?(a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:f}),f={},f[a.VirtualCurrency]=a.Balance,l={Inventory:e,VirtualCurrency:f}):l={Inventory:e};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":a=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});f=!1;for(l=n=0;l<a.Catalog.length;l++)if(a.Catalog[l].ItemId==d.packId){n=a.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(a.Catalog[l].CustomData);f=!0;break}if(0==f)return generateErrObj("pack with ID: "+d.packId+" not found in catalog.");if(0>=n)return generateErrObj("pack with ID: "+d.packId+" shouldn't have negative cost.");if(n>e)return generateFailObj("Not enough HC.");a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:n});e=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});f={};f[e.VirtualCurrency]=
e.Balance;f[a.VirtualCurrency]=a.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:f});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(d){d=CheckMaintenanceAndVersion(d);return"OK"!=d?generateMaintenanceOrUpdateObj(d):{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(d){d=server.GetUserInventory({PlayFabId:currentPlayerId});for(var k=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),c=!1,g=0;g<d.Inventory.length;g++)if("CarsProgress"==d.Inventory[g].CatalogVersion){var c=!0,e=checkCarDataValidity(d.Inventory[g],k);if("PlayFabError"==e||void 0===e)return generateErrObj("PlayfabError");"OK"==e?log.debug("Data for "+d.Inventory[g].ItemId+" OK"):d.Inventory[g].CustomData=e;
d.Inventory[g].CustomData.Pr=recalculateCarPr(d.Inventory[g].CustomData,d.Inventory[g].ItemId,k,a);e={};e.Pr=d.Inventory[g].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.Inventory[g].ItemInstanceId,Data:e})}return!1===c?(d=[],d.push("FordFocus"),d=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:d}),k={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k}),k={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k}),k={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:k}),generateErrObj("UserHasNoCars ... reiniting")):d};
handlers.retrieveBlackMarket=function(d,k){var a=CheckMaintenanceAndVersion(d);if(!0===d.reset&&"OK"!=a)return generateMaintenanceOrUpdateObj(a);var c=[];c.push("BMTime");for(var g=0;4>g;g++)c.push("BMItem"+g);g=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:c});if(void 0===g.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var c=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:e});if(!0===d.reset){a="HC";g=200;c=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==c.Data.BlackMarketResetCost&&(g=c.Data.BlackMarketResetCost.split("_"),a=g[0],g=Number(g[1]));if(0<g){c=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,g,c.VirtualCurrency.SC,c.VirtualCurrency.HC))return generateFailObj("not enough money");g=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:g});a=GenerateBlackMarket(currentPlayerId);c={};c[g.VirtualCurrency]=g.Balance;g={VirtualCurrency:c};a.InventoryChange=g;return a}return GenerateBlackMarket(currentPlayerId)}return c.getTime()-
parseInt(g.Data.BMTime.Value)>6E4*parseInt(e.Data.BlackMarketResetMinutes)?("OK"!=a&&GetCurrentBlackMarket(currentPlayerId,g),GenerateBlackMarket(currentPlayerId)):GetCurrentBlackMarket(currentPlayerId,g)};
handlers.rewardUsers=function(d,k){var a=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience","TrophyCount"]}).Statistics,c=GetValueFromStatistics(a,"Experience",0),a=GetValueFromStatistics(a,"TrophyCount",0),g=0;0>=c&&(a=Number(a)/3E3,g=Number(Math.floor(800*a)));c=Number(c)+g;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:"Experience",Version:"0",Value:c}]});return c};
handlers.startGame=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);var a="10",c,g=50,e,h=0;e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});if(0!=e.Statistics.length){c=e.Statistics[0].Value.toString();a=Number(c).toString(2);e=a.length;for(var b=1;b<a.length;b++)"1"==a[b]&&h++;g=Math.round(h/e*100)}a+="0";if(20<a.length){h=Array(20);a=a.slice(2);h[0]="1";for(b=0;b<a.length;b++)h[b+1]=a[b];a=h}var f=server.GetTitleData({Key:"LeagueSubdivisions SubdivisionTrophyRanges TrophyGainRange TrophyLoseRange SubdivisionPrRanges TrophyDifferenceLimit".split(" ")}),
h=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TotalGames"]}).Statistics,h=GetValueFromStatistics(h,"TotalGames",0),h=Number(h)+1,l=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});e=0;0!=l.Statistics.length&&(e=l.Statistics[0].Value);e=Number(e);var m=JSON.parse(f.Data.SubdivisionTrophyRanges);c=JSON.parse(f.Data.LeagueSubdivisions);for(var n=JSON.parse(f.Data.SubdivisionPrRanges),l=JSON.parse(f.Data.TrophyDifferenceLimit),r=Number(l.trophyReadjustRange),
z=Number(l.maxDifference),A=l.subDivisionsToExclude,B=43,F=43,J,C=f.Data.TrophyGainRange.split("_"),G=f.Data.TrophyLoseRange.split("_"),l=Number(C[0]),f=Number(C[1]),C=Number(G[0]),G=Number(G[1]),b=0;b<m.subdivisions.length;b++)if(e<Number(m.subdivisions[b])){B=b;b<m.subdivisions.length-1&&(F=b+1);break}J=Number(m.subdivisions[F])-Number(m.subdivisions[B]);0>=J&&(J=400);var w=server.GetTitleInternalData({Keys:"RecSubDivision"+B}).Data["RecSubDivision"+B],q=!1;void 0==w&&(q=!0);var x,t,u=F="noop",
b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp"]});if(void 0==b.Data||void 0==b.Data.lastOpp)u=F="noop";else for(t=b.Data.lastOpp.Value.split(","),b=0;b<t.length;b++)0==b&&(F=t[b]),1==b&&(u=t[b]);x=0==q?JSON.parse(w):[];var H=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>x.length&&(q=!0);var D=Array(x.length),y=0,w=Array(x.length);t=0;for(var E=Array(x.length),I=0,b=0;b<x.length;b++)1==q&&(H[5*Number(x[b].e)+Number(x[b].c)]=1),x[b].uId!=currentPlayerId&&(D[y]=x[b],y++,x[b].uId!=F&&(w[t]=
x[b],t++,x[b].uId!=u&&(E[I]=x[b],I++)));if(1==q){q=[];for(b=0;b<H.length;b++)0==H[b]&&q.push(b);q=q[Math.floor(Math.random()*q.length)];b=Math.floor(q/5);q%=5;u=server.GetTitleData({Keys:"MasterUser"});if(void 0!=u.Data.MasterUser&&(u=server.GetUserReadOnlyData({PlayFabId:u.Data.MasterUser,Keys:[b+"_"+q+"_RecPos",b+"_"+q+"_RecRot",b+"_"+q+"_RecHeader"]}),void 0!=u.Data&&void 0!=u.Data[b+"_"+q+"_RecPos"]&&void 0!=u.Data[b+"_"+q+"_RecRot"]&&void 0!=u.Data[b+"_"+q+"_RecHeader"])){var v=!0;0==e?(e=f,
v=!1):e-=C;1>=e&&(e=1);c=parseInt(a,2);a=[];c={StatisticName:"WinLoss",Version:"0",Value:c};a.push(c);e={StatisticName:"TrophyCount",Version:"0",Value:e};a.push(e);p={StatisticName:"League",Version:"0",Value:p};a.push(p);p={StatisticName:"TotalGames",Version:"0",Value:h};a.push(p);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a});a={trophyWin:Math.floor((Number(f)+Number(l))/2),trophyLose:Math.floor((Number(G)+Number(C))/2)};0==v&&(a.trophyWin=0,a.trophyLose=0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,
Data:a});return{Result:"OK",RecType:"TheStig",PosData:u.Data[b+"_"+q+"_RecPos"].Value,RotData:u.Data[b+"_"+q+"_RecRot"].Value,HeaderData:u.Data[b+"_"+q+"_RecHeader"].Value,TrophyLose:C,TrophyWin:f,Opp:"TheStig"}}}if(0==y)return generateErrObj("no valid recording found for this subdivision");p=D;0<t&&(y=t,p=w);0<I&&(y=I,p=E);w=y-1;for(b=0;b<y;b++)if(p[b].wl>g){w=b;break}g=Math.min(y,3);t=Array(g);for(b=0;b<g;b++)t[b]=0>=w?p[b]:w>=y-1?p[y-1-b]:p[w-Math.floor(g/2)+b];p=Math.floor(Math.random()*g);w=
t[p].uId;g=t[p].e;t=t[p].c;E=server.GetUserReadOnlyData({PlayFabId:w,Keys:[g+"_"+t+"_RecPos",g+"_"+t+"_RecRot",g+"_"+t+"_RecHeader"]});if(void 0==E)return generateErrObj("Did not find recording for this user: "+w);var I=server.GetPlayerCombinedInfo({PlayFabId:w,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),D=e,p=Number(calculateLeague(e)),
y="UserGenerated",q=0<p?Number(m.subdivisions[c.leagues[p-1]]):0,u=p>=c.leagues.length-1?2*q:Number(m.subdivisions[c.leagues[p]]),m=JSON.parse(E.Data[g+"_"+t+"_RecHeader"].Value);void 0!=m&&(v=m.Trophies);v=Number(v);H=!0;1==d.debug&&log.debug("Adjusting trophies");if(void 0!=A)for(1==d.debug&&log.debug("excludedSubdivisionsFromTrophyAdjustment: "+A),b=0;b<A.length;b++)if(B==Number(A[b])){1==d.debug&&log.debug("in excluded subdivision: "+B);H=!1;break}1==H&&Number(Math.abs(D-v))>=z&&(1==d.debug&&
log.debug("generating new trophies. Reason: user trophies: "+D+" vs opponent trophies: "+v),v=D-r+Math.floor(Math.random()*r*2),m.Trophies=v,1==d.debug&&log.debug("performing stringify on recordingData header"),E.Data[g+"_"+t+"_RecHeader"].Value=JSON.stringify(m));0>=u-q?(r=G,v=l):Number(Math.abs(D-v))>Number(J)?(r=Math.floor((C+G)/2)-1+Math.floor(3*Math.random()),v=Math.floor((f+l)/2)-1+Math.floor(3*Math.random())):(r=C+Math.floor((G-C)/2*((D-v)/(u-q)+1)),v=l+Math.floor((f-l)/2*((v-D)/(u-q)+1)));
1==d.debug&&log.debug("Opponent's PR is TOO DAMN HIGH! "+m.Pr+" vs "+Number(n.subdivisions[c.leagues[p-1]+1])+". You are in subdivision: "+Number(c.leagues[p-1])+1);m.Pr>Number(n.subdivisions[Number(c.leagues[p-1])+1])&&(r=Math.floor((C+G)/2)-1+Math.floor(3*Math.random()),v=Math.floor((f+l)/2)-1+Math.floor(3*Math.random()),y="MobyDick");l=!0;0==e?(l=!1,e=f):(e-=Number(r),1>=e&&(e=1));c=parseInt(a,2);a=[];c={StatisticName:"WinLoss",Version:"0",Value:c};a.push(c);e={StatisticName:"TrophyCount",Version:"0",
Value:e};a.push(e);p={StatisticName:"League",Version:"0",Value:p};a.push(p);p={StatisticName:"TotalGames",Version:"0",Value:h};a.push(p);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a});a={trophyWin:v,trophyLose:r,lastOpp:w+","+F};0==l&&(a.trophyWin=0,a.trophyLose=0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:a});return{Result:"OK",RecType:y,PosData:E.Data[g+"_"+t+"_RecPos"].Value,RotData:E.Data[g+"_"+t+"_RecRot"].Value,HeaderData:E.Data[g+"_"+t+"_RecHeader"].Value,
TrophyLose:r,TrophyWin:v,Opp:I.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(d,k){var a=CheckMaintenanceAndVersion(d);if("OK"!=a)return generateMaintenanceOrUpdateObj(a);for(var c=server.GetUserInventory({PlayFabId:currentPlayerId}),g=[],e="-1",h={},b={PaintJobs:{itemOwned:"no",itemCustData:d.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:d.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:d.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:d.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",
itemCustData:d.wsId,carItemId:"WindshieldId"}},a=0;a<c.Inventory.length;a++)c.Inventory[a].ItemId==d.carId&&"CarsProgress"==c.Inventory[a].CatalogVersion&&(e=c.Inventory[a].ItemInstanceId),c.Inventory[a].ItemId in b&&(b[c.Inventory[a].ItemId].itemOwned="yes",b[c.Inventory[a].ItemId].itemCustData in c.Inventory[a].CustomData?h[b[c.Inventory[a].ItemId].carItemId]=b[c.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+c.Inventory[a].ItemId+" "+b[c.Inventory[a].ItemId].itemCustData));if("-1"==
e)return generateFailObj("User does not own car with id: "+d.carId);for(var f in b)b.hasOwnProperty(f)&&"no"==b[f].itemOwned&&g.push(f);if(h=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e,Data:h});f=[{ItemId:d.carId,CatalogVersion:"CarsProgress",CustomData:h}];if(0<g.length)for(g=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:g}),c={0:"Owned"},
a=0;a<g.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemGrantResults[a].ItemInstanceId,Data:c});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:f}}};
function upgradeCar(d,k,a,c){for(var g=server.GetCatalogItems({CatalogVersion:"CarCards"}),e=!1,h,b=0;b<k.Inventory.length;b++)if(k.Inventory[b].ItemId==d.carId&&"CarsProgress"==k.Inventory[b].CatalogVersion){e=!0;h=k.Inventory[b];break}for(var f,b=0;b<g.Catalog.length;b++)if(g.Catalog[b].ItemId==d.carId){f=JSON.parse(g.Catalog[b].CustomData);break}if(void 0===f)return generateErrObj("CardNotFoundForCarwithID: "+d.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===e){var l=parseInt(h.CustomData.CarLvl)+1;if(l>=Number(f.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var m=getObjectValueFromLevel(f,"currCostPerLvl",l),b=checkBalance(f.currType,m,a,c);if("OK"!=b)return b;a=getObjectValueFromLevel(f,"cardCostPerLvl",l);h.CustomData.CarLvl=l;for(var e=!1,n,b=0;b<k.Inventory.length;b++)if(k.Inventory[b].ItemId==d.carId&&"CarCards"==k.Inventory[b].CatalogVersion){e=!0;try{if(void 0===k.Inventory[b].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===k.Inventory[b].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(k.Inventory[b].CustomData.Amount)>=a)k.Inventory[b].CustomData.Amount-=a,n={Amount:k.Inventory[b].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[b].ItemInstanceId,Data:n});else return generateFailObj("Insufficient cards for real: "+k.Inventory[b].CustomData.Amount+" vs "+a)}catch(z){return generateFailObj("Insufficient cards")}break}if(!1===
e)return generateFailObj("No cards found");k=recalculateCarPr(h.CustomData,h.ItemId,g,void 0);b={CarLvl:l,Pr:k};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemInstanceId,Data:b});var r;0<m&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:f.currType,Amount:m}));d=[{ItemId:d.carId,CatalogVersion:"CarCards",CustomData:n},{ItemId:d.carId,CatalogVersion:"CarsProgress",CustomData:b}];n={};b={Inventory:d};void 0!=r&&(n[r.VirtualCurrency]=
r.Balance,b.VirtualCurrency=n);b.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+f.rarity,l,!0);return generateInventoryChange("InventoryUpdate",b)}e=!1;for(b=0;b<k.Inventory.length;b++)if(k.Inventory[b].ItemId==d.carId&&"CarCards"==k.Inventory[b].CatalogVersion){e=!0;try{if(void 0===k.Inventory[b].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===k.Inventory[b].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(k.Inventory[b].CustomData.Amount)>=Number(f.cardCostPerLvl[1]))m=k.Inventory[b].ItemInstanceId,k.Inventory[b].CustomData.Amount-=f.cardCostPerLvl[1],n={Amount:k.Inventory[b].CustomData.Amount};else return generateFailObj("Insufficient cards: "+k.Inventory[b].CustomData.Amount+" vs "+f.cardCostPerLvl[1]+".")}catch(z){return generateFailObj("Insufficient cards: "+z)}break}if(0==e)return generateFailObj("No cards found");b=checkBalance(f.currType,f.currCostPerLvl[1],a,c);if("OK"!=b)return b;
h=[];h.push(d.carId);h=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:h});if(!1===h.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:m,Data:n});0<f.currCostPerLvl[1]&&(r=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:f.currType,Amount:f.currCostPerLvl[1]}));b={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:b});b={TiresLvl:"0",TurboLvl:"0",PaintId:f.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:b});b={PlatesId:"0",WindshieldId:"0",
Pr:Number(f.basePr)+f.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:b});g=h=!1;for(b=0;b<k.Inventory.length;b++)if("PaintJobs"==k.Inventory[b].ItemId){g=!0;void 0!=k.Inventory[b].CustomData?f.defaultPaintID in k.Inventory[b].CustomData?h=!0:(l={},l[f.defaultPaintID]="Owned"):(l={},l[f.defaultPaintID]="Owned");void 0!=l&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[b].ItemInstanceId,
Data:l});break}0==g&&(paintToGive=[],paintToGive.push("PaintJobs"),k=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),l={},l[f.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:l}));b={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:f.defaultPaintID,DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",
Pr:Number(f.basePr)+f.prPerLvl[1]};d=[{ItemId:d.carId,CatalogVersion:"CarCards",CustomData:n},{ItemId:d.carId,CatalogVersion:"CarsProgress",CustomData:b}];0==h&&(n={},n[f.defaultPaintID]="Owned",d.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:n}));n={};b={Inventory:d};void 0!=r&&(n[r.VirtualCurrency]=r.Balance,b.VirtualCurrency=n);b.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+f.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",b)}
function upgradePart(d,k,a,c){for(var g=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),e=!1,h=0;h<g.Catalog.length;h++)if(g.Catalog[h].ItemId==d.carId){e=!0;break}if(!1===e)return generateErrObj("car with ID: "+d.carId+" not found in catalog.");for(var g=server.GetCatalogItems({CatalogVersion:"PartCards"}),e=!1,b,h=0;h<g.Catalog.length;h++)if(g.Catalog[h].ItemId==d.partId){b=JSON.parse(g.Catalog[h].CustomData);e=!0;break}if(0==e)return generateErrObj("part with ID: "+d.partId+" not found in catalog.");
for(var e=!1,f,h=0;h<k.Inventory.length;h++)if(k.Inventory[h].ItemId==d.carId&&"CarsProgress"==k.Inventory[h].CatalogVersion){e=!0;f=k.Inventory[h];break}if(!1===e)return generateFailObj("car with ID: "+d.carId+" not found in user inventory.");for(var l=!1,e=0,m={},h=0;h<k.Inventory.length;h++)if(k.Inventory[h].ItemId==d.partId&&"PartCards"==k.Inventory[h].CatalogVersion){var l=!0,n={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},
e=parseInt(f.CustomData[n[d.partId]])+1;if(e>=Number(b.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var r=getObjectValueFromLevel(b,"cardCostPerLvl",e),z=getObjectValueFromLevel(b,"currCostPerLvl",e);m[n[d.partId]]=e;f.CustomData[n[d.partId]]=e;var A;a=checkBalance(b.currType,z,a,c);if("OK"!=a)return a;try{if(void 0!==k.Inventory[h].CustomData&&void 0!==k.Inventory[h].CustomData.Amount&&k.Inventory[h].CustomData.Amount>=r)k.Inventory[h].CustomData.Amount-=r,A={Amount:k.Inventory[h].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.Inventory[h].ItemInstanceId,Data:A});else return generateFailObj("Insufficient cards")}catch(F){return generateFailObj("Insufficient cards")}break}if(0==l)return generateFailObj("Part not found");var B;0<z&&(B=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.currType,Amount:z}));h=recalculateCarPr(f.CustomData,f.ItemId,void 0,g);m.Pr=h;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:f.ItemInstanceId,Data:m});f={};h={Inventory:[{ItemId:d.partId,CatalogVersion:"PartCards",CustomData:A},{ItemId:d.carId,CatalogVersion:"CarsProgress",CustomData:m}]};void 0!==B&&(f[B.VirtualCurrency]=B.Balance,h.VirtualCurrency=f);h.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+b.rarity,e,!0);return generateInventoryChange("InventoryUpdatePart",h)};
