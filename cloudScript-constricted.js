handlers.endGame=function(b,l){var a="01",e,d="0";"rWin"==b.outcome&&(d="1");var h=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=h.Statistics.length&&(e=h.Statistics[0].Value.toString(),log.debug("wlStatInt "+e),a=Number(e).toString(2),log.debug("wlStat "+a));var h=0,g;log.debug("wlStat.length "+a.length);g=Array(a.length);log.debug("tempString.length "+g.length);for(var f=0;f<g.length-1;f++)g[f]=a[f];g[g.length-1]=d;log.debug("tempString "+g);a=g;log.debug("wlStat "+
a);d=a.length;for(f=0;f<a.length;f++)"1"==a[f]&&h++;log.debug("wlStatNew "+a);g=Math.round(h/d*100);log.debug("winRatio "+g);var c=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),d=0,k,h=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=h.Statistics.length&&(d=h.Statistics[0].Value,log.debug("getting trophy count "+h.Statistics[0].Value));k=d;"rWin"==b.outcome&&(d=20>d?50:d+60);log.debug("trophies change: "+k+" => "+d);h=calculateLeague(d);
for(f=e=0;f<a.length;f++)"1"==a[f]&&(e+=Math.pow(2,f));f=[];f.push({StatisticName:"WinLoss",Version:"0",Value:e});a={StatisticName:"TrophyCount",Version:"0",Value:d};f.push(a);a={StatisticName:"League",Version:"0",Value:h};f.push(a);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:f});if("rOot"==b.outcome){var m={TrophyCount:d,League:h};return{Result:m}}a=JSON.parse(c.Data.SubdivisionTrophyRanges);log.debug("SubdivisionTrophyRanges "+a);for(f=0;f<a.subdivisions.length;f++)if(k<
a.subdivisions[f]){m=f;break}log.debug("user is in subdivision "+m);f=[];f.push({Key:b.envIndex+"_"+b.courseIndex+"_RecPos",Value:b.recordingPos});f.push({Key:b.envIndex+"_"+b.courseIndex+"_RecRot",Value:b.recordingRot});f.push({Key:b.envIndex+"_"+b.courseIndex+"_RecHeader",Value:b.recordingHeader});log.debug("updating user read only data ");f=server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:f});log.debug("updated user read only data for "+currentPlayerId+" "+f);f=server.GetTitleInternalData({Key:"RecSubDivision"+
m}).Data["RecSubDivision"+m];log.debug("recPool: "+f);if(void 0==f)a=[],g={wl:g,e:b.envIndex,c:b.courseIndex,uId:currentPlayerId},a.push(g),f=JSON.stringify(a),log.debug("recArray: "+f);else{a=JSON.parse(f);log.debug("recArray: "+a);g={wl:g,e:b.envIndex,c:b.courseIndex,uId:currentPlayerId};c=!1;for(f=k=0;f<a.length;f++)a[f].uId==currentPlayerId&&k++;if(2<k)return m={TrophyCount:d,League:h},{Result:m};for(f=0;f<a.length;f++)if(a[f].e==b.envIndex&&a[f].c==b.courseIndex){c=!0;a[f]=g;if(1==a.length)break;
if(0<f)if(a[f].wl>a[f-1].wl){if(f==a.length-1)break;for(k=f+1;k<a.length;k++)if(a[k-1].wl>a[k].wl)e=a[k],a[k]=a[k-1],a[k-1]=e;else break}else for(k=f-1;0<=k;k--)if(a[k+1].wl<a[k].wl)e=a[k],a[k]=a[k+1],a[k+1]=e;else break;else for(k=f+1;k<a.length;k++)if(a[k-1].wl>a[k].wl)e=a[k],a[k]=a[k-1],a[k-1]=e;else break}0==c&&(log.debug("recArrayLNbefore: "+a.length),a.push(g),log.debug("recArrayLNafter: "+a.length));f=JSON.stringify(a);log.debug("titleKeyVal: "+f)}server.SetTitleInternalData({Key:"RecSubDivision"+
m,Value:f});m={TrophyCount:d,League:h};return{Result:m}};
handlers.startGame=function(b,l){var a="01",e,d=50,h=0,g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});if(0!=g.Statistics.length){e=g.Statistics[0].Value.toString();a=Number(e).toString(2);d=a.length;for(g=0;g<a.length;g++)"1"==a[g]&&h++;d=Math.round(h/d*100)}log.debug("wlStatBeforeshiftandAdd "+a);a+="0";log.debug("wlStatBeforeshift "+a);20<a.length&&(a=a.slice(1));log.debug("wlStat "+a);var g=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),
f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]}),h=0;0!=f.Statistics.length&&(h=f.Statistics[0].Value);f=JSON.parse(g.Data.SubdivisionTrophyRanges);log.debug("SubdivisionTrophyRanges "+f);for(var c=43,g=0;g<f.subdivisions.length;g++)if(h<f.subdivisions[g]){c=g;break}log.debug("user is in subdivision "+c);g=server.GetTitleInternalData({Keys:"RecSubDivision"+c}).Data["RecSubDivision"+c];f=!1;void 0==g&&(f=!0);var c=0==f?JSON.parse(g):[],k=[0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0];log.debug("subrecording pool has "+c.length+" length. Must have: 15 length");15>c.length&&(f=!0);var m=Array(c.length);e=0;log.debug("iterating through recArray");for(g=0;g<c.length;g++)1==f&&(k[5*Number(c[g].e)+Number(c[g].c)]=1),c[g].uId==currentPlayerId?log.debug("found: "+c[g].uId+"... skipping"):(m[e]=c[g],e++);log.debug("isIncompleteSubDivision: "+f);if(1==f){for(g=c=f=0;g<k.length;g++)if(0==k[g]){f=Math.floor(g/5);c=g%5;break}log.debug("gettingDefaultUser: env: "+f+" course: "+c);
g=server.GetTitleData({Keys:"MasterUser"});if(void 0!=g.Data.MasterUser&&(log.debug("master user: "+g.Data.MasterUser),g=server.GetUserReadOnlyData({PlayFabId:g.Data.MasterUser,Keys:[f+"_"+c+"_RecPos",f+"_"+c+"_RecRot",f+"_"+c+"_RecHeader"]}),void 0!=g.Data&&(log.debug("defaultRecordingData: "+g.Data),void 0!=g.Data[f+"_"+c+"_RecPos"]&&void 0!=g.Data[f+"_"+c+"_RecRot"]&&void 0!=g.Data[f+"_"+c+"_RecHeader"])))return h-=30,0>=h&&(h=0),e=parseInt(a,2),log.debug("updating WL to:  "+e),m=calculateLeague(h),
a=[],e={StatisticName:"WinLoss",Version:"0",Value:e},a.push(e),h={StatisticName:"TrophyCount",Version:"0",Value:h},a.push(h),h={StatisticName:"League",Version:"0",Value:m},a.push(h),log.debug("updatingStats: "+a),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a}),log.debug("found valid default rec"),{Result:"OK",RecType:"Default",PosData:g.Data[f+"_"+c+"_RecPos"].Value,RotData:g.Data[f+"_"+c+"_RecRot"].Value,HeaderData:g.Data[f+"_"+c+"_RecHeader"].Value,Opp:"Mniezo"}}log.debug("looking for user generated recording");
if(0==e)return generateErrObj("no valid recording found for this subdivision");c=e-1;for(g=0;g<e;g++)if(m[g].wl>d){c=g;break}log.debug("pivot is: "+c);d=Math.min(e,3);log.debug("finalRecArraySize: "+d);f=Array(d);for(g=0;g<d;g++)0>=c?f[g]=m[g]:c>=e-1?f[g]=m[e-1-g]:(log.debug("valoarea pizdii: "+(c-Math.floor(d/2)+g)),f[g]=m[c-Math.floor(d/2)+g]);log.debug("vrAidx: "+e);log.debug("validRecArray: "+m);log.debug("finalRecArray: "+f);g=Math.floor(Math.random()*d);c=f[g].uId;d=f[g].e;g=f[g].c;f=[d+"_"+
g+"_RecPos",d+"_"+g+"_RecRot",d+"_"+g+"_RecHeader"];log.debug("requesting "+f);f=server.GetUserReadOnlyData({PlayFabId:c,Keys:f});if(void 0==f)return generateErrObj("Did not find recording for this user: "+c);c=server.GetPlayerCombinedInfo({PlayFabId:c,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}});h-=30;0>=h&&(h=0);e=parseInt(a,
2);log.debug("updating WL to:  "+e);m=calculateLeague(h);a=[];e={StatisticName:"WinLoss",Version:"0",Value:e};a.push(e);h={StatisticName:"TrophyCount",Version:"0",Value:h};a.push(h);h={StatisticName:"League",Version:"0",Value:m};a.push(h);log.debug("updatingStats: "+a);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a});return{Result:"OK",RecType:"UserGenerated",PosData:f.Data[d+"_"+g+"_RecPos"].Value,RotData:f.Data[d+"_"+g+"_RecRot"].Value,HeaderData:f.Data[d+"_"+g+"_RecHeader"].Value,
Opp:c.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};handlers.updateTrophyCount=function(b,l){var a=0,e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=e.Statistics.length&&(a=e.Statistics[0].Value);"rStart"==b.val&&(a-=30);0>a&&(a=0);"rWin"==b.val&&(a+=60);if("rLose"==b.val)return{val:a};e=[];e.push({StatisticName:"TrophyCount",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});if("rWin"==b.val)return{val:a}};
handlers.initServerData=function(b){b=[];var l={StatisticName:"TrophyCount",Version:"0",Value:"0"};b.push(l);l={StatisticName:"League",Version:"0",Value:"0"};b.push(l);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=[];b.push("Decals");b.push("PaintJobs");b.push("Plates");b.push("Rims");b.push("WindshieldText");b=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:b});for(var l={0:"Owned"},a=0;a<b.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[a].ItemInstanceId,Data:l});b=[];b.push("FordFocus");b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b});l={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});l={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});l={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:3E3});server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:200})};
handlers.requestInventory=function(b){b=server.GetUserInventory({PlayFabId:currentPlayerId});for(var l=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),e=0;e<b.Inventory.length;e++)if("CarsProgress"==b.Inventory[e].CatalogVersion){var d=checkCarDataValidity(b.Inventory[e],l);log.debug("check "+d);if("PlayFabError"==d||void 0==d)return generateErrObj("PlayfabError");"OK"==d?log.debug("Data for "+b.Inventory[e].ItemId+" OK"):b.Inventory[e].CustomData=
d;b.Inventory[e].CustomData.Pr=recalculateCarPr(b.Inventory[e].CustomData,b.Inventory[e].ItemId,l,a);d={};d.Pr=b.Inventory[e].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[e].ItemInstanceId,Data:d})}return b};
function checkCarDataValidity(b,l){if(void 0==b.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});for(var e=0,d=0;d<l.Catalog.length;d++)if(l.Catalog[d].ItemId==b.ItemId){var h=
JSON.parse(l.Catalog[d].CustomData),e=parseInt(h.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a})}catch(g){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:e}}return"OK"}function generateFailObj(b){return{Result:"Failed",Message:b}}
function generateErrObj(b){return{Result:"Error",Message:b}}function checkBalance(b,l,a,e){if("SC"==b){if(a<l)return generateFailObj("NotEnoughSC")}else if(e<l)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(b){td=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==td.Data.LeagueSubdivisions||void 0==td.Data.SubdivisionTrophyRanges)return 1;for(var l=JSON.parse(td.Data.LeagueSubdivisions).leagues,a=JSON.parse(td.Data.SubdivisionTrophyRanges).subdivisions,e=0;e<l.length;e++)if(!(Number(b)>Number(a[l[e]])))return e}
function recalculateCarPr(b,l,a,e){var d=0,h;h=void 0==a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<h.Catalog.length;a++)if(h.Catalog[a].ItemId==l){a=JSON.parse(h.Catalog[a].CustomData);d+=parseInt(a.basePr)+parseInt(a.prPerLvl)*(parseInt(b.CarLvl)-1);break}e=void 0==e?server.GetCatalogItems({CatalogVersion:"PartCards"}):e;b={Exhaust:b.ExhaustLvl,Engine:b.EngineLvl,Gearbox:b.GearboxLvl,Suspension:b.SuspensionLvl,Tires:b.TiresLvl,Turbo:b.TurboLvl};for(a=0;a<e.Catalog.length;a++)l=
JSON.parse(e.Catalog[a].CustomData),d+=parseInt(l.basePr)+parseInt(l.prPerLvl)*b[e.Catalog[a].ItemId];return d}
function GenerateBlackMarket(b){var l=server.GetCatalogItems({CatalogVersion:"PartCards"}),a={};a.BMTime=(new Date).getTime();var e=Math.floor(Math.random()*l.Catalog.length),d=JSON.parse(l.Catalog[e].CustomData);if(void 0==d)return generateErrObj("Part card "+l.Catalog[g].ItemId+" has no custom data.");a.BMItem0=l.Catalog[e].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy;var h=Math.floor(Math.random()*l.Catalog.length);h==e&&(h=l.Catalog.length-e-1);d=JSON.parse(l.Catalog[h].CustomData);
if(void 0==d)return generateErrObj("Part card "+l.Catalog[g].ItemId+" has no custom data.");a.BMItem1=l.Catalog[h].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy;for(var l=server.GetCatalogItems({CatalogVersion:"CarCards"}),d=[],h=[],g=0;g<l.Catalog.length;g++){e=JSON.parse(l.Catalog[g].CustomData);if(void 0==e)return generateErrObj("Car card "+l.Catalog[g].ItemId+" has no custom data.");"false"==e.rareCar?d.push(l.Catalog[g].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy):
h.push(l.Catalog[g].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy)}0>=d.length?(a.BMItem2=h[Math.floor(Math.random()*h.length)],a.BMItem3=h[Math.floor(Math.random()*h.length)]):0>=h.length?(a.BMItem2=d[Math.floor(Math.random()*d.length)],a.BMItem3=d[Math.floor(Math.random()*d.length)]):(a.BMItem2=d[Math.floor(Math.random()*d.length)],a.BMItem3=h[Math.floor(Math.random()*h.length)]);server.UpdateUserInternalData({PlayFabId:b,Data:a});g=[];g.push("BlackMarketResetMinutes");b=server.GetTitleData({PlayFabId:b,
Keys:g});a.BMTime=60*parseInt(b.Data.BlackMarketResetMinutes);return a}function GetCurrentBlackMarket(b,l){var a={},e=new Date,d=[];d.push("BlackMarketResetMinutes");d=server.GetTitleData({PlayFabId:b,Keys:d});a.BMTime=60*parseInt(d.Data.BlackMarketResetMinutes)-Math.floor((e.getTime()-l.Data.BMTime.Value)/1E3);for(e=0;4>e;e++)a["BMItem"+e]=l.Data["BMItem"+e].Value;return a}
handlers.purchaseBMItem=function(b,l){log.debug("purchasing item "+b.itemId+" from black market");if(0>b.itemId||3<b.itemId)return generateFailObj("invalid item index");var a=[];a.push("BMItem"+b.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),e=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+b.itemId].Value.split("_");log.debug("userArray: "+a);var d=e.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var h;h=2>b.itemId?"PartCards":"CarCards";var g=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),d=checkBalance(a[1],g,d,d);if("OK"!=d)return d;var f,c;log.debug("searching for: "+a[0]+" in "+h);for(d=0;d<e.Inventory.length;d++)if(e.Inventory[d].ItemId==a[0]&&e.Inventory[d].CatalogVersion==h){log.debug("found it!");f=e.Inventory[d].ItemInstanceId;void 0==e.Inventory[d].CustomData?(log.debug("no custom data. creating ..."),c={Amount:1}):void 0==e.Inventory[d].CustomData.Amount?c={Amount:1}:(c=Number(e.Inventory[d].CustomData.Amount)+
1,isNaN(c)&&(c=1),c={Amount:c});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:c});break}void 0==f&&(log.debug("cardInstance is undefined"),f=[],f.push(a[0]),f=server.GrantItemsToUser({CatalogVersion:h,PlayFabId:currentPlayerId,ItemIds:f}).ItemGrantResults[0].ItemInstanceId,void 0==f?generateErrObj("grantRequest denied"):(c={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:c})));f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:a[1],Amount:g});g=a[0]+"_"+a[1]+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];log.debug("generatedArray: "+g);e={};e["BMItem"+b.itemId]=g;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:e});c=[{ItemId:a[0],CatalogVersion:h,CustomData:c}];h={};h[f.VirtualCurrency]=f.Balance;a=b.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];d={Inventory:c,VirtualCurrency:h};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:d,BMItemChange:a}};
handlers.retrieveBlackMarket=function(b,l){var a=[];a.push("BMTime");for(var e=0;4>e;e++)a.push("BMItem"+e);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a});if(void 0==a.Data.BMTime)return log.debug("No user BM data detected; generating ..."),GenerateBlackMarket(currentPlayerId);e=new Date;log.debug("milliseconds passed: "+e.getTime());log.debug("BMTime: "+a.Data.BMTime.Value);var d=[];d.push("BlackMarketResetMinutes");d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:d});if(e.getTime()-
parseInt(a.Data.BMTime.Value)>6E4*parseInt(d.Data.BlackMarketResetMinutes))return log.debug("regenerating market"),GenerateBlackMarket(currentPlayerId);if(1==b.reset)return log.debug("reseting market"),GenerateBlackMarket(currentPlayerId);log.debug("get current market");return GetCurrentBlackMarket(currentPlayerId,a)};
handlers.updateCarCust=function(b,l){for(var a=server.GetUserInventory({PlayFabId:currentPlayerId}),e=[],d="-1",h={},g={PaintJobs:{itemOwned:"no",itemCustData:b.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:b.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:b.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:b.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",itemCustData:b.wsId,carItemId:"WindshieldId"}},f=0;f<a.Inventory.length;f++)a.Inventory[f].ItemId==
b.carId&&"CarsProgress"==a.Inventory[f].CatalogVersion&&(d=a.Inventory[f].ItemInstanceId),a.Inventory[f].ItemId in g&&(g[a.Inventory[f].ItemId].itemOwned="yes",g[a.Inventory[f].ItemId].itemCustData in a.Inventory[f].CustomData?h[g[a.Inventory[f].ItemId].carItemId]=g[a.Inventory[f].ItemId].itemCustData:log.debug("user doesn't own: "+a.Inventory[f].ItemId+" "+g[a.Inventory[f].ItemId].itemCustData));if("-1"==d)return generateFailObj("User does not own car with id: "+b.carId);for(var c in g)g.hasOwnProperty(c)&&
"no"==g[c].itemOwned&&e.push(c);if(h=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d,Data:h});a=[{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:h}];if(0<e.length)for(e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e}),d={0:"Owned"},f=0;f<e.ItemGrantResults.length;f++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:e.ItemGrantResults[f].ItemInstanceId,Data:d});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:a}}};
handlers.purchaseItems=function(b,l){log.debug("RETRIEVING USER INVENTORY");var a=server.GetUserInventory({PlayFabId:currentPlayerId}),e=a.VirtualCurrency.SC,d=a.VirtualCurrency.HC;log.debug("user currency: SC: "+e+" HC: "+d);switch(b.purchaseType){case "carUpgrade":log.debug("== carUpgrade request: carId: "+b.carId);log.debug("RETRIEVING CARDS CATALOGUE");for(var h=server.GetCatalogItems({CatalogVersion:"CarCards"}),g=!1,f,c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.carId&&"CarsProgress"==
a.Inventory[c].CatalogVersion){g=!0;log.debug("car is in user's inventory!");f=a.Inventory[c];break}for(var k,c=0;c<h.Catalog.length;c++)if(h.Catalog[c].ItemId==b.carId){k=JSON.parse(h.Catalog[c].CustomData);log.debug("cardInfo found!");break}if(void 0==k)return log.error("cardInfo undefined!"),k={Result:"Error",Message:"CardNotFoundForCarwithID: "+b.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data."};if(1==g){log.debug("user has car: "+b.carId+
"... upgrading");var m=parseInt(f.CustomData.CarLvl)+1,r=parseInt(k.baseCurrCost)+m*parseInt(k.currCostPerLvl),d=checkBalance(k.currType,r,e,d);if("OK"!=d)return d;log.debug("user has enough currency. Let's check for card balance");d=parseInt(k.baseCardCost)+parseInt(f.CustomData.CarLvl)*parseInt(k.cardCostPerLvl);log.debug("cardCost: "+d);for(var g=!1,q,c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.carId&&"CarCards"==a.Inventory[c].CatalogVersion){log.debug("consuming: "+a.Inventory[c].ItemInstanceId);
g=!0;try{if(void 0==a.Inventory[c].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");if(void 0==a.Inventory[c].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(a.Inventory[c].CustomData.Amount)>=d)a.Inventory[c].CustomData.Amount-=d,q={Amount:a.Inventory[c].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[c].ItemInstanceId,Data:q});else return generateFailObj("Insufficient cards for real: "+
a.Inventory[c].CustomData.Amount+" vs "+d)}catch(u){return log.debug("itemConsumptionResult.errorCode "+u),generateFailObj("Insufficient cards")}break}if(0==g)return generateFailObj("No cards found");log.debug("user has enough cards to purchase upgrade!");a=recalculateCarPr(f.CustomData,f.ItemId,h,void 0);log.debug("upgrading to car lvl: "+m+" and pr: "+a);c={CarLvl:m,Pr:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemInstanceId,Data:c});var n;0<r&&(n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:k.currType,Amount:r}));log.debug("Upgrade Complete!");a=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:q},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:c}];k={};c={Inventory:a};void 0!=n&&(k[n.VirtualCurrency]=n.Balance,c.VirtualCurrency=k);k={Result:"OK",Message:"InventoryUpdate",InventoryChange:c}}else{log.debug("user doesn't have car: "+b.carId+"... looking for card");for(var g=!1,t,c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.carId&&"CarCards"==a.Inventory[c].CatalogVersion){log.debug("consuming: "+
a.Inventory[c].ItemInstanceId);g=!0;try{if(void 0==a.Inventory[c].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0==a.Inventory[c].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");if(Number(a.Inventory[c].CustomData.Amount)>=Number(k.baseCardCost))t=a.Inventory[c].ItemInstanceId,a.Inventory[c].CustomData.Amount-=k.baseCardCost,q={Amount:a.Inventory[c].CustomData.Amount};else return generateFailObj("Insufficient cards: "+a.Inventory[c].CustomData.Amount+
" vs "+k.baseCardCost+".")}catch(u){return generateFailObj("Insufficient cards: "+u)}break}if(0==g)return generateFailObj("No cards found");log.debug("user has enough cards to purchase car. Checking if enough currency is availabe");d=checkBalance(k.currType,k.baseCurrCost,e,d);if("OK"!=d)return d;c=[];c.push(b.carId);d=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c});if(0==d.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),
generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:t,Data:q});0<k.baseCurrCost&&(n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:k.currType,Amount:k.baseCurrCost}));c={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,
Data:c});c={TiresLvl:"0",TurboLvl:"0",PaintId:k.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:c});c={PlatesId:"0",WindshieldId:"0",Pr:k.basePr};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:c});for(var e=d=!1,p,c=0;c<a.Inventory.length;c++)if("PaintJobs"==a.Inventory[c].ItemId){e=!0;log.debug("user has paintjobs");
void 0!=a.Inventory[c].CustomData?(log.debug("user has paintjobs customData"),k.defaultPaintID in a.Inventory[c].CustomData?(log.debug("user has paintjob already"),d=!0):(log.debug("user doesn't have paintjob"),p={},p[k.defaultPaintID]="Owned")):(p={},p[k.defaultPaintID]="Owned");void 0!=p&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[c].ItemInstanceId,Data:p});break}0==e&&(paintToGive=[],paintToGive.push("PaintJobs"),a=server.GrantItemsToUser({CatalogVersion:"Customization",
PlayFabId:currentPlayerId,ItemIds:paintToGive}),p={},p[k.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:p}));c={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:k.defaultPaintID,DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:k.basePr};a=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:q},{ItemId:b.carId,CatalogVersion:"CarsProgress",
CustomData:c}];0==d&&(c={},c[k.defaultPaintID]="Owned",a.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:c}));k={};c={Inventory:a};void 0!=n&&(k[n.VirtualCurrency]=n.Balance,c.VirtualCurrency=k);k={Result:"OK",Message:"InventoryUpdateNewCar",InventoryChange:c}}return k;case "partUpgrade":log.debug("Upgrading Part: "+b.partId+" on Car: "+b.carId);log.debug("Checking to see if car exists in catalog");q=server.GetCatalogItems({CatalogVersion:"CarsProgress"});p=!1;for(c=0;c<q.Catalog.length;c++)if(q.Catalog[c].ItemId==
b.carId){p=!0;break}if(0==p)return log.error("invalid car ID"),k={Result:"Error",Message:"car with ID: "+b.carId+" not found in catalog."};log.debug("Checking to see if part exists in catalog");q=server.GetCatalogItems({CatalogVersion:"PartCards"});p=!1;for(c=0;c<q.Catalog.length;c++)if(q.Catalog[c].ItemId==b.partId){k=JSON.parse(q.Catalog[c].CustomData);p=!0;break}if(0==p)return log.error("invalid part ID"),k={Result:"Error",Message:"part with ID: "+b.partId+" not found in catalog."};log.debug("Checking to see if user has car: "+
b.carId);g=!1;for(c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.carId&&"CarsProgress"==a.Inventory[c].CatalogVersion){g=!0;log.debug("car is in user's inventory!");f=a.Inventory[c];break}if(0==g)return generateFailObj("car with ID: "+b.carId+" not found in user inventory.");log.debug("Checking to see if user has part and or has enough parts");p=!1;for(c=0;c<a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.partId&&"PartCards"==a.Inventory[c].CatalogVersion){p=!0;log.debug("part is in user's inventory!");
h={};g={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"};log.debug("calculating "+b.partId+" cost and modifying "+g[b.partId]);t=parseInt(k.baseCardCost,10)+parseInt(f.CustomData[g[b.partId]],10)*parseInt(k.cardCostPerLvl,10);var v=parseInt(f.CustomData[g[b.partId]])+1,r=Number(k.baseCurrCost)+v*Number(k.currCostPerLvl);h[g[b.partId]]=v;f.CustomData[g[b.partId]]=v;log.debug("we need: "+t+" cards and "+r+" money => base: "+parseInt(k.baseCurrCost)+
" lvls: "+parseInt(f.CustomData[g[b.partId]])+" perLvlCost: "+parseInt(k.currCostPerLvl)+" equalling: "+parseInt(f.CustomData[g[b.partId]],10)*parseInt(k.currCostPerLvl,10));d=checkBalance(k.currType,r,e,d);if("OK"!=d)return d;log.debug("consuming part instance: "+a.Inventory[c].ItemInstanceId);try{if(void 0!=a.Inventory[c].CustomData&&void 0!=a.Inventory[c].CustomData.Amount&&a.Inventory[c].CustomData.Amount>=t)a.Inventory[c].CustomData.Amount-=t,m={Amount:a.Inventory[c].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.Inventory[c].ItemInstanceId,Data:m});else return generateFailObj("Insufficient cards")}catch(u){return log.debug("itemConsumptionResult.errorCode "+u),generateFailObj("Insufficient cards")}break}if(0==p)return generateFailObj("Part not found");0<r&&(n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:k.currType,Amount:r}));a=recalculateCarPr(f.CustomData,f.ItemId,void 0,q);h.Pr=a;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemInstanceId,
Data:h});a=[{ItemId:b.partId,CatalogVersion:"PartCards",CustomData:m},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:h}];log.debug("succesfully upgraded part!");k={};c={Inventory:a};void 0!=n&&(k[n.VirtualCurrency]=n.Balance,c.VirtualCurrency=k);return k={Result:"OK",Message:"InventoryUpdatePart",InventoryChange:c};case "custPurchase":log.debug("Purchasing Customization: "+b.custId+" with val: "+b.custVal);log.debug("Checking to see if customization exists in catalog");f=server.GetCatalogItems({CatalogVersion:"Customization"});
k=0;n="SC";for(c=0;c<f.Catalog.length;c++)if(f.Catalog[c].ItemId==b.custId){v=f.Catalog[c];k=JSON.parse(f.Catalog[c].CustomData);c=b.custVal+",Cost";n=k[b.custVal+",Curr"];k=k[c];d=checkBalance(n,k,e,d);if("OK"!=d)return d;log.debug("custCurr: "+n);log.debug("custPrice: "+k);break}if(void 0==v)return log.error("Customization does not exist in catalog"),k={Result:"Error",Message:"Customization does not exist in catalog."};log.debug("Checking to see if user has said customization");for(var w,c=0;c<
a.Inventory.length;c++)if(a.Inventory[c].ItemId==b.custId){log.debug("user has customization category!");w=a.Inventory[c];g=a.Inventory[c].ItemInstanceId;if(void 0!=w.CustomData&&String(b.custVal)in w.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==w){log.info("user doesn't have customization category. Granting ... ");c=[];c.push(b.custId);a=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:c});if(0==a.ItemGrantResults[0].Result)return log.error("something went wrong while granting user customization class object"),
k={Result:"Error",Message:"something went wrong while granting user customization class object."};g=a.ItemGrantResults[0].ItemInstanceId}a={};a[String(b.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g,Data:a});a=[{ItemId:b.custId,CatalogVersion:"Customization",CustomData:a}];0<k?(n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:n,Amount:k}),k={},k[n.VirtualCurrency]=n.Balance,c={Inventory:a,VirtualCurrency:k}):c=
{Inventory:a};return k={Result:"OK",Message:"InventoryUpdateNewCustomization",InventoryChange:c};case "softCurrencyPurchase":log.debug("Purchasing pack: "+b.packId);log.debug("Checking to see if pack exists in catalog");n=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});a=!1;for(c=e=0;c<n.Catalog.length;c++)if(n.Catalog[c].ItemId==b.packId){e=n.Catalog[c].VirtualCurrencyPrices.HC;k=JSON.parse(n.Catalog[c].CustomData);a=!0;break}if(0==a)return k={Result:"Error",Message:"pack with ID: "+
b.packId+" not found in catalog."};if(0>=e)return k={Result:"Error",Message:"pack with ID: "+b.packId+" shouldn't have negative cost."};if(e>d)return generateFailObj("Not enough HC.");n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:e});a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:k.quantity});k={};k[a.VirtualCurrency]=a.Balance;k[n.VirtualCurrency]=n.Balance;return k={Result:"OK",Message:"SoftCurrencyPurchased",
InventoryChange:{VirtualCurrency:k}};default:log.debug("invalid purchase parameter")}};handlers.giveMoney=function(b){b=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.amount});var l={};l[b.VirtualCurrency]=b.Balance;return{Result:"OK",Message:"CurrencyChanged",InventoryChange:{VirtualCurrency:l}}};
handlers.grantItems=function(b){for(var l=server.GetUserInventory({PlayFabId:currentPlayerId}),a,e=!1,d=0;d<l.Inventory.length;d++)if(l.Inventory[d].ItemId==b.itemId&&l.Inventory[d].CatalogVersion==b.catalogId){log.debug("adding amount to: "+l.Inventory[d].ItemInstanceId);a=void 0==l.Inventory[d].CustomData?b.amount:void 0==l.Inventory[d].CustomData.Amount?b.amount:isNaN(Number(l.Inventory[d].CustomData.Amount))?b.amount:Number(l.Inventory[d].CustomData.Amount)+b.amount;a={Amount:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:l.Inventory[d].ItemInstanceId,Data:a});e=!0;break}0==e&&(l=[],l.push(b.itemId),l=server.GrantItemsToUser({CatalogVersion:b.catalogId,PlayFabId:currentPlayerId,ItemIds:l}),a={Amount:b.amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:l.ItemGrantResults[0].ItemInstanceId,Data:a}));return{Result:"OK",Message:"InventoryUpdated",InventoryChange:{Inventory:[{ItemId:b.itemId,CatalogVersion:b.catalogId,CustomData:a}]}}};
handlers.openChest=function(b,l){var a=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<b.currCost){if("OK"!=checkBalance(b.currType,b.currCost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.currType,Amount:b.currCost})}for(var e in b.currencyReq)0<b.currencyReq[e]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:e,Amount:b.currencyReq[e]});var d;
for(e in b.carCardsRequest)if(log.debug(e+" : "+b.carCardsRequest[e]),b.carCardsRequest.hasOwnProperty(e)){d=!1;log.debug("looking for: "+e);for(var h=0;h<a.Inventory.length;h++)if(a.Inventory[h].ItemId==e&&"CarCards"==a.Inventory[h].CatalogVersion){log.debug("adding amount to: "+a.Inventory[h].ItemInstanceId);d=void 0==a.Inventory[h].CustomData?Number(b.carCardsRequest[e]):void 0==a.Inventory[h].CustomData.Amount?Number(b.carCardsRequest[e]):isNaN(Number(a.Inventory[h].CustomData.Amount))?Number(b.carCardsRequest[e]):
Number(a.Inventory[h].CustomData.Amount)+Number(b.carCardsRequest[e]);d={Amount:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[h].ItemInstanceId,Data:d});d=!0;break}0==d&&(h=[e],h=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:h}),d={Amount:b.carCardsRequest[e]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:d}))}for(e in b.partCardsRequest)if(log.debug(e+
" : "+b.partCardsRequest[e]),b.partCardsRequest.hasOwnProperty(e)){d=!1;log.debug("looking for: "+e);for(h=0;h<a.Inventory.length;h++)if(a.Inventory[h].ItemId==e&&"PartCards"==a.Inventory[h].CatalogVersion){log.debug("adding amount to: "+a.Inventory[h].ItemInstanceId);d=void 0==a.Inventory[h].CustomData?Number(b.partCardsRequest[e]):void 0==a.Inventory[h].CustomData.Amount?Number(b.partCardsRequest[e]):isNaN(Number(a.Inventory[h].CustomData.Amount))?Number(b.partCardsRequest[e]):Number(a.Inventory[h].CustomData.Amount)+
Number(b.partCardsRequest[e]);d={Amount:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[h].ItemInstanceId,Data:d});d=!0;break}0==d&&(h=[e],h=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:h}),d={Amount:b.partCardsRequest[e]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:d}))}return{Result:"OK",Message:"InventoryUpdated",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId})}};
handlers.buyChest=function(b,l){var a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(b.curr,b.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<b.cost){var a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.cost}),e={};e[a.VirtualCurrency]=a.Balance;return{Result:"OK",Message:"ChestBought",InventoryChange:{VirtualCurrency:e}}}return{Result:"OK",Message:"ChestBought",InventoryChange:{}}};
handlers.getServerTime=function(b,l){return{time:new Date}};
