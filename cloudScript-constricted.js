function checkCarDataValidity(c,f){if(void 0==c.CustomData){try{var b={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:b});b={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:b});for(var d=0,e=0;e<f.Catalog.length;e++)if(f.Catalog[e].ItemId==c.ItemId){var g=
JSON.parse(f.Catalog[e].CustomData),d=parseInt(g.basePr);break}b={PlatesId:"0",WindshieldId:"0",Pr:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemInstanceId,Data:b})}catch(h){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:d}}return"OK"}function generateFailObj(c){return{Result:"Failed",Message:c}}
function generateErrObj(c){return{Result:"Error",Message:c}}function CheckMaintenance(){var c=server.GetTitleData({Key:["Maintenance"]});return c.Data.Maintenance?c.Data.Maintenance:"true"}function generateMaintenanceObj(){return{Result:"Maintenance",Message:"Servers are temporarily offline"}}function generateInventoryChange(c,f){return{Result:"OK",Message:c,InventoryChange:f}}
function checkBalance(c,f,b,d){if("SC"==c){if(b<f)return generateFailObj("NotEnoughSC")}else if(d<f)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(c){var f=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==f.Data.LeagueSubdivisions||void 0==f.Data.SubdivisionTrophyRanges)return 1;for(var b=JSON.parse(f.Data.LeagueSubdivisions).leagues,f=JSON.parse(f.Data.SubdivisionTrophyRanges).subdivisions,d=0;d<b.length;d++)if(!(Number(c)>Number(f[b[d]])))return d}
function recalculateCarPr(c,f,b,d){var e=0,g;g=void 0===b?server.GetCatalogItems({CatalogVersion:"CarCards"}):b;for(b=0;b<g.Catalog.length;b++)if(g.Catalog[b].ItemId==f){e=JSON.parse(g.Catalog[b].CustomData);e=parseInt(e.basePr)+getObjectValueFromLevel(e,"prPerLvl",c.CarLvl);break}d=void 0===d?server.GetCatalogItems({CatalogVersion:"PartCards"}):d;c={Exhaust:c.ExhaustLvl,Engine:c.EngineLvl,Gearbox:c.GearboxLvl,Suspension:c.SuspensionLvl,Tires:c.TiresLvl,Turbo:c.TurboLvl};for(b=0;b<d.Catalog.length;b++)f=
JSON.parse(d.Catalog[b].CustomData),e+=getObjectValueFromLevel(f,"prPerLvl",Number(c[d.Catalog[b].ItemId]));return e}
function GenerateBlackMarket(c){var f=1,b=server.GetPlayerStatistics({PlayFabId:c,StatisticNames:["League"]});0!=b.Statistics.length&&(f=b.Statistics[0].Value.toString());0>=Number(f)&&(f=1);for(var d=server.GetCatalogItems({CatalogVersion:"PartCards"}),b=server.GetTitleData({PlayFabId:c,Keys:["BlackMarketResetMinutes","BlackMarketRarityBias"]}),e=JSON.parse(b.Data.BlackMarketRarityBias),g,h=[],a=[],k=[],l=0;l<d.Catalog.length;l++){g=JSON.parse(d.Catalog[l].CustomData);if(void 0==g)return generateErrObj("Part card "+
d.Catalog[l].ItemId+" has no custom data.");0==g.rarity&&h.push(d.Catalog[l].ItemId+"_"+g.BMCurrType+"_"+g.BMbasePrice+"_0_"+g.BMpriceIncrPerBuy);1==g.rarity&&a.push(d.Catalog[l].ItemId+"_"+g.BMCurrType+"_"+g.BMbasePrice+"_0_"+g.BMpriceIncrPerBuy);2==g.rarity&&k.push(d.Catalog[l].ItemId+"_"+g.BMCurrType+"_"+g.BMbasePrice+"_0_"+g.BMpriceIncrPerBuy)}d={};d.BMTime=(new Date).getTime();l=Math.floor(Math.random()*h.length);d.BMItem0=h[l];2<=h.length&&h.splice(l,1);Math.floor(100*Math.random())<Number(e.parts[2])?
h=k:(l=Number(e.parts[0])+Number(e.parts[1]),Math.floor(Math.random()*l)>=Number(e.parts[0])&&(h=a));d.BMItem1=h[Math.floor(Math.random()*h.length)];g=server.GetCatalogItems({CatalogVersion:"CarCards"});for(var m,h=[],a=[],k=[],l=0;l<g.Catalog.length;l++){m=JSON.parse(g.Catalog[l].CustomData);if(void 0==m)return generateErrObj("Car card "+g.Catalog[l].ItemId+" has no custom data.");Number(m.unlockedAtRank)>=Number(f)+1||("0"==m.rarity&&h.push(g.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+
"_0_"+m.BMpriceIncrPerBuy),"1"==m.rarity&&a.push(g.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy),"2"==m.rarity&&k.push(g.Catalog[l].ItemId+"_"+m.BMCurrType+"_"+m.BMbasePrice+"_0_"+m.BMpriceIncrPerBuy))}f=Math.floor(Math.random()*h.length);d.BMItem2=h[f];2<=h.length&&h.splice(f,1);0>=a.length&&(0>=k.length?k=a=h:a=k);0>=k.length&&(k=a);Math.floor(100*Math.random())<Number(e.cars[2])?h=k:(l=Number(e.cars[0])+Number(e.cars[1]),Math.floor(Math.random()*l)>=Number(e.cars[0])&&
(h=a));f=Math.floor(Math.random()*h.length);d.BMItem3=h[f];server.UpdateUserInternalData({PlayFabId:c,Data:d});d.BMTime=60*parseInt(b.Data.BlackMarketResetMinutes);return d}function GetCurrentBlackMarket(c,f){var b={},d=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:c,Keys:e});b.BMTime=60*parseInt(e.Data.BlackMarketResetMinutes)-Math.floor((d.getTime()-f.Data.BMTime.Value)/1E3);for(d=0;4>d;d++)b["BMItem"+d]=f.Data["BMItem"+d].Value;return b}
function GetValueFromStatistics(c,f,b){for(var d,e=0;e<c.length;e++)c[e].StatisticName===f&&(d=c[e]);return void 0===d?void 0!==b?b:0:Number(d.Value)}function getCatalogItem(c,f){for(var b=server.GetCatalogItems({CatalogVersion:c}),d=0;d<b.Catalog.length;d++)if(b.Catalog[d].ItemId===f)return b.Catalog[d]}function getObjectValueFromLevel(c,f,b,d){d||(d=0);if(!c[f]||!c[f].length)return d;var e=Number(c[f].length);b>=e&&(b=e-1);return Number(c[f][b])||d}
handlers.buyChest=function(c,f){if("false"==c.debug&&"true"==CheckMaintenance())return generateMaintenanceObj();var b=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(c.curr,c.cost,b.VirtualCurrency.SC,b.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<c.cost){var b=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.curr,Amount:c.cost}),d={};d[b.VirtualCurrency]=b.Balance;return generateInventoryChange("ChestBought",{VirtualCurrency:d})}return generateInventoryChange("ChestBought",
{})};
handlers.endGame=function(c,f){if("false"==c.debug&&"true"==CheckMaintenance())return generateMaintenanceObj();var b="01",d,e="0";"rWin"==c.outcome&&(e="1");var g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=g.Statistics.length&&(d=g.Statistics[0].Value.toString(),b=Number(d).toString(2));var g=0,h;h=Array(b.length);for(var a=0;a<h.length-1;a++)h[a]=b[a];h[h.length-1]=e;b=h;e=b.length;for(a=0;a<b.length;a++)"1"==b[a]&&g++;h=Math.round(g/e*100);var k=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),
e=0,l,g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=g.Statistics.length&&(e=g.Statistics[0].Value,log.debug("getting trophy count "+g.Statistics[0].Value));l=e=Number(e);g=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["trophyLose","trophyWin"]});g=void 0==g.Data.trophyLose||void 0==g.Data.trophyWin?45:Number(g.Data.trophyLose.Value)+Number(g.Data.trophyWin.Value);"rWin"==c.outcome&&(e+=g);log.debug("trophies change: "+l+" => "+e);g=calculateLeague(e);
for(a=d=0;a<b.length;a++)"1"==b[a]&&(d+=Math.pow(2,a));a=[];a.push({StatisticName:"WinLoss",Version:"0",Value:d});b={StatisticName:"TrophyCount",Version:"0",Value:e};a.push(b);b={StatisticName:"League",Version:"0",Value:g};a.push(b);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a});a=JSON.parse(c.recordingHeader);if(10>=Number(a.Score)){var m={TrophyCount:e,League:g};return{Result:m}}a=JSON.parse(c.recordingHeader);log.debug("score: "+a.Score);b=JSON.parse(k.Data.SubdivisionTrophyRanges);
for(a=0;a<b.subdivisions.length;a++)if(l<b.subdivisions[a]){m=a;break}a=[];a.push({Key:c.envIndex+"_"+c.courseIndex+"_RecPos",Value:c.recordingPos});a.push({Key:c.envIndex+"_"+c.courseIndex+"_RecRot",Value:c.recordingRot});a.push({Key:c.envIndex+"_"+c.courseIndex+"_RecHeader",Value:c.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:a});a=server.GetTitleInternalData({Key:"RecSubDivision"+m}).Data["RecSubDivision"+m];if(void 0==a)b=[],h={wl:h,e:c.envIndex,c:c.courseIndex,
uId:currentPlayerId},b.push(h);else{b=JSON.parse(a);h={wl:h,e:c.envIndex,c:c.courseIndex,uId:currentPlayerId};k=!1;for(a=l=0;a<b.length;a++)b[a].uId==currentPlayerId&&l++;if(2<l)return m={TrophyCount:e,League:g},{Result:m};for(a=0;a<b.length;a++)if(b[a].e==c.envIndex&&b[a].c==c.courseIndex){k=!0;b[a]=h;if(1==b.length)break;if(0<a)if(b[a].wl>b[a-1].wl){if(a==b.length-1)break;for(l=a+1;l<b.length;l++)if(b[l-1].wl>b[l].wl)d=b[l],b[l]=b[l-1],b[l-1]=d;else break}else for(l=a-1;0<=l;l--)if(b[l+1].wl<b[l].wl)d=
b[l],b[l]=b[l+1],b[l+1]=d;else break;else for(l=a+1;l<b.length;l++)if(b[l-1].wl>b[l].wl)d=b[l],b[l]=b[l-1],b[l-1]=d;else break}0==k&&b.push(h)}a=JSON.stringify(b);server.SetTitleInternalData({Key:"RecSubDivision"+m,Value:a});m={TrophyCount:e,League:g};return{Result:m}};
function UpdateExperience(c,f,b,d,e,g){c=JSON.parse(getCatalogItem(c,f).CustomData)[b];f=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds;f=f[f.length-1];g=g||server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["Experience"]}).Statistics;g=GetValueFromStatistics(g,"Experience",0);if(g>=f)return f;if(isNaN(Number(c)))b=Number(c.length),d>=b&&(d=b-1),d=Number(c[d]);else if(d=Number(c),0===d)return g;g=Math.min(g+d,f);if(!e)return g;server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,
Statistics:[{StatisticName:"Experience",Version:"0",Value:g}]});return g}handlers.getServerTime=function(c,f){return{time:new Date}};
handlers.initServerData=function(c){c=[];var f={StatisticName:"TrophyCount",Version:"0",Value:"0"};c.push(f);f={StatisticName:"League",Version:"0",Value:"0"};c.push(f);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});c=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var f={0:"Owned"},b=0;b<c.ItemGrantResults.length;b++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[b].ItemInstanceId,Data:f});c=[];c.push("FordFocus");c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c});f={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:f});f={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:f});f={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:f});f=[];f.push("Engine");f=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:f});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:{Amount:"5"}});f={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:f})};
handlers.openChest=function(c,f){if("false"==c.debug&&"true"==CheckMaintenance())return generateMaintenanceObj();if(0<c.levelUpRewardIndex){var b=0,d=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LastLevelReward"]}),e={LastLevelReward:0};void 0==d.Data.LastLevelReward?server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}):b=d.Data.LastLevelReward.Value;var g=JSON.parse(getCatalogItem("Balancing","BalancingItem").CustomData).LevelThresholds,d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,
StatisticNames:["Experience"]}).Statistics,h=GetValueFromStatistics(d,"Experience",0);0==h&&(d=[],d.push({StatisticName:"Experience",Version:"0",Value:0}),server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:d}));for(var a=g.length,d=0;d<g.length;d++)if(!(h>=g[d])){a=d;break}if(Number(c.levelUpRewardIndex)<=Number(a))b=Number(c.levelUpRewardIndex),e.LastLevelReward=b,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:e}),d=""+b,d="000".substring(0,3-d.length)+d,server.GrantItemsToUser({CatalogVersion:"LevelUpRewards",
PlayFabId:currentPlayerId,ItemIds:d});else return generateFailObj("already got reward for level: "+b)}b=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<c.currCost){if("OK"!=checkBalance(c.currType,c.currCost,b.VirtualCurrency.SC,b.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c.currType,Amount:c.currCost})}for(var k in c.currencyReq)0<c.currencyReq[k]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:k,Amount:c.currencyReq[k]});for(k in c.carCardsRequest)if(c.carCardsRequest.hasOwnProperty(k)){e=!1;for(d=0;d<b.Inventory.length;d++)if(b.Inventory[d].ItemId==k&&"CarCards"==b.Inventory[d].CatalogVersion){e=void 0==b.Inventory[d].CustomData?Number(c.carCardsRequest[k]):void 0==b.Inventory[d].CustomData.Amount?Number(c.carCardsRequest[k]):isNaN(Number(b.Inventory[d].CustomData.Amount))?Number(c.carCardsRequest[k]):Number(b.Inventory[d].CustomData.Amount)+Number(c.carCardsRequest[k]);
e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[d].ItemInstanceId,Data:e});e=!0;break}0==e&&(d=[k],d=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:d}),e={Amount:c.carCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:e}))}for(k in c.partCardsRequest)if(c.partCardsRequest.hasOwnProperty(k)){e=!1;for(d=0;d<b.Inventory.length;d++)if(b.Inventory[d].ItemId==
k&&"PartCards"==b.Inventory[d].CatalogVersion){e=void 0==b.Inventory[d].CustomData?Number(c.partCardsRequest[k]):void 0==b.Inventory[d].CustomData.Amount?Number(c.partCardsRequest[k]):isNaN(Number(b.Inventory[d].CustomData.Amount))?Number(c.partCardsRequest[k]):Number(b.Inventory[d].CustomData.Amount)+Number(c.partCardsRequest[k]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[d].ItemInstanceId,Data:e});e=!0;break}0==e&&(d=[k],d=server.GrantItemsToUser({CatalogVersion:"PartCards",
PlayFabId:currentPlayerId,ItemIds:d}),e={Amount:c.partCardsRequest[k]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:e}))}k=server.GetUserInventory({PlayFabId:currentPlayerId});c.chestId&&0>=c.levelUpRewardIndex&&(d=UpdateExperience("Chests",c.chestId,"xpGain",0,!0),k.Experience=d);return generateInventoryChange("InventoryUpdated",k)};
handlers.purchaseBMItem=function(c,f){if("false"==c.debug&&"true"==CheckMaintenance())return generateMaintenanceObj();if(0>c.itemId||3<c.itemId)return generateFailObj("invalid item index");var b=[];b.push("BMItem"+c.itemId);var b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:b}),d=server.GetUserInventory({PlayFabId:currentPlayerId}),b=b.Data["BMItem"+c.itemId].Value.split("_"),e=d.VirtualCurrency[b[1]];5!=b.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");var g;
g=2>c.itemId?"PartCards":"CarCards";var h=parseInt(b[2])+parseInt(b[3])*parseInt(b[4]),e=checkBalance(b[1],h,e,e);if("OK"!=e)return e;for(var a,k,e=0;e<d.Inventory.length;e++)if(d.Inventory[e].ItemId==b[0]&&d.Inventory[e].CatalogVersion==g){a=d.Inventory[e].ItemInstanceId;void 0===d.Inventory[e].CustomData?k={Amount:1}:void 0===d.Inventory[e].CustomData.Amount?k={Amount:1}:(k=Number(d.Inventory[e].CustomData.Amount)+1,isNaN(k)&&(k=1),k={Amount:k});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a,Data:k});break}void 0===a&&(a=[],a.push(b[0]),a=server.GrantItemsToUser({CatalogVersion:g,PlayFabId:currentPlayerId,ItemIds:a}).ItemGrantResults[0].ItemInstanceId,void 0===a?generateErrObj("grantRequest denied"):(k={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a,Data:k})));a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b[1],Amount:h});h=b[0]+"_"+b[1]+"_"+b[2]+"_"+(parseInt(b[3])+1)+"_"+b[4];d={};d["BMItem"+
c.itemId]=h;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});k=[{ItemId:b[0],CatalogVersion:g,CustomData:k}];g={};g[a.VirtualCurrency]=a.Balance;b=c.itemId+"_"+b[2]+"_"+(parseInt(b[3])+1)+"_"+b[4];e={Inventory:k,VirtualCurrency:g};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:e,BMItemChange:b}};
handlers.purchaseItems=function(c,f){log.debug("args debug is: "+c.debug);if("false"==c.debug&&"true"==CheckMaintenance())return generateMaintenanceObj();var b=server.GetUserInventory({PlayFabId:currentPlayerId}),d=b.VirtualCurrency.SC,e=b.VirtualCurrency.HC;switch(c.purchaseType){case "carUpgrade":return upgradeCar(c,b,d,e);case "partUpgrade":return upgradePart(c,b,d,e);case "custPurchase":for(var g=server.GetCatalogItems({CatalogVersion:"Customization"}),h,a=0,k="SC",l=0;l<g.Catalog.length;l++)if(g.Catalog[l].ItemId==
c.custId){h=g.Catalog[l];cardInfo=JSON.parse(g.Catalog[l].CustomData);a=c.custVal+",Cost";k=cardInfo[c.custVal+",Curr"];a=cardInfo[a];e=checkBalance(k,a,d,e);if("OK"!=e)return e;break}if(void 0==h)return generateErrObj("Customization does not exist in catalog.");for(var m,n,l=0;l<b.Inventory.length;l++)if(b.Inventory[l].ItemId==c.custId){m=b.Inventory[l];n=b.Inventory[l].ItemInstanceId;if(void 0!=m.CustomData&&String(c.custVal)in m.CustomData)return generateFailObj("User already has this customization.");
break}if(void 0==m){log.info("user doesn't have customization category. Granting ... ");e=[];e.push(c.custId);e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e});if(0==e.ItemGrantResults[0].Result)return generateErrObj("something went wrong while granting user customization class object.");n=e.ItemGrantResults[0].ItemInstanceId}e={};e[String(c.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:n,Data:e});
e=[{ItemId:c.custId,CatalogVersion:"Customization",CustomData:e}];0<a?(k=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:k,Amount:a}),a={},a[k.VirtualCurrency]=k.Balance,l={Inventory:e,VirtualCurrency:a}):l={Inventory:e};return generateInventoryChange("InventoryUpdateNewCustomization",l);case "softCurrencyPurchase":k=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});a=!1;for(l=n=0;l<k.Catalog.length;l++)if(k.Catalog[l].ItemId==c.packId){n=k.Catalog[l].VirtualCurrencyPrices.HC;
cardInfo=JSON.parse(k.Catalog[l].CustomData);a=!0;break}if(0==a)return generateErrObj("pack with ID: "+c.packId+" not found in catalog.");if(0>=n)return generateErrObj("pack with ID: "+c.packId+" shouldn't have negative cost.");if(n>e)return generateFailObj("Not enough HC.");k=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:n});e=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:cardInfo.quantity});a={};a[e.VirtualCurrency]=
e.Balance;a[k.VirtualCurrency]=k.Balance;return generateInventoryChange("SoftCurrencyPurchased",{VirtualCurrency:a});default:log.debug("invalid purchase parameter")}};handlers.requestCurrency=function(c){return"false"==c.debug&&"true"==CheckMaintenance()?generateMaintenanceObj():{VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.requestInventory=function(c){if("false"==c.debug&&"true"==CheckMaintenance())return generateMaintenanceObj();c=server.GetUserInventory({PlayFabId:currentPlayerId});for(var f=server.GetCatalogItems({CatalogVersion:"CarCards"}),b=server.GetCatalogItems({CatalogVersion:"PartCards"}),d=!1,e=0;e<c.Inventory.length;e++)if("CarsProgress"==c.Inventory[e].CatalogVersion){var d=!0,g=checkCarDataValidity(c.Inventory[e],f);if("PlayFabError"==g||void 0===g)return generateErrObj("PlayfabError");"OK"==
g?log.debug("Data for "+c.Inventory[e].ItemId+" OK"):c.Inventory[e].CustomData=g;c.Inventory[e].CustomData.Pr=recalculateCarPr(c.Inventory[e].CustomData,c.Inventory[e].ItemId,f,b);g={};g.Pr=c.Inventory[e].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.Inventory[e].ItemInstanceId,Data:g})}return!1===d?(c=[],c.push("FordFocus"),c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c}),f={CarLvl:"1",EngineLvl:"0",
ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:f}),f={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:f}),f={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,
Data:f}),generateErrObj("UserHasNoCars ... reiniting")):c};
handlers.retrieveBlackMarket=function(c,f){if("false"==c.debug&&"true"==CheckMaintenance())return generateMaintenanceObj();var b=[];b.push("BMTime");for(var d=0;4>d;d++)b.push("BMItem"+d);b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:b});if(void 0===b.Data.BMTime)return GenerateBlackMarket(currentPlayerId);var d=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:e});if(!0===c.reset){b="HC";d=200;e=server.GetTitleData({Keys:["BlackMarketResetCost"]});
void 0!==e.Data.BlackMarketResetCost&&(d=e.Data.BlackMarketResetCost.split("_"),b=d[0],d=Number(d[1]));if(0<d){e=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(b,d,e.VirtualCurrency.SC,e.VirtualCurrency.HC))return generateFailObj("not enough money");d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b,Amount:d});b=GenerateBlackMarket(currentPlayerId);e={};e[d.VirtualCurrency]=d.Balance;d={VirtualCurrency:e};b.InventoryChange=d;return b}return GenerateBlackMarket(currentPlayerId)}return d.getTime()-
parseInt(b.Data.BMTime.Value)>6E4*parseInt(e.Data.BlackMarketResetMinutes)?GenerateBlackMarket(currentPlayerId):GetCurrentBlackMarket(currentPlayerId,b)};
handlers.startGame=function(c,f){if("false"==c.debug&&"true"==CheckMaintenance())return generateMaintenanceObj();var b="10",d,e=50,g,h=0;g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});if(0!=g.Statistics.length){d=g.Statistics[0].Value.toString();b=Number(d).toString(2);g=b.length;for(var a=0;a<b.length;a++)"1"==b[a]&&h++;e=Math.round(h/g*100)}b+="0";20<b.length&&(b=b.slice(1));var k=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges","TrophyGainRange",
"TrophyLoseRange","SubdivisionPrRanges"]});g=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});h=0;0!=g.Statistics.length&&(h=g.Statistics[0].Value);var h=Number(h),l=JSON.parse(k.Data.SubdivisionTrophyRanges);d=JSON.parse(k.Data.LeagueSubdivisions);var m=JSON.parse(k.Data.SubdivisionPrRanges),n=43,t=43;g=k.Data.TrophyGainRange.split("_");var x=k.Data.TrophyLoseRange.split("_"),B=Number(g[0]);g=Number(g[1]);k=Number(x[0]);x=Number(x[1]);for(a=0;a<l.subdivisions.length;a++)if(h<
Number(l.subdivisions[a])){n=a;a<l.subdivisions.length-1&&(t=a+1);break}t=Number(l.subdivisions[t])-Number(l.subdivisions[n]);0>=t&&(t=400);var u=server.GetTitleInternalData({Keys:"RecSubDivision"+n}).Data["RecSubDivision"+n],p=!1;void 0==u&&(p=!0);var v,q=n="noop",w,a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:["lastOpp"]});if(void 0==a.Data||void 0==a.Data.lastOpp)q=n="noop";else for(w=a.Data.lastOpp.Value.split(","),a=0;a<w.length;a++)0==a&&(n=w[a]),1==a&&(q=w[a]);v=0==p?JSON.parse(u):
[];var E=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];15>v.length&&(p=!0);var C=Array(v.length),y=0,u=Array(v.length);w=0;for(var D=Array(v.length),z=0,a=0;a<v.length;a++)1==p&&(E[5*Number(v[a].e)+Number(v[a].c)]=1),v[a].uId!=currentPlayerId&&(C[y]=v[a],y++,v[a].uId!=n&&(u[w]=v[a],w++,v[a].uId!=q&&(D[z]=v[a],z++)));if(1==p){for(a=q=p=0;a<E.length;a++)if(0==E[a]){p=Math.floor(a/5);q=a%5;break}a=server.GetTitleData({Keys:"MasterUser"});if(void 0!=a.Data.MasterUser&&(a=server.GetUserReadOnlyData({PlayFabId:a.Data.MasterUser,
Keys:[p+"_"+q+"_RecPos",p+"_"+q+"_RecRot",p+"_"+q+"_RecHeader"]}),void 0!=a.Data&&void 0!=a.Data[p+"_"+q+"_RecPos"]&&void 0!=a.Data[p+"_"+q+"_RecRot"]&&void 0!=a.Data[p+"_"+q+"_RecHeader"])){n=!0;0==h?(h=g,n=!1):h-=k;1>=h&&(h=1);d=parseInt(b,2);var b=[],A={StatisticName:"WinLoss",Version:"0",Value:d};b.push(A);h={StatisticName:"TrophyCount",Version:"0",Value:h};b.push(h);h={StatisticName:"League",Version:"0",Value:r};b.push(h);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});
b={trophyWin:g,trophyLose:k};0==n&&(b.trophyWin=0,b.trophyLose=0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});return{Result:"OK",RecType:"TheStig",PosData:a.Data[p+"_"+q+"_RecPos"].Value,RotData:a.Data[p+"_"+q+"_RecRot"].Value,HeaderData:a.Data[p+"_"+q+"_RecHeader"].Value,TrophyLose:k,TrophyWin:g,Opp:"Mniezo"}}}if(0==y)return generateErrObj("no valid recording found for this subdivision");r=C;p=y;0<w&&(p=w,r=u);0<z&&(p=z,r=D);u=p-1;for(a=0;a<p;a++)if(r[a].wl>e){u=a;break}e=Math.min(p,
3);q=Array(e);for(a=0;a<e;a++)q[a]=0>=u?r[a]:u>=p-1?r[p-1-a]:r[u-Math.floor(e/2)+a];r=Math.floor(Math.random()*e);a=q[r].uId;e=q[r].e;p=q[r].c;q=server.GetUserReadOnlyData({PlayFabId:a,Keys:[e+"_"+p+"_RecPos",e+"_"+p+"_RecRot",e+"_"+p+"_RecHeader"]});if(void 0==q)return generateErrObj("Did not find recording for this user: "+a);var u=server.GetPlayerCombinedInfo({PlayFabId:a,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,
GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}}),D=h,r=Number(calculateLeague(h));w="UserGenerated";z=0<r?Number(l.subdivisions[d.leagues[r-1]]):0;C=r>=d.leagues.length-1?2*z:Number(l.subdivisions[d.leagues[r]]);y=JSON.parse(q.Data[e+"_"+p+"_RecHeader"].Value);void 0!=y&&(A=y.Trophies);A=Number(A);0>=C-z?l=g:Number(Math.abs(D-A))>Number(t)?(l=Math.floor((k+x)/2),k=Math.floor((g+B)/2),w="MobyDick"):(l=k+Math.floor((x-k)/2*((D-A)/(C-z)+1)),k=B+Math.floor((g-B)/
2*((A-D)/(C-z)+1)));y.Pr>Number(m.subdivisions[d.leagues[r-1]])&&(log.debug("Opponent's PR is TOO DAMN HIGH! "+y.Pr+" vs "+Number(m.subdivisions[d.leagues[r-1]])),w="MobyDick");m=!0;0==h?(m=!1,h=g):(h-=Number(l),1>=h&&(h=1));d=parseInt(b,2);b=[];A={StatisticName:"WinLoss",Version:"0",Value:d};b.push(A);h={StatisticName:"TrophyCount",Version:"0",Value:h};b.push(h);h={StatisticName:"League",Version:"0",Value:r};b.push(h);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b={trophyWin:k,
trophyLose:l,lastOpp:a+","+n};0==m&&(b.trophyWin=0,b.trophyLose=0);server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:b});return{Result:"OK",RecType:w,PosData:q.Data[e+"_"+p+"_RecPos"].Value,RotData:q.Data[e+"_"+p+"_RecRot"].Value,HeaderData:q.Data[e+"_"+p+"_RecHeader"].Value,TrophyLose:l,TrophyWin:k,Opp:u.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateCarCust=function(c,f){if("false"==c.debug&&"true"==CheckMaintenance())return generateMaintenanceObj();for(var b=server.GetUserInventory({PlayFabId:currentPlayerId}),d=[],e="-1",g={},h={PaintJobs:{itemOwned:"no",itemCustData:c.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:c.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:c.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:c.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",itemCustData:c.wsId,
carItemId:"WindshieldId"}},a=0;a<b.Inventory.length;a++)b.Inventory[a].ItemId==c.carId&&"CarsProgress"==b.Inventory[a].CatalogVersion&&(e=b.Inventory[a].ItemInstanceId),b.Inventory[a].ItemId in h&&(h[b.Inventory[a].ItemId].itemOwned="yes",h[b.Inventory[a].ItemId].itemCustData in b.Inventory[a].CustomData?g[h[b.Inventory[a].ItemId].carItemId]=h[b.Inventory[a].ItemId].itemCustData:log.debug("user doesn't own: "+b.Inventory[a].ItemId+" "+h[b.Inventory[a].ItemId].itemCustData));if("-1"==e)return generateFailObj("User does not own car with id: "+
c.carId);for(var k in h)h.hasOwnProperty(k)&&"no"==h[k].itemOwned&&d.push(k);if(g=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e,Data:g});b=[{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:g}];if(0<d.length)for(d=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:d}),e={0:"Owned"},a=0;a<d.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:d.ItemGrantResults[a].ItemInstanceId,Data:e});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:b}}};
function upgradeCar(c,f,b,d){for(var e=server.GetCatalogItems({CatalogVersion:"CarCards"}),g=!1,h,a=0;a<f.Inventory.length;a++)if(f.Inventory[a].ItemId==c.carId&&"CarsProgress"==f.Inventory[a].CatalogVersion){g=!0;h=f.Inventory[a];break}for(var k,a=0;a<e.Catalog.length;a++)if(e.Catalog[a].ItemId==c.carId){k=JSON.parse(e.Catalog[a].CustomData);break}if(void 0===k)return generateErrObj("CardNotFoundForCarwithID: "+c.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data.");
if(!0===g){var l=parseInt(h.CustomData.CarLvl)+1;if(l>=Number(k.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var m=getObjectValueFromLevel(k,"currCostPerLvl",l),a=checkBalance(k.currType,m,b,d);if("OK"!=a)return a;b=getObjectValueFromLevel(k,"cardCostPerLvl",l);h.CustomData.CarLvl=l;for(var g=!1,n,a=0;a<f.Inventory.length;a++)if(f.Inventory[a].ItemId==c.carId&&"CarCards"==f.Inventory[a].CatalogVersion){g=!0;try{if(void 0===f.Inventory[a].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");
if(void 0===f.Inventory[a].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(f.Inventory[a].CustomData.Amount)>=b)f.Inventory[a].CustomData.Amount-=b,n={Amount:f.Inventory[a].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.Inventory[a].ItemInstanceId,Data:n});else return generateFailObj("Insufficient cards for real: "+f.Inventory[a].CustomData.Amount+" vs "+b)}catch(x){return generateFailObj("Insufficient cards")}break}if(!1===
g)return generateFailObj("No cards found");f=recalculateCarPr(h.CustomData,h.ItemId,e,void 0);a={CarLvl:l,Pr:f};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemInstanceId,Data:a});var t;0<m&&(t=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:k.currType,Amount:m}));c=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:n},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:a}];n={};a={Inventory:c};void 0!=t&&(n[t.VirtualCurrency]=
t.Balance,a.VirtualCurrency=n);a.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+k.rarity,l,!0);return generateInventoryChange("InventoryUpdate",a)}g=!1;for(a=0;a<f.Inventory.length;a++)if(f.Inventory[a].ItemId==c.carId&&"CarCards"==f.Inventory[a].CatalogVersion){g=!0;try{if(void 0===f.Inventory[a].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0===f.Inventory[a].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");
if(Number(f.Inventory[a].CustomData.Amount)>=Number(k.cardCostPerLvl[1]))m=f.Inventory[a].ItemInstanceId,f.Inventory[a].CustomData.Amount-=k.cardCostPerLvl[1],n={Amount:f.Inventory[a].CustomData.Amount};else return generateFailObj("Insufficient cards: "+f.Inventory[a].CustomData.Amount+" vs "+k.cardCostPerLvl[1]+".")}catch(x){return generateFailObj("Insufficient cards: "+x)}break}if(0==g)return generateFailObj("No cards found");a=checkBalance(k.currType,k.currCostPerLvl[1],b,d);if("OK"!=a)return a;
h=[];h.push(c.carId);h=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:h});if(!1===h.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:m,Data:n});0<k.currCostPerLvl[1]&&(t=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:k.currType,Amount:k.currCostPerLvl[1]}));a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:k.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:a});a={PlatesId:"0",WindshieldId:"0",
Pr:Number(k.basePr)+k.prPerLvl[1]};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemGrantResults[0].ItemInstanceId,Data:a});e=h=!1;for(a=0;a<f.Inventory.length;a++)if("PaintJobs"==f.Inventory[a].ItemId){e=!0;void 0!=f.Inventory[a].CustomData?k.defaultPaintID in f.Inventory[a].CustomData?h=!0:(l={},l[k.defaultPaintID]="Owned"):(l={},l[k.defaultPaintID]="Owned");void 0!=l&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.Inventory[a].ItemInstanceId,
Data:l});break}0==e&&(paintToGive=[],paintToGive.push("PaintJobs"),f=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),l={},l[k.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:l}));a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:k.defaultPaintID,DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",
Pr:Number(k.basePr)+k.prPerLvl[1]};c=[{ItemId:c.carId,CatalogVersion:"CarCards",CustomData:n},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:a}];0==h&&(n={},n[k.defaultPaintID]="Owned",c.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:n}));n={};a={Inventory:c};void 0!=t&&(n[t.VirtualCurrency]=t.Balance,a.VirtualCurrency=n);a.Experience=UpdateExperience("Balancing","BalancingItem","Car_"+k.rarity,1,!0);return generateInventoryChange("InventoryUpdateNewCar",a)}
function upgradePart(c,f,b,d){for(var e=server.GetCatalogItems({CatalogVersion:"CarsProgress"}),g=!1,h=0;h<e.Catalog.length;h++)if(e.Catalog[h].ItemId==c.carId){g=!0;break}if(!1===g)return generateErrObj("car with ID: "+c.carId+" not found in catalog.");for(var e=server.GetCatalogItems({CatalogVersion:"PartCards"}),g=!1,a,h=0;h<e.Catalog.length;h++)if(e.Catalog[h].ItemId==c.partId){a=JSON.parse(e.Catalog[h].CustomData);g=!0;break}if(0==g)return generateErrObj("part with ID: "+c.partId+" not found in catalog.");
for(var g=!1,k,h=0;h<f.Inventory.length;h++)if(f.Inventory[h].ItemId==c.carId&&"CarsProgress"==f.Inventory[h].CatalogVersion){g=!0;k=f.Inventory[h];break}if(!1===g)return generateFailObj("car with ID: "+c.carId+" not found in user inventory.");for(var l=!1,g=0,m={},h=0;h<f.Inventory.length;h++)if(f.Inventory[h].ItemId==c.partId&&"PartCards"==f.Inventory[h].CatalogVersion){var l=!0,n={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"},
g=parseInt(k.CustomData[n[c.partId]])+1;if(g>=Number(a.prPerLvl.length))return generateFailObj("Maximum pr level was reached!");var t=getObjectValueFromLevel(a,"cardCostPerLvl",g),x=getObjectValueFromLevel(a,"currCostPerLvl",g);m[n[c.partId]]=g;k.CustomData[n[c.partId]]=g;var B;b=checkBalance(a.currType,x,b,d);if("OK"!=b)return b;try{if(void 0!==f.Inventory[h].CustomData&&void 0!==f.Inventory[h].CustomData.Amount&&f.Inventory[h].CustomData.Amount>=t)f.Inventory[h].CustomData.Amount-=t,B={Amount:f.Inventory[h].CustomData.Amount},
server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.Inventory[h].ItemInstanceId,Data:B});else return generateFailObj("Insufficient cards")}catch(p){return generateFailObj("Insufficient cards")}break}if(0==l)return generateFailObj("Part not found");var u;0<x&&(u=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a.currType,Amount:x}));h=recalculateCarPr(k.CustomData,k.ItemId,void 0,e);m.Pr=h;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:k.ItemInstanceId,Data:m});k={};h={Inventory:[{ItemId:c.partId,CatalogVersion:"PartCards",CustomData:B},{ItemId:c.carId,CatalogVersion:"CarsProgress",CustomData:m}]};void 0!==u&&(k[u.VirtualCurrency]=u.Balance,h.VirtualCurrency=k);h.Experience=UpdateExperience("Balancing","BalancingItem","Parts_"+a.rarity,g,!0);return generateInventoryChange("InventoryUpdatePart",h)};
