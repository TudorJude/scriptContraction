handlers.endGame=function(a,g){var b="01",e="0";"rWin"==a.outcome&&(e="1");var d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=d.Statistics.length&&(b=d.Statistics[0].Value,log.debug("wlStat "+b));var l;if(50>b.length){b+=e;l=b.length;for(d=0;d<b.length;d++)"1"==b[d]&&win++;log.debug("wlStatNew "+b)}else{l=b.length;for(d=0;d<b.length-1;d++)b[d]=b[d+1],"1"==b[d]&&win++;b[b.length-1]=e;"1"==e&&win++;log.debug("wlStatNewMoreThanMax "+b)}log.debug("winRatio "+Math.round(0/
l*100));d=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]});l=0;e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=e.Statistics.length&&(l=e.Statistics[0].Value);e=l;"rWin"==a.val&&(l=0>=l?30:l+60);var k=[];k.push({StatisticName:"WinLoss",Version:"0",Value:b});k.push({StatisticName:"TrophyCount",Version:"0",Value:l});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:k});if("rOot"!=a.val){b=JSON.parse(d.Data.SubdivisionTrophyRanges);
log.debug("SubdivisionTrophyRanges "+b);for(var h,d=0;d<b.subdivisions.length;d++)if(e<b.subdivisions[d]){h=d;break}log.debug("user is in subdivision "+h);b=[];b.push({Key:a.envIndex+"_"+a.courseIndex+"_RecPos",Value:a.recordingPos});b.push({Key:a.envIndex+"_"+a.courseIndex+"_RecRot",Value:a.recordingRot});b.push({Key:a.envIndex+"_"+a.courseIndex+"_RecHeader",Value:a.recordingHeader});server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:b});d=server.GetTitleInternalData({Key:"RecSubDivision"+
h});h=(d.Data["RecSubDivision"+h]||"").split(",");var c;if(6>h.length)log.debug("adding "+currentPlayerId+" to str: "+c),c=(c=d.Data["Rec_"+a.envIndex+"_"+a.courseIndex])?c+(","+currentPlayerId):currentPlayerId;else{for(d=1;d<h.length;d++)h[d-1]=h[d];h[h.length-1]=currentPlayerId;c=h[0]+",";for(d=1;d<h.length-1;d++)c+=h[d]+",";c+=h[h.length-1]}log.debug("users: "+c);server.SetTitleInternalData({Key:"Rec_"+a.envIndex+"_"+a.courseIndex,Value:c});return{dicVal:b}}};
handlers.requestSplitPlayerRecording=function(a,g){for(var b=server.GetTitleInternalData({Keys:"Rec_"+a.envIndex+"_"+a.courseIndex}).Data["Rec_"+a.envIndex+"_"+a.courseIndex].split(","),e=b[0],d=0;d<b.length;d++)if(b[d]!=currentPlayerId){e=b[d];break}b=server.GetUserReadOnlyData({PlayFabId:e,Keys:["RecPos_"+a.envIndex+"_"+a.courseIndex,"RecRot_"+a.envIndex+"_"+a.courseIndex,"RecHeader_"+a.envIndex+"_"+a.courseIndex]});e=server.GetPlayerCombinedInfo({PlayFabId:e,InfoRequestParameters:{GetUserAccountInfo:!0,
GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}});return{PosData:b.Data["RecPos_"+a.envIndex+"_"+a.courseIndex].Value,RotData:b.Data["RecRot_"+a.envIndex+"_"+a.courseIndex].Value,HeaderData:b.Data["RecHeader_"+a.envIndex+"_"+a.courseIndex].Value,Opp:e.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateTrophyCount=function(a,g){var b=0,e=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=e.Statistics.length&&(b=e.Statistics[0].Value);"rStart"==a.val&&(b-=30);0>b&&(b=0);"rWin"==a.val&&(b+=60);if("rLose"==a.val)return{val:b};e=[];e.push({StatisticName:"TrophyCount",Version:"0",Value:b});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:e});if("rWin"==a.val)return{val:b}};
handlers.initServerData=function(a){a=[];var g={StatisticName:"TrophyCount",Version:"0",Value:"0"};a.push(g);g={StatisticName:"League",Version:"0",Value:"0"};a.push(g);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:a});a=[];a.push("Decals");a.push("PaintJobs");a.push("Plates");a.push("Rims");a.push("WindshieldText");a=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:a});for(var g={0:"Owned"},b=0;b<a.ItemGrantResults.length;b++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.ItemGrantResults[b].ItemInstanceId,Data:g});a=[];a.push("FordFocus");a=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:a});g={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:g});g={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:g});g={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:g});server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:3E3});server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:200})};
handlers.requestInventory=function(a){a=server.GetUserInventory({PlayFabId:currentPlayerId});for(var g=0;g<a.Inventory.length;g++)if("CarsProgress"==a.Inventory[g].CatalogVersion){log.debug("found "+a.Inventory[g].ItemId);a.Inventory[g].CustomData.Pr=recalculateCarPr(a.Inventory[g].CustomData,a.Inventory[g].ItemId);var b={};b.Pr=a.Inventory[g].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[g].ItemInstanceId,Data:b})}return a};
function generateFailObj(a){return{Result:"Failed",Message:a}}function generateErrObj(a){return{Result:"Error",Message:a}}function checkBalance(a,g,b,e){if("SC"==a){if(b<g)return generateFailObj("NotEnoughSC")}else if(e<g)return generateFailObj("NotEnoughHC");return"OK"}
function recalculateCarPr(a,g){for(var b=0,e=server.GetCatalogItems({CatalogVersion:"CarCards"}),d=0;d<e.Catalog.length;d++)if(e.Catalog[d].ItemId==g){d=JSON.parse(e.Catalog[d].CustomData);b+=parseInt(d.basePr)+parseInt(d.prPerLvl)*(parseInt(a.CarLvl)-1);break}for(var e=server.GetCatalogItems({CatalogVersion:"PartCards"}),l={Exhaust:a.ExhaustLvl,Engine:a.EngineLvl,Gearbox:a.GearboxLvl,Suspension:a.SuspensionLvl,Tires:a.TiresLvl,Turbo:a.TurboLvl},k,d=0;d<e.Catalog.length;d++)k=JSON.parse(e.Catalog[d].CustomData),
b+=parseInt(k.basePr)+parseInt(k.prPerLvl)*l[e.Catalog[d].ItemId];return b}
function GenerateBlackMarket(a){var g=server.GetCatalogItems({CatalogVersion:"PartCards"}),b={};b.BMTime=(new Date).getTime();var e=Math.floor(Math.random()*g.Catalog.length),d=JSON.parse(g.Catalog[e].CustomData);if(void 0==d)return generateErrObj("Part card "+g.Catalog[k].ItemId+" has no custom data.");b.BMItem0=g.Catalog[e].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy;var l=Math.floor(Math.random()*g.Catalog.length);l==e&&(l=g.Catalog.length-e-1);d=JSON.parse(g.Catalog[l].CustomData);
if(void 0==d)return generateErrObj("Part card "+g.Catalog[k].ItemId+" has no custom data.");b.BMItem1=g.Catalog[l].ItemId+"_"+d.BMCurrType+"_"+d.BMbasePrice+"_0_"+d.BMpriceIncrPerBuy;for(var g=server.GetCatalogItems({CatalogVersion:"CarCards"}),d=[],l=[],k=0;k<g.Catalog.length;k++){e=JSON.parse(g.Catalog[k].CustomData);if(void 0==e)return generateErrObj("Car card "+g.Catalog[k].ItemId+" has no custom data.");"false"==e.rareCar?d.push(g.Catalog[k].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy):
l.push(g.Catalog[k].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy)}0>=d.length?(b.BMItem2=l[Math.floor(Math.random()*l.length)],b.BMItem3=l[Math.floor(Math.random()*l.length)]):0>=l.length?(b.BMItem2=d[Math.floor(Math.random()*d.length)],b.BMItem3=d[Math.floor(Math.random()*d.length)]):(b.BMItem2=d[Math.floor(Math.random()*d.length)],b.BMItem3=l[Math.floor(Math.random()*l.length)]);server.UpdateUserInternalData({PlayFabId:a,Data:b});k=[];k.push("BlackMarketResetMinutes");a=server.GetTitleData({PlayFabId:a,
Keys:k});b.BMTime=60*parseInt(a.Data.BlackMarketResetMinutes);return b}function GetCurrentBlackMarket(a,g){var b={},e=new Date,d=[];d.push("BlackMarketResetMinutes");d=server.GetTitleData({PlayFabId:a,Keys:d});b.BMTime=60*parseInt(d.Data.BlackMarketResetMinutes)-Math.floor((e.getTime()-g.Data.BMTime.Value)/1E3);for(e=0;4>e;e++)b["BMItem"+e]=g.Data["BMItem"+e].Value;return b}
handlers.purchaseBMItem=function(a,g){log.debug("purchasing item "+a.itemId+" from black market");if(0>a.itemId||3<a.itemId)return generateFailObj("invalid item index");var b=[];b.push("BMItem"+a.itemId);b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:b});log.debug("RETRIEVING USER CURRENCY");var e=server.GetUserInventory({PlayFabId:currentPlayerId}),b=b.Data["BMItem"+a.itemId].Value.split("_");log.debug("userArray: "+b);var d=e.VirtualCurrency[b[1]];5!=b.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var e=2>a.itemId?"PartCards":"CarCards",l=parseInt(b[2])+parseInt(b[3])*parseInt(b[4]),d=checkBalance(b[1],l,d,d);if("OK"!=d)return d;try{d=[];d.push(b[0]);var k=server.GrantItemsToUser({CatalogVersion:e,PlayFabId:currentPlayerId,ItemIds:d}),h=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b[1],Amount:l}),c=b[0]+"_"+b[1]+"_"+b[2]+"_"+(parseInt(b[3])+1)+"_"+b[4];log.debug("generatedArray: "+c);l={};l["BMItem"+a.itemId]=c;server.UpdateUserInternalData({PlayFabId:currentPlayerId,
Data:l});c="1";void 0!=k.ItemGrantResults[0].RemainingUses&&(c=k.ItemGrantResults[0].RemainingUses);var f=[{ItemId:b[0],CatalogVersion:e,RemainingUses:c}],k={};k[h.VirtualCurrency]=h.Balance;var q=a.itemId+"_"+b[2]+"_"+(parseInt(b[3])+1)+"_"+b[4];return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:f,VirtualCurrency:k},BMItemChange:q}}catch(p){generateErrObj("Something went horribly wrong somewhere: "+p)}};
handlers.retrieveBlackMarket=function(a,g){var b=[];b.push("BMTime");for(var e=0;4>e;e++)b.push("BMItem"+e);b=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:b});if(void 0==b.Data.BMTime)return log.debug("No user BM data detected; generating ..."),GenerateBlackMarket(currentPlayerId);e=new Date;log.debug("milliseconds passed: "+e.getTime());log.debug("BMTime: "+b.Data.BMTime.Value);var d=[];d.push("BlackMarketResetMinutes");d=server.GetTitleData({PlayFabId:currentPlayerId,Keys:d});if(e.getTime()-
parseInt(b.Data.BMTime.Value)>6E4*parseInt(d.Data.BlackMarketResetMinutes))return log.debug("regenerating market"),GenerateBlackMarket(currentPlayerId);log.debug("get current market");return GetCurrentBlackMarket(currentPlayerId,b)};
handlers.updateCarCust=function(a,g){for(var b=server.GetUserInventory({PlayFabId:currentPlayerId}),e=[],d="-1",l={},k={PaintJobs:{itemOwned:"no",itemCustData:a.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:a.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:a.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:a.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",itemCustData:a.wsId,carItemId:"WindshieldId"}},h=0;h<b.Inventory.length;h++)b.Inventory[h].ItemId==
a.carId&&"CarsProgress"==b.Inventory[h].CatalogVersion&&(d=b.Inventory[h].ItemInstanceId),b.Inventory[h].ItemId in k&&(k[b.Inventory[h].ItemId].itemOwned="yes",k[b.Inventory[h].ItemId].itemCustData in b.Inventory[h].CustomData?l[k[b.Inventory[h].ItemId].carItemId]=k[b.Inventory[h].ItemId].itemCustData:log.debug("user doesn't own: "+b.Inventory[h].ItemId+" "+k[b.Inventory[h].ItemId].itemCustData));if("-1"==d)return generateFailObj("User does not own car with id: "+a.carId);for(var c in k)k.hasOwnProperty(c)&&
"no"==k[c].itemOwned&&e.push(c);if(l=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d,Data:l});b=[{ItemId:a.carId,CatalogVersion:"CarsProgress",CustomData:l}];if(0<e.length)for(e=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e}),d={0:"Owned"},h=0;h<e.ItemGrantResults.length;h++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:e.ItemGrantResults[h].ItemInstanceId,Data:d});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:b}}};
handlers.purchaseItems=function(a,g){log.debug("RETRIEVING USER INVENTORY");var b=server.GetUserInventory({PlayFabId:currentPlayerId}),e=b.VirtualCurrency.SC,d=b.VirtualCurrency.HC;log.debug("user currency: SC: "+e+" HC: "+d);switch(a.purchaseType){case "carUpgrade":log.debug("== carUpgrade request: carId: "+a.carId);log.debug("RETRIEVING CARDS CATALOGUE");for(var l=server.GetCatalogItems({CatalogVersion:"CarCards"}),k=!1,h,c=0;c<b.Inventory.length;c++)if(b.Inventory[c].ItemId==a.carId&&"CarsProgress"==
b.Inventory[c].CatalogVersion){k=!0;log.debug("car is in user's inventory!");h=b.Inventory[c];break}for(var f,c=0;c<l.Catalog.length;c++)if(l.Catalog[c].ItemId==a.carId){f=JSON.parse(l.Catalog[c].CustomData);log.debug("cardInfo found!");break}if(void 0==f)return log.error("cardInfo undefined!"),f={Result:"Error",Message:"CardNotFoundForCarwithID: "+a.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data."};if(1==k){log.debug("user has car: "+a.carId+
"... upgrading");l=parseInt(f.baseCurrCost)+parseInt(h.CustomData.CarLvl)*parseInt(f.currCostPerLvl);d=checkBalance(f.currType,l,e,d);if("OK"!=d)return d;log.debug("user has enough currency. Let's check for card balance");d=parseInt(f.baseCardCost)+parseInt(h.CustomData.CarLvl)*parseInt(f.cardCostPerLvl);log.debug("cardCost: "+d);for(var q=!1,c=0;c<b.Inventory.length;c++)if(b.Inventory[c].ItemId==a.carId&&"CarCards"==b.Inventory[c].CatalogVersion){log.debug("consuming: "+b.Inventory[c].ItemInstanceId);
q=!0;try{var p=server.ConsumeItem({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[c].ItemInstanceId,ConsumeCount:d})}catch(u){return log.debug("itemConsumptionResult.errorCode "+u),generateFailObj("Insufficient cards")}break}log.debug("user has enough cards to purchase upgrade!");if(0==q)return generateFailObj("No cards found");b=parseInt(h.CustomData.CarLvl)+1;c=recalculateCarPr(h.CustomData,h.ItemId);log.debug("upgrading to car lvl: "+b+" and pr: "+c);c={CarLvl:b,Pr:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:h.ItemInstanceId,Data:c});var m;0<l&&(m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:f.currType,Amount:l}));log.debug("Upgrade Complete!");c=[{ItemId:a.carId,CatalogVersion:"CarCards",RemainingUses:p.RemainingUses},{ItemId:a.carId,CatalogVersion:"CarsProgress",CustomData:c}];f={};c={Inventory:c};void 0!=m&&(f[m.VirtualCurrency]=m.Balance,c.VirtualCurrency=f);f={Result:"OK",Message:"InventoryUpdate",InventoryChange:c}}else{log.debug("user doesn't have car: "+
a.carId+"... looking for card");q=!1;for(c=0;c<b.Inventory.length;c++)if(b.Inventory[c].ItemId==a.carId&&"CarCards"==b.Inventory[c].CatalogVersion){log.debug("consuming: "+b.Inventory[c].ItemInstanceId);q=!0;try{p=server.ConsumeItem({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[c].ItemInstanceId,ConsumeCount:f.baseCardCost})}catch(u){return generateFailObj("Insufficient cards")}break}if(0==q)return generateFailObj("No cards found");log.debug("user has enough cards to purchase car. Checking if enough currency is availabe");
d=checkBalance(f.currType,f.baseCurrCost,e,d);if("OK"!=d)return d;c=[];c.push(a.carId);d=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:c});if(0==d.ItemGrantResults[0].Result){log.error("Something went wrong while giving user the item, refunding cards");m=[];for(c=0;c<f.baseCardCost;c++)m.push(a.carId);server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:m});return generateFailObj("Something went wrong while giving user the item, refunding cards.")}0<
f.baseCurrCost&&(m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:f.currType,Amount:f.baseCurrCost}));c={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:c});c={TiresLvl:"0",TurboLvl:"0",PaintId:f.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,
Data:c});c={PlatesId:"0",WindshieldId:"0",Pr:f.basePr};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:d.ItemGrantResults[0].ItemInstanceId,Data:c});h=d=!1;for(var n,c=0;c<b.Inventory.length;c++)if("PaintJobs"==b.Inventory[c].ItemId){h=!0;log.debug("user has paintjobs");void 0!=b.Inventory[c].CustomData?(log.debug("user has paintjobs customData"),f.defaultPaintID in b.Inventory[c].CustomData?(log.debug("user has paintjob already"),d=!0):(log.debug("user doesn't have paintjob"),
n={},n[f.defaultPaintID]="Owned")):(n={},n[f.defaultPaintID]="Owned");void 0!=n&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[c].ItemInstanceId,Data:n});break}0==h&&(paintToGive=[],paintToGive.push("PaintJobs"),c=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:paintToGive}),n={},n[f.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,
Data:n}));c={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:f.defaultPaintID,DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:f.basePr};c=[{ItemId:a.carId,CatalogVersion:"CarCards",RemainingUses:p.RemainingUses},{ItemId:a.carId,CatalogVersion:"CarsProgress",CustomData:c}];0==d&&(b={},b[f.defaultPaintID]="Owned",c.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:b}));f={};c={Inventory:c};void 0!=m&&(f[m.VirtualCurrency]=
m.Balance,c.VirtualCurrency=f);f={Result:"OK",Message:"InventoryUpdateNewCar",InventoryChange:c}}return f;case "partUpgrade":log.debug("Upgrading Part: "+a.partId+" on Car: "+a.carId);log.debug("Checking to see if car exists in catalog");n=server.GetCatalogItems({CatalogVersion:"CarsProgress"});k=!1;for(c=0;c<n.Catalog.length;c++)if(n.Catalog[c].ItemId==a.carId){k=!0;break}if(0==k)return log.error("invalid car ID"),f={Result:"Error",Message:"car with ID: "+a.carId+" not found in catalog."};log.debug("Checking to see if part exists in catalog");
n=server.GetCatalogItems({CatalogVersion:"PartCards"});k=!1;for(c=0;c<n.Catalog.length;c++)if(n.Catalog[c].ItemId==a.partId){f=JSON.parse(n.Catalog[c].CustomData);k=!0;break}if(0==k)return log.error("invalid part ID"),f={Result:"Error",Message:"part with ID: "+a.partId+" not found in catalog."};log.debug("Checking to see if user has car: "+a.carId);k=!1;for(c=0;c<b.Inventory.length;c++)if(b.Inventory[c].ItemId==a.carId&&"CarsProgress"==b.Inventory[c].CatalogVersion){k=!0;log.debug("car is in user's inventory!");
h=b.Inventory[c];break}if(0==k)return generateFailObj("car with ID: "+a.carId+" not found in user inventory.");log.debug("Checking to see whether user has enough money to upgrade part");log.debug("Checking to see if user has part and or has enough parts");n=!1;for(c=0;c<b.Inventory.length;c++)if(b.Inventory[c].ItemId==a.partId&&"PartCards"==b.Inventory[c].CatalogVersion){n=!0;log.debug("part is in user's inventory!");var q={},r={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",
Tires:"TiresLvl",Turbo:"TurboLvl"};log.debug("calculating "+a.partId+" cost and modifying "+r[a.partId]);var k=parseInt(f.baseCardCost)+parseInt(h.CustomData[r[a.partId]])*parseInt(f.cardCostPerLvl),l=parseInt(f.baseCurrCost)+parseInt(h.CustomData[r[a.partId]])*parseInt(f.currCostPerLvl),t=parseInt(h.CustomData[r[a.partId]])+1;q[r[a.partId]]=t;h.CustomData[r[a.partId]]=t;log.debug("we need: "+k+" cards");d=checkBalance(f.currType,l,e,d);if("OK"!=d)return d;log.debug("consuming part instance: "+b.Inventory[c].ItemInstanceId);
try{p=server.ConsumeItem({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[c].ItemInstanceId,ConsumeCount:k})}catch(u){return log.debug("itemConsumptionResult.errorCode "+u),generateFailObj("Insufficient cards")}break}if(0==n)return generateFailObj("Part not found");0<l&&(m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:f.currType,Amount:l}));c=recalculateCarPr(h.CustomData,h.ItemId);q.Pr=c;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:h.ItemInstanceId,
Data:q});c=[{ItemId:a.partId,CatalogVersion:"PartCards",RemainingUses:p.RemainingUses},{ItemId:a.carId,CatalogVersion:"CarsProgress",CustomData:q}];log.debug("succesfully upgraded part!");f={};c={Inventory:c};void 0!=m&&(f[m.VirtualCurrency]=m.Balance,c.VirtualCurrency=f);return f={Result:"OK",Message:"InventoryUpdatePart",InventoryChange:c};case "custPurchase":log.debug("Purchasing Customization: "+a.custId+" with val: "+a.custVal);log.debug("Checking to see if customization exists in catalog");
p=server.GetCatalogItems({CatalogVersion:"Customization"});f=0;m="SC";for(c=0;c<p.Catalog.length;c++)if(p.Catalog[c].ItemId==a.custId){r=p.Catalog[c];f=JSON.parse(p.Catalog[c].CustomData);c=a.custVal+",Cost";m=f[a.custVal+",Curr"];f=f[c];d=checkBalance(m,f,e,d);if("OK"!=d)return d;log.debug("custCurr: "+m);log.debug("custPrice: "+f);break}if(void 0==r)return log.error("Customization does not exist in catalog"),f={Result:"Error",Message:"Customization does not exist in catalog."};log.debug("Checking to see if user has said customization");
for(c=0;c<b.Inventory.length;c++)if(b.Inventory[c].ItemId==a.custId){log.debug("user has customization category!");t=b.Inventory[c];k=b.Inventory[c].ItemInstanceId;if(void 0!=t.CustomData&&String(a.custVal)in t.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==t){log.info("user doesn't have customization category. Granting ... ");c=[];c.push(a.custId);c=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:c});if(0==c.ItemGrantResults[0].Result)return log.error("something went wrong while granting user customization class object"),
f={Result:"Error",Message:"something went wrong while granting user customization class object."};k=c.ItemGrantResults[0].ItemInstanceId}c={};c[String(a.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k,Data:c});c=[{ItemId:a.custId,CatalogVersion:"Customization",CustomData:c}];0<f?(m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:m,Amount:f}),f={},f[m.VirtualCurrency]=m.Balance,c={Inventory:c,VirtualCurrency:f}):c=
{Inventory:c};return f={Result:"OK",Message:"InventoryUpdateNewCustomization",InventoryChange:c};case "softCurrencyPurchase":log.debug("Purchasing pack: "+a.packId);log.debug("Checking to see if pack exists in catalog");m=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});b=!1;for(c=p=0;c<m.Catalog.length;c++)if(m.Catalog[c].ItemId==a.packId){p=m.Catalog[c].VirtualCurrencyPrices.HC;f=JSON.parse(m.Catalog[c].CustomData);b=!0;break}if(0==b)return f={Result:"Error",Message:"pack with ID: "+
a.packId+" not found in catalog."};if(0>=p)return f={Result:"Error",Message:"pack with ID: "+a.packId+" shouldn't have negative cost."};if(p>d)return generateFailObj("Not enough HC.");m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:p});c=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:f.quantity});f={};f[c.VirtualCurrency]=c.Balance;f[m.VirtualCurrency]=m.Balance;return f={Result:"OK",Message:"SoftCurrencyPurchased",
InventoryChange:{VirtualCurrency:f}};default:log.debug("invalid purchase parameter")}};handlers.giveMoney=function(a){a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a.curr,Amount:a.amount});var g={};g[a.VirtualCurrency]=a.Balance;return{Result:"OK",Message:"CurrencyChanged",InventoryChange:{VirtualCurrency:g}}};
handlers.grantItems=function(a){for(var g=[],b=0;b<a.amount;b++)g.push(a.itemId);try{var e=server.GrantItemsToUser({CatalogVersion:a.catalogId,PlayFabId:currentPlayerId,ItemIds:g});return{Result:"OK",Message:"InventoryUpdated",InventoryChange:{Inventory:[{ItemId:a.itemId,CatalogVersion:a.catalogId,RemainingUses:e.ItemGrantResults[0].RemainingUses}]}}}catch(d){generateErrObj("Error: "+d)}};
handlers.buyChest=function(a,g){var b=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a.curr,a.cost,b.VirtualCurrency.SC,b.VirtualCurrency.HC))return generateFailObj("not enough money");var b=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a.curr,Amount:a.cost}),e={};e[b.VirtualCurrency]=b.Balance;return{Result:"OK",Message:"ChestBought",InventoryChange:{VirtualCurrency:e}}};handlers.getServerTime=function(a,g){return{time:new Date}};
