handlers.endGame=function(b,l){var a="01",d,c="0";"rWin"==b.outcome&&(c="1");var k=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=k.Statistics.length&&(d=k.Statistics[0].Value.toString(),log.debug("wlStatInt "+d),a=Number(d).toString(2),log.debug("wlStat "+a));var k=0,g;log.debug("wlStat.length "+a.length);g=Array(a.length);log.debug("tempString.length "+g.length);for(var f=0;f<g.length-1;f++)g[f]=a[f];g[g.length-1]=c;log.debug("tempString "+g);a=g;log.debug("wlStat "+
a);c=a.length;for(f=0;f<a.length;f++)"1"==a[f]&&k++;log.debug("wlStatNew "+a);g=Math.round(k/c*100);log.debug("winRatio "+g);var e=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),c=0,h,k=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=k.Statistics.length&&(c=k.Statistics[0].Value,log.debug("getting trophy count "+k.Statistics[0].Value));h=c;"rWin"==b.outcome&&(c=20>c?50:c+60);log.debug("trophies change: "+h+" => "+c);k=calculateLeague(c);
for(f=d=0;f<a.length;f++)"1"==a[f]&&(d+=Math.pow(2,f));f=[];f.push({StatisticName:"WinLoss",Version:"0",Value:d});a={StatisticName:"TrophyCount",Version:"0",Value:c};f.push(a);a={StatisticName:"League",Version:"0",Value:k};f.push(a);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:f});if("rOot"==b.outcome){var m={TrophyCount:c,League:k};return{Result:m}}a=JSON.parse(e.Data.SubdivisionTrophyRanges);log.debug("SubdivisionTrophyRanges "+a);for(f=0;f<a.subdivisions.length;f++)if(h<
a.subdivisions[f]){m=f;break}log.debug("user is in subdivision "+m);f=[];f.push({Key:b.envIndex+"_"+b.courseIndex+"_RecPos",Value:b.recordingPos});f.push({Key:b.envIndex+"_"+b.courseIndex+"_RecRot",Value:b.recordingRot});f.push({Key:b.envIndex+"_"+b.courseIndex+"_RecHeader",Value:b.recordingHeader});log.debug("updating user read only data ");f=server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:f});log.debug("updated user read only data for "+currentPlayerId+" "+f);f=server.GetTitleInternalData({Key:"RecSubDivision"+
m}).Data["RecSubDivision"+m];log.debug("recPool: "+f);if(void 0==f)a=[],g={wl:g,e:b.envIndex,c:b.courseIndex,uId:currentPlayerId},a.push(g),f=JSON.stringify(a),log.debug("recArray: "+f);else{a=JSON.parse(f);log.debug("recArray: "+a);g={wl:g,e:b.envIndex,c:b.courseIndex,uId:currentPlayerId};e=!1;for(f=h=0;f<a.length;f++)a[f].uId==currentPlayerId&&h++;if(2<h)return m={TrophyCount:c,League:k},{Result:m};for(f=0;f<a.length;f++)if(a[f].e==b.envIndex&&a[f].c==b.courseIndex){e=!0;a[f]=g;if(1==a.length)break;
if(0<f)if(a[f].wl>a[f-1].wl){if(f==a.length-1)break;for(h=f+1;h<a.length;h++)if(a[h-1].wl>a[h].wl)d=a[h],a[h]=a[h-1],a[h-1]=d;else break}else for(h=f-1;0<=h;h--)if(a[h+1].wl<a[h].wl)d=a[h],a[h]=a[h+1],a[h+1]=d;else break;else for(h=f+1;h<a.length;h++)if(a[h-1].wl>a[h].wl)d=a[h],a[h]=a[h-1],a[h-1]=d;else break}0==e&&(log.debug("recArrayLNbefore: "+a.length),a.push(g),log.debug("recArrayLNafter: "+a.length));f=JSON.stringify(a);log.debug("titleKeyVal: "+f)}server.SetTitleInternalData({Key:"RecSubDivision"+
m,Value:f});m={TrophyCount:c,League:k};return{Result:m}};
handlers.startGame=function(b,l){var a="01",d=50,c,k=0;c=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});if(0!=c.Statistics.length){a=c.Statistics[0].Value.toString();a=Number(a).toString(2);c=a.length;for(var g=0;g<a.length;g++)"1"==a[g]&&k++;d=Math.round(k/c*100)}log.debug("wlStatBeforeshiftandAdd "+a);a+="0";log.debug("wlStatBeforeshift "+a);20<a.length&&(a=a.slice(1));log.debug("wlStat "+a);c=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges",
"TrophyGainRange"]});var f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]}),k=0;0!=f.Statistics.length&&(k=f.Statistics[0].Value);var f=JSON.parse(c.Data.SubdivisionTrophyRanges),e=JSON.parse(c.Data.LeagueSubdivisions);log.debug("SubdivisionTrophyRanges "+f);for(var h=43,g=0;g<f.subdivisions.length;g++)if(k<f.subdivisions[g]){h=g;break}log.debug("user is in subdivision "+h);var g=server.GetTitleInternalData({Keys:"RecSubDivision"+h}).Data["RecSubDivision"+h],
m=!1;void 0==g&&(m=!0);var r,p;r=0==m?JSON.parse(g):[];var n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];log.debug("subrecording pool has "+r.length+" length. Must have: 15 length");15>r.length&&(m=!0);h=Array(r.length);p=0;log.debug("iterating through recArray");for(g=0;g<r.length;g++)1==m&&(n[5*Number(r[g].e)+Number(r[g].c)]=1),r[g].uId==currentPlayerId?log.debug("found: "+r[g].uId+"... skipping"):(h[p]=r[g],p++);log.debug("isIncompleteSubDivision: "+m);if(1==m){for(var u=0,q=0,g=0;g<n.length;g++)if(0==n[g]){u=
Math.floor(g/5);q=g%5;break}log.debug("gettingDefaultUser: env: "+u+" course: "+q);g=server.GetTitleData({Keys:"MasterUser"});if(void 0!=g.Data.MasterUser){log.debug("master user: "+g.Data.MasterUser);var w=server.GetUserReadOnlyData({PlayFabId:g.Data.MasterUser,Keys:[u+"_"+q+"_RecPos",u+"_"+q+"_RecRot",u+"_"+q+"_RecHeader"]});if(void 0!=w.Data&&(log.debug("defaultRecordingData: "+w.Data),void 0!=w.Data[u+"_"+q+"_RecPos"]&&void 0!=w.Data[u+"_"+q+"_RecRot"]&&void 0!=w.Data[u+"_"+q+"_RecHeader"])){k-=
15;0>=k&&(k=0);a=parseInt(a,2);log.debug("updating WL to:  "+a);var v=[],a={StatisticName:"WinLoss",Version:"0",Value:a};v.push(a);a={StatisticName:"TrophyCount",Version:"0",Value:k};v.push(a);a={StatisticName:"League",Version:"0",Value:t};v.push(a);log.debug("updatingStats: "+v);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:v});log.debug("found valid default rec");return{Result:"OK",RecType:"Default",PosData:w.Data[u+"_"+q+"_RecPos"].Value,RotData:w.Data[u+"_"+q+"_RecRot"].Value,
HeaderData:w.Data[u+"_"+q+"_RecHeader"].Value,Opp:"Mniezo"}}}}log.debug("looking for user generated recording");if(0==p)return generateErrObj("no valid recording found for this subdivision");m=p-1;for(g=0;g<p;g++)if(h[g].wl>d){m=g;break}log.debug("pivot is: "+m);d=Math.min(p,3);log.debug("finalRecArraySize: "+d);t=Array(d);for(g=0;g<d;g++)0>=m?t[g]=h[g]:m>=p-1?t[g]=h[p-1-g]:(log.debug("valoarea pizdii: "+(m-Math.floor(d/2)+g)),t[g]=h[m-Math.floor(d/2)+g]);log.debug("vrAidx: "+p);log.debug("validRecArray: "+
h);log.debug("finalRecArray: "+t);g=Math.floor(Math.random()*d);p=t[g].uId;d=t[g].e;g=t[g].c;t=[d+"_"+g+"_RecPos",d+"_"+g+"_RecRot",d+"_"+g+"_RecHeader"];log.debug("requesting "+t);h=server.GetUserReadOnlyData({PlayFabId:p,Keys:t});if(void 0==h)return generateErrObj("Did not find recording for this user: "+p);p=server.GetPlayerCombinedInfo({PlayFabId:p,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,
GetCharacterList:!1,GetTitleData:!1,GetPlayerStatistics:!1}});var m=k,t=calculateLeague(k);log.debug("lsValParsed: "+e);log.debug("lsValParsed.leagues: "+e.leagues);r=0<t?Number(f.subDivisions[e.leagues[t-1]]):0;f=t>=e.leagues.length-1?2*r:Number(f.subDivisions[e.leagues[t]]);e=c.Data.SubdivisionTrophyRanges.split("_");c=e[0];e=e[1];u=JSON.parse(w.Data[u+"_"+q+"_RecHeader"].Value);void 0!=u&&(v=u.Trophies);k-=0>=f-r?e:Math.abs(m-v)<=f-r?c:c+Math.floor((e-c)/2*((m-v)/(f-r)+1));0>=k&&(k=0);a=parseInt(a,
2);log.debug("updating WL to:  "+a);v=[];a={StatisticName:"WinLoss",Version:"0",Value:a};v.push(a);a={StatisticName:"TrophyCount",Version:"0",Value:k};v.push(a);a={StatisticName:"League",Version:"0",Value:t};v.push(a);log.debug("updatingStats: "+v);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:v});return{Result:"OK",RecType:"UserGenerated",PosData:h.Data[d+"_"+g+"_RecPos"].Value,RotData:h.Data[d+"_"+g+"_RecRot"].Value,HeaderData:h.Data[d+"_"+g+"_RecHeader"].Value,Opp:p.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateTrophyCount=function(b,l){var a=0,d=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=d.Statistics.length&&(a=d.Statistics[0].Value);"rStart"==b.val&&(a-=30);0>a&&(a=0);"rWin"==b.val&&(a+=60);if("rLose"==b.val)return{val:a};d=[];d.push({StatisticName:"TrophyCount",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:d});if("rWin"==b.val)return{val:a}};
handlers.initServerData=function(b){b=[];var l={StatisticName:"TrophyCount",Version:"0",Value:"0"};b.push(l);l={StatisticName:"League",Version:"0",Value:"0"};b.push(l);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:["Decals","PaintJobs","Plates","Rims","WindshieldText"]});for(var l={0:"Owned"},a=0;a<b.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[a].ItemInstanceId,Data:l});b=[];b.push("FordFocus");b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b});l={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});l={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});l={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l})};
handlers.requestInventory=function(b){b=server.GetUserInventory({PlayFabId:currentPlayerId});for(var l=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),d=!1,c=0;c<b.Inventory.length;c++)if("CarsProgress"==b.Inventory[c].CatalogVersion){var d=!0,k=checkCarDataValidity(b.Inventory[c],l);log.debug("check "+k);if("PlayFabError"==k||void 0==k)return generateErrObj("PlayfabError");"OK"==k?log.debug("Data for "+b.Inventory[c].ItemId+" OK"):b.Inventory[c].CustomData=
k;b.Inventory[c].CustomData.Pr=recalculateCarPr(b.Inventory[c].CustomData,b.Inventory[c].ItemId,l,a);k={};k.Pr=b.Inventory[c].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[c].ItemInstanceId,Data:k})}return 0==d?(b=[],b.push("FordFocus"),b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b}),l={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l}),l={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l}),l={PlatesId:"0",WindshieldId:"0",Pr:"10"},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l}),generateErrObj("UserHasNoCars ... reiniting")):b};
function checkCarDataValidity(b,l){if(void 0==b.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});for(var d=0,c=0;c<l.Catalog.length;c++)if(l.Catalog[c].ItemId==b.ItemId){var k=
JSON.parse(l.Catalog[c].CustomData),d=parseInt(k.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:d};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a})}catch(g){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:d}}return"OK"}function generateFailObj(b){return{Result:"Failed",Message:b}}
function generateErrObj(b){return{Result:"Error",Message:b}}function checkBalance(b,l,a,d){if("SC"==b){if(a<l)return generateFailObj("NotEnoughSC")}else if(d<l)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(b){var l=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==l.Data.LeagueSubdivisions||void 0==l.Data.SubdivisionTrophyRanges)return 1;for(var a=JSON.parse(l.Data.LeagueSubdivisions).leagues,l=JSON.parse(l.Data.SubdivisionTrophyRanges).subdivisions,d=0;d<a.length;d++)if(!(Number(b)>Number(l[a[d]])))return d}
function recalculateCarPr(b,l,a,d){var c=0,k;k=void 0==a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<k.Catalog.length;a++)if(k.Catalog[a].ItemId==l){a=JSON.parse(k.Catalog[a].CustomData);c+=parseInt(a.basePr)+parseInt(a.prPerLvl)*(parseInt(b.CarLvl)-1);break}d=void 0==d?server.GetCatalogItems({CatalogVersion:"PartCards"}):d;b={Exhaust:b.ExhaustLvl,Engine:b.EngineLvl,Gearbox:b.GearboxLvl,Suspension:b.SuspensionLvl,Tires:b.TiresLvl,Turbo:b.TurboLvl};for(a=0;a<d.Catalog.length;a++)l=
JSON.parse(d.Catalog[a].CustomData),c+=parseInt(l.basePr)+parseInt(l.prPerLvl)*b[d.Catalog[a].ItemId];return c}
function GenerateBlackMarket(b){var l=1,a=server.GetPlayerStatistics({PlayFabId:b,StatisticNames:["League"]});0!=a.Statistics.length&&(l=a.Statistics[0].Value.toString());var d=server.GetCatalogItems({CatalogVersion:"PartCards"}),a={};a.BMTime=(new Date).getTime();var c=Math.floor(Math.random()*d.Catalog.length),k=JSON.parse(d.Catalog[c].CustomData);if(void 0==k)return generateErrObj("Part card "+d.Catalog[f].ItemId+" has no custom data.");a.BMItem0=d.Catalog[c].ItemId+"_"+k.BMCurrType+"_"+k.BMbasePrice+
"_0_"+k.BMpriceIncrPerBuy;var g=Math.floor(Math.random()*d.Catalog.length);g==c&&(g=d.Catalog.length-c-1);k=JSON.parse(d.Catalog[g].CustomData);if(void 0==k)return generateErrObj("Part card "+d.Catalog[f].ItemId+" has no custom data.");a.BMItem1=d.Catalog[g].ItemId+"_"+k.BMCurrType+"_"+k.BMbasePrice+"_0_"+k.BMpriceIncrPerBuy;for(var d=server.GetCatalogItems({CatalogVersion:"CarCards"}),k=[],g=[],f=0;f<d.Catalog.length;f++){c=JSON.parse(d.Catalog[f].CustomData);if(void 0==c)return generateErrObj("Car card "+
d.Catalog[f].ItemId+" has no custom data.");c.unlockedAtRank>l+1||("false"==c.rareCar?k.push(d.Catalog[f].ItemId+"_"+c.BMCurrType+"_"+c.BMbasePrice+"_0_"+c.BMpriceIncrPerBuy):g.push(d.Catalog[f].ItemId+"_"+c.BMCurrType+"_"+c.BMbasePrice+"_0_"+c.BMpriceIncrPerBuy))}0>=k.length?(a.BMItem2=g[Math.floor(Math.random()*g.length)],a.BMItem3=g[Math.floor(Math.random()*g.length)]):0>=g.length?(a.BMItem2=k[Math.floor(Math.random()*k.length)],a.BMItem3=k[Math.floor(Math.random()*k.length)]):(a.BMItem2=k[Math.floor(Math.random()*
k.length)],a.BMItem3=g[Math.floor(Math.random()*g.length)]);server.UpdateUserInternalData({PlayFabId:b,Data:a});l=[];l.push("BlackMarketResetMinutes");b=server.GetTitleData({PlayFabId:b,Keys:l});a.BMTime=60*parseInt(b.Data.BlackMarketResetMinutes);return a}
function GetCurrentBlackMarket(b,l){var a={},d=new Date,c=[];c.push("BlackMarketResetMinutes");c=server.GetTitleData({PlayFabId:b,Keys:c});a.BMTime=60*parseInt(c.Data.BlackMarketResetMinutes)-Math.floor((d.getTime()-l.Data.BMTime.Value)/1E3);for(d=0;4>d;d++)a["BMItem"+d]=l.Data["BMItem"+d].Value;return a}
handlers.purchaseBMItem=function(b,l){log.debug("purchasing item "+b.itemId+" from black market");if(0>b.itemId||3<b.itemId)return generateFailObj("invalid item index");var a=[];a.push("BMItem"+b.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),d=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+b.itemId].Value.split("_");log.debug("userArray: "+a);var c=d.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var k;k=2>b.itemId?"PartCards":"CarCards";var g=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),c=checkBalance(a[1],g,c,c);if("OK"!=c)return c;var f,e;log.debug("searching for: "+a[0]+" in "+k);for(c=0;c<d.Inventory.length;c++)if(d.Inventory[c].ItemId==a[0]&&d.Inventory[c].CatalogVersion==k){log.debug("found it!");f=d.Inventory[c].ItemInstanceId;void 0==d.Inventory[c].CustomData?(log.debug("no custom data. creating ..."),e={Amount:1}):void 0==d.Inventory[c].CustomData.Amount?e={Amount:1}:(e=Number(d.Inventory[c].CustomData.Amount)+
1,isNaN(e)&&(e=1),e={Amount:e});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:e});break}void 0==f&&(log.debug("cardInstance is undefined"),f=[],f.push(a[0]),f=server.GrantItemsToUser({CatalogVersion:k,PlayFabId:currentPlayerId,ItemIds:f}).ItemGrantResults[0].ItemInstanceId,void 0==f?generateErrObj("grantRequest denied"):(e={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f,Data:e})));f=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:a[1],Amount:g});g=a[0]+"_"+a[1]+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];log.debug("generatedArray: "+g);d={};d["BMItem"+b.itemId]=g;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:d});e=[{ItemId:a[0],CatalogVersion:k,CustomData:e}];k={};k[f.VirtualCurrency]=f.Balance;a=b.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];c={Inventory:e,VirtualCurrency:k};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:c,BMItemChange:a}};
handlers.retrieveBlackMarket=function(b,l){var a=[];a.push("BMTime");for(var d=0;4>d;d++)a.push("BMItem"+d);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a});if(void 0==a.Data.BMTime)return log.debug("No user BM data detected; generating ..."),GenerateBlackMarket(currentPlayerId);d=new Date;log.debug("milliseconds passed: "+d.getTime());log.debug("BMTime: "+a.Data.BMTime.Value);var c=[];c.push("BlackMarketResetMinutes");c=server.GetTitleData({PlayFabId:currentPlayerId,Keys:c});if(1==
b.reset){log.debug("reseting market");a="HC";d=200;c=server.GetTitleData({Keys:["BlackMarketResetCost"]});void 0!=c.Data.BlackMarketResetCost&&(d=c.Data.BlackMarketResetCost.split("_"),a=d[0],d=Number(d[1]));if(0<d){c=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(a,d,c.VirtualCurrency.SC,c.VirtualCurrency.HC))return generateFailObj("not enough money");d=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:d});a=GenerateBlackMarket(currentPlayerId);
c={};c[d.VirtualCurrency]=d.Balance;d={VirtualCurrency:c};a.InventoryChange=d;return a}return GenerateBlackMarket(currentPlayerId)}if(d.getTime()-parseInt(a.Data.BMTime.Value)>6E4*parseInt(c.Data.BlackMarketResetMinutes))return log.debug("regenerating market"),GenerateBlackMarket(currentPlayerId);log.debug("get current market");return GetCurrentBlackMarket(currentPlayerId,a)};
handlers.updateCarCust=function(b,l){for(var a=server.GetUserInventory({PlayFabId:currentPlayerId}),d=[],c="-1",k={},g={PaintJobs:{itemOwned:"no",itemCustData:b.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:b.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:b.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:b.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",itemCustData:b.wsId,carItemId:"WindshieldId"}},f=0;f<a.Inventory.length;f++)a.Inventory[f].ItemId==
b.carId&&"CarsProgress"==a.Inventory[f].CatalogVersion&&(c=a.Inventory[f].ItemInstanceId),a.Inventory[f].ItemId in g&&(g[a.Inventory[f].ItemId].itemOwned="yes",g[a.Inventory[f].ItemId].itemCustData in a.Inventory[f].CustomData?k[g[a.Inventory[f].ItemId].carItemId]=g[a.Inventory[f].ItemId].itemCustData:log.debug("user doesn't own: "+a.Inventory[f].ItemId+" "+g[a.Inventory[f].ItemId].itemCustData));if("-1"==c)return generateFailObj("User does not own car with id: "+b.carId);for(var e in g)g.hasOwnProperty(e)&&
"no"==g[e].itemOwned&&d.push(e);if(k=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c,Data:k});a=[{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:k}];if(0<d.length)for(d=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:d}),c={0:"Owned"},f=0;f<d.ItemGrantResults.length;f++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:d.ItemGrantResults[f].ItemInstanceId,Data:c});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:a}}};
handlers.purchaseItems=function(b,l){log.debug("RETRIEVING USER INVENTORY");var a=server.GetUserInventory({PlayFabId:currentPlayerId}),d=a.VirtualCurrency.SC,c=a.VirtualCurrency.HC;log.debug("user currency: SC: "+d+" HC: "+c);switch(b.purchaseType){case "carUpgrade":log.debug("== carUpgrade request: carId: "+b.carId);log.debug("RETRIEVING CARDS CATALOGUE");for(var k=server.GetCatalogItems({CatalogVersion:"CarCards"}),g=!1,f,e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.carId&&"CarsProgress"==
a.Inventory[e].CatalogVersion){g=!0;log.debug("car is in user's inventory!");f=a.Inventory[e];break}for(var h,e=0;e<k.Catalog.length;e++)if(k.Catalog[e].ItemId==b.carId){h=JSON.parse(k.Catalog[e].CustomData);log.debug("cardInfo found!");break}if(void 0==h)return log.error("cardInfo undefined!"),h={Result:"Error",Message:"CardNotFoundForCarwithID: "+b.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data."};if(1==g){log.debug("user has car: "+b.carId+
"... upgrading");var m=parseInt(f.CustomData.CarLvl)+1,r=parseInt(h.baseCurrCost)+m*parseInt(h.currCostPerLvl),c=checkBalance(h.currType,r,d,c);if("OK"!=c)return c;log.debug("user has enough currency. Let's check for card balance");c=parseInt(h.baseCardCost)+parseInt(f.CustomData.CarLvl)*parseInt(h.cardCostPerLvl);log.debug("cardCost: "+c);for(var g=!1,p,e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.carId&&"CarCards"==a.Inventory[e].CatalogVersion){log.debug("consuming: "+a.Inventory[e].ItemInstanceId);
g=!0;try{if(void 0==a.Inventory[e].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");if(void 0==a.Inventory[e].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(a.Inventory[e].CustomData.Amount)>=c)a.Inventory[e].CustomData.Amount-=c,p={Amount:a.Inventory[e].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[e].ItemInstanceId,Data:p});else return generateFailObj("Insufficient cards for real: "+
a.Inventory[e].CustomData.Amount+" vs "+c)}catch(t){return log.debug("itemConsumptionResult.errorCode "+t),generateFailObj("Insufficient cards")}break}if(0==g)return generateFailObj("No cards found");log.debug("user has enough cards to purchase upgrade!");a=recalculateCarPr(f.CustomData,f.ItemId,k,void 0);log.debug("upgrading to car lvl: "+m+" and pr: "+a);e={CarLvl:m,Pr:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemInstanceId,Data:e});var n;0<r&&(n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:h.currType,Amount:r}));log.debug("Upgrade Complete!");a=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:e}];h={};e={Inventory:a};void 0!=n&&(h[n.VirtualCurrency]=n.Balance,e.VirtualCurrency=h);h={Result:"OK",Message:"InventoryUpdate",InventoryChange:e}}else{log.debug("user doesn't have car: "+b.carId+"... looking for card");for(var g=!1,u,e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.carId&&"CarCards"==a.Inventory[e].CatalogVersion){log.debug("consuming: "+
a.Inventory[e].ItemInstanceId);g=!0;try{if(void 0==a.Inventory[e].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0==a.Inventory[e].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");if(Number(a.Inventory[e].CustomData.Amount)>=Number(h.baseCardCost))u=a.Inventory[e].ItemInstanceId,a.Inventory[e].CustomData.Amount-=h.baseCardCost,p={Amount:a.Inventory[e].CustomData.Amount};else return generateFailObj("Insufficient cards: "+a.Inventory[e].CustomData.Amount+
" vs "+h.baseCardCost+".")}catch(t){return generateFailObj("Insufficient cards: "+t)}break}if(0==g)return generateFailObj("No cards found");log.debug("user has enough cards to purchase car. Checking if enough currency is availabe");c=checkBalance(h.currType,h.baseCurrCost,d,c);if("OK"!=c)return c;e=[];e.push(b.carId);c=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:e});if(0==c.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),
generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:u,Data:p});0<h.baseCurrCost&&(n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h.currType,Amount:h.baseCurrCost}));e={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,
Data:e});e={TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:e});e={PlatesId:"0",WindshieldId:"0",Pr:h.basePr};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:c.ItemGrantResults[0].ItemInstanceId,Data:e});for(var d=c=!1,q,e=0;e<a.Inventory.length;e++)if("PaintJobs"==a.Inventory[e].ItemId){d=!0;log.debug("user has paintjobs");
void 0!=a.Inventory[e].CustomData?(log.debug("user has paintjobs customData"),h.defaultPaintID in a.Inventory[e].CustomData?(log.debug("user has paintjob already"),c=!0):(log.debug("user doesn't have paintjob"),q={},q[h.defaultPaintID]="Owned")):(q={},q[h.defaultPaintID]="Owned");void 0!=q&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[e].ItemInstanceId,Data:q});break}0==d&&(paintToGive=[],paintToGive.push("PaintJobs"),a=server.GrantItemsToUser({CatalogVersion:"Customization",
PlayFabId:currentPlayerId,ItemIds:paintToGive}),q={},q[h.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:q}));e={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:h.basePr};a=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:p},{ItemId:b.carId,CatalogVersion:"CarsProgress",
CustomData:e}];0==c&&(e={},e[h.defaultPaintID]="Owned",a.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:e}));h={};e={Inventory:a};void 0!=n&&(h[n.VirtualCurrency]=n.Balance,e.VirtualCurrency=h);h={Result:"OK",Message:"InventoryUpdateNewCar",InventoryChange:e}}return h;case "partUpgrade":log.debug("Upgrading Part: "+b.partId+" on Car: "+b.carId);log.debug("Checking to see if car exists in catalog");p=server.GetCatalogItems({CatalogVersion:"CarsProgress"});q=!1;for(e=0;e<p.Catalog.length;e++)if(p.Catalog[e].ItemId==
b.carId){q=!0;break}if(0==q)return log.error("invalid car ID"),h={Result:"Error",Message:"car with ID: "+b.carId+" not found in catalog."};log.debug("Checking to see if part exists in catalog");p=server.GetCatalogItems({CatalogVersion:"PartCards"});q=!1;for(e=0;e<p.Catalog.length;e++)if(p.Catalog[e].ItemId==b.partId){h=JSON.parse(p.Catalog[e].CustomData);q=!0;break}if(0==q)return log.error("invalid part ID"),h={Result:"Error",Message:"part with ID: "+b.partId+" not found in catalog."};log.debug("Checking to see if user has car: "+
b.carId);g=!1;for(e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.carId&&"CarsProgress"==a.Inventory[e].CatalogVersion){g=!0;log.debug("car is in user's inventory!");f=a.Inventory[e];break}if(0==g)return generateFailObj("car with ID: "+b.carId+" not found in user inventory.");log.debug("Checking to see if user has part and or has enough parts");q=!1;for(e=0;e<a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.partId&&"PartCards"==a.Inventory[e].CatalogVersion){q=!0;log.debug("part is in user's inventory!");
k={};g={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"};log.debug("calculating "+b.partId+" cost and modifying "+g[b.partId]);u=parseInt(h.baseCardCost,10)+parseInt(f.CustomData[g[b.partId]],10)*parseInt(h.cardCostPerLvl,10);var w=parseInt(f.CustomData[g[b.partId]])+1,r=Number(h.baseCurrCost)+w*Number(h.currCostPerLvl);k[g[b.partId]]=w;f.CustomData[g[b.partId]]=w;log.debug("we need: "+u+" cards and "+r+" money => base: "+parseInt(h.baseCurrCost)+
" lvls: "+parseInt(f.CustomData[g[b.partId]])+" perLvlCost: "+parseInt(h.currCostPerLvl)+" equalling: "+parseInt(f.CustomData[g[b.partId]],10)*parseInt(h.currCostPerLvl,10));c=checkBalance(h.currType,r,d,c);if("OK"!=c)return c;log.debug("consuming part instance: "+a.Inventory[e].ItemInstanceId);try{if(void 0!=a.Inventory[e].CustomData&&void 0!=a.Inventory[e].CustomData.Amount&&a.Inventory[e].CustomData.Amount>=u)a.Inventory[e].CustomData.Amount-=u,m={Amount:a.Inventory[e].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.Inventory[e].ItemInstanceId,Data:m});else return generateFailObj("Insufficient cards")}catch(t){return log.debug("itemConsumptionResult.errorCode "+t),generateFailObj("Insufficient cards")}break}if(0==q)return generateFailObj("Part not found");0<r&&(n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h.currType,Amount:r}));a=recalculateCarPr(f.CustomData,f.ItemId,void 0,p);k.Pr=a;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemInstanceId,
Data:k});a=[{ItemId:b.partId,CatalogVersion:"PartCards",CustomData:m},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:k}];log.debug("succesfully upgraded part!");h={};e={Inventory:a};void 0!=n&&(h[n.VirtualCurrency]=n.Balance,e.VirtualCurrency=h);return h={Result:"OK",Message:"InventoryUpdatePart",InventoryChange:e};case "custPurchase":log.debug("Purchasing Customization: "+b.custId+" with val: "+b.custVal);log.debug("Checking to see if customization exists in catalog");f=server.GetCatalogItems({CatalogVersion:"Customization"});
h=0;n="SC";for(e=0;e<f.Catalog.length;e++)if(f.Catalog[e].ItemId==b.custId){w=f.Catalog[e];h=JSON.parse(f.Catalog[e].CustomData);e=b.custVal+",Cost";n=h[b.custVal+",Curr"];h=h[e];c=checkBalance(n,h,d,c);if("OK"!=c)return c;log.debug("custCurr: "+n);log.debug("custPrice: "+h);break}if(void 0==w)return log.error("Customization does not exist in catalog"),h={Result:"Error",Message:"Customization does not exist in catalog."};log.debug("Checking to see if user has said customization");for(var v,e=0;e<
a.Inventory.length;e++)if(a.Inventory[e].ItemId==b.custId){log.debug("user has customization category!");v=a.Inventory[e];g=a.Inventory[e].ItemInstanceId;if(void 0!=v.CustomData&&String(b.custVal)in v.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==v){log.info("user doesn't have customization category. Granting ... ");e=[];e.push(b.custId);a=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:e});if(0==a.ItemGrantResults[0].Result)return log.error("something went wrong while granting user customization class object"),
h={Result:"Error",Message:"something went wrong while granting user customization class object."};g=a.ItemGrantResults[0].ItemInstanceId}a={};a[String(b.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g,Data:a});a=[{ItemId:b.custId,CatalogVersion:"Customization",CustomData:a}];0<h?(n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:n,Amount:h}),h={},h[n.VirtualCurrency]=n.Balance,e={Inventory:a,VirtualCurrency:h}):e=
{Inventory:a};return h={Result:"OK",Message:"InventoryUpdateNewCustomization",InventoryChange:e};case "softCurrencyPurchase":log.debug("Purchasing pack: "+b.packId);log.debug("Checking to see if pack exists in catalog");n=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});a=!1;for(e=d=0;e<n.Catalog.length;e++)if(n.Catalog[e].ItemId==b.packId){d=n.Catalog[e].VirtualCurrencyPrices.HC;h=JSON.parse(n.Catalog[e].CustomData);a=!0;break}if(0==a)return h={Result:"Error",Message:"pack with ID: "+
b.packId+" not found in catalog."};if(0>=d)return h={Result:"Error",Message:"pack with ID: "+b.packId+" shouldn't have negative cost."};if(d>c)return generateFailObj("Not enough HC.");n=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:d});a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:h.quantity});h={};h[a.VirtualCurrency]=a.Balance;h[n.VirtualCurrency]=n.Balance;return h={Result:"OK",Message:"SoftCurrencyPurchased",
InventoryChange:{VirtualCurrency:h}};default:log.debug("invalid purchase parameter")}};handlers.giveMoney=function(b){b=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.amount});var l={};l[b.VirtualCurrency]=b.Balance;return{Result:"OK",Message:"CurrencyChanged",InventoryChange:{VirtualCurrency:l}}};
handlers.grantItems=function(b){for(var l=server.GetUserInventory({PlayFabId:currentPlayerId}),a,d=!1,c=0;c<l.Inventory.length;c++)if(l.Inventory[c].ItemId==b.itemId&&l.Inventory[c].CatalogVersion==b.catalogId){log.debug("adding amount to: "+l.Inventory[c].ItemInstanceId);a=void 0==l.Inventory[c].CustomData?b.amount:void 0==l.Inventory[c].CustomData.Amount?b.amount:isNaN(Number(l.Inventory[c].CustomData.Amount))?b.amount:Number(l.Inventory[c].CustomData.Amount)+b.amount;a={Amount:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:l.Inventory[c].ItemInstanceId,Data:a});d=!0;break}0==d&&(l=[],l.push(b.itemId),l=server.GrantItemsToUser({CatalogVersion:b.catalogId,PlayFabId:currentPlayerId,ItemIds:l}),a={Amount:b.amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:l.ItemGrantResults[0].ItemInstanceId,Data:a}));return{Result:"OK",Message:"InventoryUpdated",InventoryChange:{Inventory:[{ItemId:b.itemId,CatalogVersion:b.catalogId,CustomData:a}]}}};
handlers.openChest=function(b,l){var a=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<b.currCost){if("OK"!=checkBalance(b.currType,b.currCost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.currType,Amount:b.currCost})}for(var d in b.currencyReq)0<b.currencyReq[d]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:d,Amount:b.currencyReq[d]});var c;
for(d in b.carCardsRequest)if(log.debug(d+" : "+b.carCardsRequest[d]),b.carCardsRequest.hasOwnProperty(d)){c=!1;log.debug("looking for: "+d);for(var k=0;k<a.Inventory.length;k++)if(a.Inventory[k].ItemId==d&&"CarCards"==a.Inventory[k].CatalogVersion){log.debug("adding amount to: "+a.Inventory[k].ItemInstanceId);c=void 0==a.Inventory[k].CustomData?Number(b.carCardsRequest[d]):void 0==a.Inventory[k].CustomData.Amount?Number(b.carCardsRequest[d]):isNaN(Number(a.Inventory[k].CustomData.Amount))?Number(b.carCardsRequest[d]):
Number(a.Inventory[k].CustomData.Amount)+Number(b.carCardsRequest[d]);c={Amount:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[k].ItemInstanceId,Data:c});c=!0;break}0==c&&(k=[d],k=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:k}),c={Amount:b.carCardsRequest[d]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:c}))}for(d in b.partCardsRequest)if(log.debug(d+
" : "+b.partCardsRequest[d]),b.partCardsRequest.hasOwnProperty(d)){c=!1;log.debug("looking for: "+d);for(k=0;k<a.Inventory.length;k++)if(a.Inventory[k].ItemId==d&&"PartCards"==a.Inventory[k].CatalogVersion){log.debug("adding amount to: "+a.Inventory[k].ItemInstanceId);c=void 0==a.Inventory[k].CustomData?Number(b.partCardsRequest[d]):void 0==a.Inventory[k].CustomData.Amount?Number(b.partCardsRequest[d]):isNaN(Number(a.Inventory[k].CustomData.Amount))?Number(b.partCardsRequest[d]):Number(a.Inventory[k].CustomData.Amount)+
Number(b.partCardsRequest[d]);c={Amount:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[k].ItemInstanceId,Data:c});c=!0;break}0==c&&(k=[d],k=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:k}),c={Amount:b.partCardsRequest[d]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k.ItemGrantResults[0].ItemInstanceId,Data:c}))}return{Result:"OK",Message:"InventoryUpdated",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId})}};
handlers.buyChest=function(b,l){var a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(b.curr,b.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");if(0<b.cost){var a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.cost}),d={};d[a.VirtualCurrency]=a.Balance;return{Result:"OK",Message:"ChestBought",InventoryChange:{VirtualCurrency:d}}}return{Result:"OK",Message:"ChestBought",InventoryChange:{}}};
handlers.getServerTime=function(b,l){return{time:new Date}};
