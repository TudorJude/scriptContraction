handlers.endGame=function(b,l){var a="01",c,e="0";"rWin"==b.outcome&&(e="1");var f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});0!=f.Statistics.length&&(c=f.Statistics[0].Value.toString(),log.debug("wlStatInt "+c),a=Number(c).toString(2),log.debug("wlStat "+a));var f=0,k;log.debug("wlStat.length "+a.length);k=Array(a.length);log.debug("tempString.length "+k.length);for(var g=0;g<k.length-1;g++)k[g]=a[g];k[k.length-1]=e;log.debug("tempString "+k);a=k;log.debug("wlStat "+
a);e=a.length;for(g=0;g<a.length;g++)"1"==a[g]&&f++;log.debug("wlStatNew "+a);k=Math.round(f/e*100);log.debug("winRatio "+k);var d=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),e=0,h,f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=f.Statistics.length&&(e=f.Statistics[0].Value);h=e;"rWin"==b.outcome&&(e=0>=e?30:e+60);log.debug("trophies change: "+h+" => "+e);f=calculateLeague(e);for(g=c=0;g<a.length;g++)"1"==a[g]&&(c+=Math.pow(2,
g));g=[];g.push({StatisticName:"WinLoss",Version:"0",Value:c});a={StatisticName:"TrophyCount",Version:"0",Value:e};g.push(a);a={StatisticName:"League",Version:"0",Value:f};g.push(a);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:g});if("rOot"==b.outcome){var p={TrophyCount:e,League:f};return{Result:p}}a=JSON.parse(d.Data.SubdivisionTrophyRanges);log.debug("SubdivisionTrophyRanges "+a);for(g=0;g<a.subdivisions.length;g++)if(h<a.subdivisions[g]){p=g;break}log.debug("user is in subdivision "+
p);g=[];g.push({Key:b.envIndex+"_"+b.courseIndex+"_RecPos",Value:b.recordingPos});g.push({Key:b.envIndex+"_"+b.courseIndex+"_RecRot",Value:b.recordingRot});g.push({Key:b.envIndex+"_"+b.courseIndex+"_RecHeader",Value:b.recordingHeader});log.debug("updating user read only data ");g=server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:g});log.debug("updated user read only data for "+currentPlayerId+" "+g);g=server.GetTitleInternalData({Key:"RecSubDivision"+p}).Data["RecSubDivision"+p];log.debug("recPool: "+
g);if(void 0==g)a=[],k={wl:k,e:b.envIndex,c:b.courseIndex,uId:currentPlayerId},a.push(k),g=JSON.stringify(a),log.debug("recArray: "+g);else{a=JSON.parse(g);log.debug("recArray: "+a);k={wl:k,e:b.envIndex,c:b.courseIndex,uId:currentPlayerId};d=!1;for(g=0;g<a.length;g++)if(a[g].e==b.envIndex&&a[g].c==b.courseIndex){d=!0;a[g]=k;if(1==a.length)break;if(0<g)if(a[g].wl>a[g-1].wl){if(g==a.length-1)break;for(h=g+1;h<a.length;h++)if(a[h-1].wl>a[h].wl)c=a[h],a[h]=a[h-1],a[h-1]=c;else break}else for(h=g-1;0<=
h;h--)if(a[h+1].wl<a[h].wl)c=a[h],a[h]=a[h+1],a[h+1]=c;else break;else for(h=g+1;h<a.length;h++)if(a[h-1].wl>a[h].wl)c=a[h],a[h]=a[h-1],a[h-1]=c;else break}0==d&&(log.debug("recArrayLNbefore: "+a.length),a.push(k),log.debug("recArrayLNafter: "+a.length));g=JSON.stringify(a);log.debug("titleKeyVal: "+g)}server.SetTitleInternalData({Key:"RecSubDivision"+p,Value:g});p={TrophyCount:e,League:f};return{Result:p}};
handlers.startGame=function(b,l){var a="01",c=50,e=0,f=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["WinLoss"]});if(0!=f.Statistics.length){a=f.Statistics[0].Value.toString();a=Number(a).toString(2);c=a.length;for(f=0;f<a.length;f++)"1"==a[f]&&e++;c=Math.round(e/c*100)}log.debug("wlStatBeforeshiftandAdd "+a);a+="0";log.debug("wlStatBeforeshift "+a);20<a.length&&a.shift();log.debug("wlStat "+a);var f=server.GetTitleData({Key:["LeagueSubdivisions","SubdivisionTrophyRanges"]}),
k=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]}),e=0;0!=k.Statistics.length&&(e=k.Statistics[0].Value);k=JSON.parse(f.Data.SubdivisionTrophyRanges);log.debug("SubdivisionTrophyRanges "+k);for(var g,f=0;f<k.subdivisions.length;f++)if(e<k.subdivisions[f]){g=f;break}log.debug("user is in subdivision "+g);f=server.GetTitleInternalData({Keys:"RecSubDivision"+g}).Data["RecSubDivision"+g];log.debug("recPool "+f);if(void 0==f)return generateErrObj("Recording pool for this subdivision is null");
log.debug("parsing to json array");g=JSON.parse(f);log.debug("setting recording to index: "+g.length-1+" where opponent is: "+g[g.length-1].uId+"as default");for(var k=Array(g.length),d=0,f=0;f<g.length;f++)g[f].uId==currentPlayerId?log.debug("found: "+g[f].uId+"... skipping"):(k[d]=g[f],d++);if(0==d)return generateErrObj("no valid recording found for this subdivision");for(var h=d-1,f=0;f<d;f++)if(k[f].wl>c){h=f;break}c=Math.min(d,3);g=Array(c);for(f=0;f<c-1;f++)g[f]=0>=h?k[f]:h>=d-1?k[d-1-f]:k[h-
c/2+f];f=Math.floor(Math.random()*c);k=g[f].uId;c=g[f].e;f=g[f].c;g=[c+"_"+f+"_RecPos",c+"_"+f+"_RecRot",c+"_"+f+"_RecHeader"];log.debug("requesting "+g);g=server.GetUserReadOnlyData({PlayFabId:k,Keys:g});if(void 0==g)return generateErrObj("Did not find recording for this user: "+k);k=server.GetPlayerCombinedInfo({PlayFabId:k,InfoRequestParameters:{GetUserAccountInfo:!0,GetUserInventory:!1,GetUserVirtualCurrency:!1,GetUserData:!1,GetUserReadOnlyData:!1,GetCharacterInventories:!1,GetCharacterList:!1,
GetTitleData:!1,GetPlayerStatistics:!1}});e-=30;0>=e&&(e=0);a=parseInt(a,2);log.debug("updating WL to:  "+a);d=calculateLeague(e);h=[];h.push({StatisticName:"WinLoss",Version:"0",Value:a});h.push({StatisticName:"TrophyCount",Version:"0",Value:e});h.push({StatisticName:"League",Version:"0",Value:d});log.debug("updatingStats: "+h);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:h});return{Result:"OK",PosData:g.Data[c+"_"+f+"_RecPos"].Value,RotData:g.Data[c+"_"+f+"_RecRot"].Value,
HeaderData:g.Data[c+"_"+f+"_RecHeader"].Value,Opp:k.InfoResultPayload.AccountInfo.TitleInfo.DisplayName}};
handlers.updateTrophyCount=function(b,l){var a=0,c=server.GetPlayerStatistics({PlayFabId:currentPlayerId,StatisticNames:["TrophyCount"]});0!=c.Statistics.length&&(a=c.Statistics[0].Value);"rStart"==b.val&&(a-=30);0>a&&(a=0);"rWin"==b.val&&(a+=60);if("rLose"==b.val)return{val:a};c=[];c.push({StatisticName:"TrophyCount",Version:"0",Value:a});server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:c});if("rWin"==b.val)return{val:a}};
handlers.initServerData=function(b){b=[];var l={StatisticName:"TrophyCount",Version:"0",Value:"0"};b.push(l);l={StatisticName:"League",Version:"0",Value:"0"};b.push(l);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:b});b=[];b.push("Decals");b.push("PaintJobs");b.push("Plates");b.push("Rims");b.push("WindshieldText");b=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:b});for(var l={0:"Owned"},a=0;a<b.ItemGrantResults.length;a++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[a].ItemInstanceId,Data:l});b=[];b.push("FordFocus");b=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:b});l={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});l={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});l={PlatesId:"0",WindshieldId:"0",Pr:"10"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemGrantResults[0].ItemInstanceId,Data:l});server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:3E3});server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:200})};
handlers.requestInventory=function(b){b=server.GetUserInventory({PlayFabId:currentPlayerId});for(var l=server.GetCatalogItems({CatalogVersion:"CarCards"}),a=server.GetCatalogItems({CatalogVersion:"PartCards"}),c=0;c<b.Inventory.length;c++)if("CarsProgress"==b.Inventory[c].CatalogVersion){var e=checkCarDataValidity(b.Inventory[c],l);log.debug("check "+e);if("PlayFabError"==e||void 0==e)return generateErrObj("PlayfabError");"OK"==e?log.debug("Data for "+b.Inventory[c].ItemId+" OK"):b.Inventory[c].CustomData=
e;b.Inventory[c].CustomData.Pr=recalculateCarPr(b.Inventory[c].CustomData,b.Inventory[c].ItemId,l,a);e={};e.Pr=b.Inventory[c].CustomData.Pr;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.Inventory[c].ItemInstanceId,Data:e})}return b};
function checkCarDataValidity(b,l){if(void 0==b.CustomData){try{var a={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});a={TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a});for(var c=0,e=0;e<l.Catalog.length;e++)if(l.Catalog[e].ItemId==b.ItemId){var f=
JSON.parse(l.Catalog[e].CustomData),c=parseInt(f.basePr);break}a={PlatesId:"0",WindshieldId:"0",Pr:c};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:b.ItemInstanceId,Data:a})}catch(k){return"PlayFabError"}return{CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:"0",DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:c}}return"OK"}function generateFailObj(b){return{Result:"Failed",Message:b}}
function generateErrObj(b){return{Result:"Error",Message:b}}function checkBalance(b,l,a,c){if("SC"==b){if(a<l)return generateFailObj("NotEnoughSC")}else if(c<l)return generateFailObj("NotEnoughHC");return"OK"}
function calculateLeague(b){td=server.GetTitleData({Keys:["LeagueSubdivisions","SubdivisionTrophyRanges"]});if(void 0==td.Data.LeagueSubdivisions||void 0==td.Data.SubdivisionTrophyRanges)return 1;for(var l=JSON.parse(td.Data.LeagueSubdivisions).leagues,a=JSON.parse(td.Data.SubdivisionTrophyRanges).subdivisions,c=0;c<l.length;c++)if(!(Number(b)>Number(a[l[c]])))return c}
function recalculateCarPr(b,l,a,c){var e=0,f;f=void 0==a?server.GetCatalogItems({CatalogVersion:"CarCards"}):a;for(a=0;a<f.Catalog.length;a++)if(f.Catalog[a].ItemId==l){a=JSON.parse(f.Catalog[a].CustomData);e+=parseInt(a.basePr)+parseInt(a.prPerLvl)*(parseInt(b.CarLvl)-1);break}c=void 0==c?server.GetCatalogItems({CatalogVersion:"PartCards"}):c;b={Exhaust:b.ExhaustLvl,Engine:b.EngineLvl,Gearbox:b.GearboxLvl,Suspension:b.SuspensionLvl,Tires:b.TiresLvl,Turbo:b.TurboLvl};for(a=0;a<c.Catalog.length;a++)l=
JSON.parse(c.Catalog[a].CustomData),e+=parseInt(l.basePr)+parseInt(l.prPerLvl)*b[c.Catalog[a].ItemId];return e}
function GenerateBlackMarket(b){var l=server.GetCatalogItems({CatalogVersion:"PartCards"}),a={};a.BMTime=(new Date).getTime();var c=Math.floor(Math.random()*l.Catalog.length),e=JSON.parse(l.Catalog[c].CustomData);if(void 0==e)return generateErrObj("Part card "+l.Catalog[k].ItemId+" has no custom data.");a.BMItem0=l.Catalog[c].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy;var f=Math.floor(Math.random()*l.Catalog.length);f==c&&(f=l.Catalog.length-c-1);e=JSON.parse(l.Catalog[f].CustomData);
if(void 0==e)return generateErrObj("Part card "+l.Catalog[k].ItemId+" has no custom data.");a.BMItem1=l.Catalog[f].ItemId+"_"+e.BMCurrType+"_"+e.BMbasePrice+"_0_"+e.BMpriceIncrPerBuy;for(var l=server.GetCatalogItems({CatalogVersion:"CarCards"}),e=[],f=[],k=0;k<l.Catalog.length;k++){c=JSON.parse(l.Catalog[k].CustomData);if(void 0==c)return generateErrObj("Car card "+l.Catalog[k].ItemId+" has no custom data.");"false"==c.rareCar?e.push(l.Catalog[k].ItemId+"_"+c.BMCurrType+"_"+c.BMbasePrice+"_0_"+c.BMpriceIncrPerBuy):
f.push(l.Catalog[k].ItemId+"_"+c.BMCurrType+"_"+c.BMbasePrice+"_0_"+c.BMpriceIncrPerBuy)}0>=e.length?(a.BMItem2=f[Math.floor(Math.random()*f.length)],a.BMItem3=f[Math.floor(Math.random()*f.length)]):0>=f.length?(a.BMItem2=e[Math.floor(Math.random()*e.length)],a.BMItem3=e[Math.floor(Math.random()*e.length)]):(a.BMItem2=e[Math.floor(Math.random()*e.length)],a.BMItem3=f[Math.floor(Math.random()*f.length)]);server.UpdateUserInternalData({PlayFabId:b,Data:a});k=[];k.push("BlackMarketResetMinutes");b=server.GetTitleData({PlayFabId:b,
Keys:k});a.BMTime=60*parseInt(b.Data.BlackMarketResetMinutes);return a}function GetCurrentBlackMarket(b,l){var a={},c=new Date,e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:b,Keys:e});a.BMTime=60*parseInt(e.Data.BlackMarketResetMinutes)-Math.floor((c.getTime()-l.Data.BMTime.Value)/1E3);for(c=0;4>c;c++)a["BMItem"+c]=l.Data["BMItem"+c].Value;return a}
handlers.purchaseBMItem=function(b,l){log.debug("purchasing item "+b.itemId+" from black market");if(0>b.itemId||3<b.itemId)return generateFailObj("invalid item index");var a=[];a.push("BMItem"+b.itemId);var a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a}),c=server.GetUserInventory({PlayFabId:currentPlayerId}),a=a.Data["BMItem"+b.itemId].Value.split("_");log.debug("userArray: "+a);var e=c.VirtualCurrency[a[1]];5!=a.length&&generateErrObj("User Black Market corrupted. Try again tomorrow");
var f;f=2>b.itemId?"PartCards":"CarCards";var k=parseInt(a[2])+parseInt(a[3])*parseInt(a[4]),e=checkBalance(a[1],k,e,e);if("OK"!=e)return e;var g,d;log.debug("searching for: "+a[0]+" in "+f);for(e=0;e<c.Inventory.length;e++)if(c.Inventory[e].ItemId==a[0]&&c.Inventory[e].CatalogVersion==f){log.debug("found it!");g=c.Inventory[e].ItemInstanceId;void 0==c.Inventory[e].CustomData?(log.debug("no custom data. creating ..."),d={Amount:1}):void 0==c.Inventory[e].CustomData.Amount?d={Amount:1}:(d=Number(c.Inventory[e].CustomData.Amount)+
1,isNaN(d)&&(d=1),d={Amount:d});server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g,Data:d});break}void 0==g&&(log.debug("cardInstance is undefined"),g=[],g.push(a[0]),g=server.GrantItemsToUser({CatalogVersion:f,PlayFabId:currentPlayerId,ItemIds:g}).ItemGrantResults[0].ItemInstanceId,void 0==g?generateErrObj("grantRequest denied"):(d={Amount:1},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g,Data:d})));g=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:a[1],Amount:k});k=a[0]+"_"+a[1]+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];log.debug("generatedArray: "+k);c={};c["BMItem"+b.itemId]=k;server.UpdateUserInternalData({PlayFabId:currentPlayerId,Data:c});d=[{ItemId:a[0],CatalogVersion:f,CustomData:d}];f={};f[g.VirtualCurrency]=g.Balance;a=b.itemId+"_"+a[2]+"_"+(parseInt(a[3])+1)+"_"+a[4];e={Inventory:d,VirtualCurrency:f};return{Result:"OK",Message:"InventoryUpdate",InventoryChange:e,BMItemChange:a}};
handlers.retrieveBlackMarket=function(b,l){var a=[];a.push("BMTime");for(var c=0;4>c;c++)a.push("BMItem"+c);a=server.GetUserInternalData({PlayFabId:currentPlayerId,Keys:a});if(void 0==a.Data.BMTime)return log.debug("No user BM data detected; generating ..."),GenerateBlackMarket(currentPlayerId);c=new Date;log.debug("milliseconds passed: "+c.getTime());log.debug("BMTime: "+a.Data.BMTime.Value);var e=[];e.push("BlackMarketResetMinutes");e=server.GetTitleData({PlayFabId:currentPlayerId,Keys:e});if(c.getTime()-
parseInt(a.Data.BMTime.Value)>6E4*parseInt(e.Data.BlackMarketResetMinutes))return log.debug("regenerating market"),GenerateBlackMarket(currentPlayerId);log.debug("get current market");return GetCurrentBlackMarket(currentPlayerId,a)};
handlers.updateCarCust=function(b,l){for(var a=server.GetUserInventory({PlayFabId:currentPlayerId}),c=[],e="-1",f={},k={PaintJobs:{itemOwned:"no",itemCustData:b.paintId,carItemId:"PaintId"},Decals:{itemOwned:"no",itemCustData:b.decalId,carItemId:"DecalId"},Plates:{itemOwned:"no",itemCustData:b.platesId,carItemId:"PlatesId"},Rims:{itemOwned:"no",itemCustData:b.rimsId,carItemId:"RimsId"},WindshieldText:{itemOwned:"no",itemCustData:b.wsId,carItemId:"WindshieldId"}},g=0;g<a.Inventory.length;g++)a.Inventory[g].ItemId==
b.carId&&"CarsProgress"==a.Inventory[g].CatalogVersion&&(e=a.Inventory[g].ItemInstanceId),a.Inventory[g].ItemId in k&&(k[a.Inventory[g].ItemId].itemOwned="yes",k[a.Inventory[g].ItemId].itemCustData in a.Inventory[g].CustomData?f[k[a.Inventory[g].ItemId].carItemId]=k[a.Inventory[g].ItemId].itemCustData:log.debug("user doesn't own: "+a.Inventory[g].ItemId+" "+k[a.Inventory[g].ItemId].itemCustData));if("-1"==e)return generateFailObj("User does not own car with id: "+b.carId);for(var d in k)k.hasOwnProperty(d)&&
"no"==k[d].itemOwned&&c.push(d);if(f=={})return generateFailObj("User doesn't own any of those customizations");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e,Data:f});a=[{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:f}];if(0<c.length)for(c=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:c}),e={0:"Owned"},g=0;g<c.ItemGrantResults.length;g++)server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:c.ItemGrantResults[g].ItemInstanceId,Data:e});return{Result:"OK",Message:"InventoryUpdate",InventoryChange:{Inventory:a}}};
handlers.purchaseItems=function(b,l){log.debug("RETRIEVING USER INVENTORY");var a=server.GetUserInventory({PlayFabId:currentPlayerId}),c=a.VirtualCurrency.SC,e=a.VirtualCurrency.HC;log.debug("user currency: SC: "+c+" HC: "+e);switch(b.purchaseType){case "carUpgrade":log.debug("== carUpgrade request: carId: "+b.carId);log.debug("RETRIEVING CARDS CATALOGUE");for(var f=server.GetCatalogItems({CatalogVersion:"CarCards"}),k=!1,g,d=0;d<a.Inventory.length;d++)if(a.Inventory[d].ItemId==b.carId&&"CarsProgress"==
a.Inventory[d].CatalogVersion){k=!0;log.debug("car is in user's inventory!");g=a.Inventory[d];break}for(var h,d=0;d<f.Catalog.length;d++)if(f.Catalog[d].ItemId==b.carId){h=JSON.parse(f.Catalog[d].CustomData);log.debug("cardInfo found!");break}if(void 0==h)return log.error("cardInfo undefined!"),h={Result:"Error",Message:"CardNotFoundForCarwithID: "+b.carId+". It is possible that the carCard ID and the Car ID do not coincide. Check Playfab catalog data."};if(1==k){log.debug("user has car: "+b.carId+
"... upgrading");var p=parseInt(g.CustomData.CarLvl)+1,r=parseInt(h.baseCurrCost)+p*parseInt(h.currCostPerLvl),e=checkBalance(h.currType,r,c,e);if("OK"!=e)return e;log.debug("user has enough currency. Let's check for card balance");e=parseInt(h.baseCardCost)+parseInt(g.CustomData.CarLvl)*parseInt(h.cardCostPerLvl);log.debug("cardCost: "+e);for(var k=!1,q,d=0;d<a.Inventory.length;d++)if(a.Inventory[d].ItemId==b.carId&&"CarCards"==a.Inventory[d].CatalogVersion){log.debug("consuming: "+a.Inventory[d].ItemInstanceId);
k=!0;try{if(void 0==a.Inventory[d].CustomData)return generateFailObj("Insufficient cards, CusotmData undefined");if(void 0==a.Inventory[d].CustomData.Amount)return generateFailObj("Insufficient cards, CusotmData.Amount udnefined");if(Number(a.Inventory[d].CustomData.Amount)>=e)a.Inventory[d].CustomData.Amount-=e,q={Amount:a.Inventory[d].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[d].ItemInstanceId,Data:q});else return generateFailObj("Insufficient cards for real: "+
a.Inventory[d].CustomData.Amount+" vs "+e)}catch(u){return log.debug("itemConsumptionResult.errorCode "+u),generateFailObj("Insufficient cards")}break}if(0==k)return generateFailObj("No cards found");log.debug("user has enough cards to purchase upgrade!");a=recalculateCarPr(g.CustomData,g.ItemId,f,void 0);log.debug("upgrading to car lvl: "+p+" and pr: "+a);d={CarLvl:p,Pr:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemInstanceId,Data:d});var m;0<r&&(m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,
VirtualCurrency:h.currType,Amount:r}));log.debug("Upgrade Complete!");a=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:q},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:d}];h={};d={Inventory:a};void 0!=m&&(h[m.VirtualCurrency]=m.Balance,d.VirtualCurrency=h);h={Result:"OK",Message:"InventoryUpdate",InventoryChange:d}}else{log.debug("user doesn't have car: "+b.carId+"... looking for card");for(var k=!1,t,d=0;d<a.Inventory.length;d++)if(a.Inventory[d].ItemId==b.carId&&"CarCards"==a.Inventory[d].CatalogVersion){log.debug("consuming: "+
a.Inventory[d].ItemInstanceId);k=!0;try{if(void 0==a.Inventory[d].CustomData)return generateFailObj("Insufficient cards, CustomData null");if(void 0==a.Inventory[d].CustomData.Amount)return generateFailObj("Insufficient cards, CustomData.Amount null");if(Number(a.Inventory[d].CustomData.Amount)>=Number(h.baseCardCost))t=a.Inventory[d].ItemInstanceId,a.Inventory[d].CustomData.Amount-=h.baseCardCost,q={Amount:a.Inventory[d].CustomData.Amount};else return generateFailObj("Insufficient cards: "+a.Inventory[d].CustomData.Amount+
" vs "+h.baseCardCost+".")}catch(u){return generateFailObj("Insufficient cards: "+u)}break}if(0==k)return generateFailObj("No cards found");log.debug("user has enough cards to purchase car. Checking if enough currency is availabe");e=checkBalance(h.currType,h.baseCurrCost,c,e);if("OK"!=e)return e;d=[];d.push(b.carId);e=server.GrantItemsToUser({CatalogVersion:"CarsProgress",PlayFabId:currentPlayerId,ItemIds:d});if(0==e.ItemGrantResults[0].Result)return log.error("Something went wrong while giving user the item, refunding cards"),
generateFailObj("Something went wrong while giving user the item, refunding cards.");server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:t,Data:q});0<h.baseCurrCost&&(m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h.currType,Amount:h.baseCurrCost}));d={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[0].ItemInstanceId,
Data:d});d={TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,DecalId:"0",RimsId:"0"};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[0].ItemInstanceId,Data:d});d={PlatesId:"0",WindshieldId:"0",Pr:h.basePr};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:e.ItemGrantResults[0].ItemInstanceId,Data:d});for(var c=e=!1,n,d=0;d<a.Inventory.length;d++)if("PaintJobs"==a.Inventory[d].ItemId){c=!0;log.debug("user has paintjobs");
void 0!=a.Inventory[d].CustomData?(log.debug("user has paintjobs customData"),h.defaultPaintID in a.Inventory[d].CustomData?(log.debug("user has paintjob already"),e=!0):(log.debug("user doesn't have paintjob"),n={},n[h.defaultPaintID]="Owned")):(n={},n[h.defaultPaintID]="Owned");void 0!=n&&server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[d].ItemInstanceId,Data:n});break}0==c&&(paintToGive=[],paintToGive.push("PaintJobs"),a=server.GrantItemsToUser({CatalogVersion:"Customization",
PlayFabId:currentPlayerId,ItemIds:paintToGive}),n={},n[h.defaultPaintID]="Owned",server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.ItemGrantResults[0].ItemInstanceId,Data:n}));d={CarLvl:"1",EngineLvl:"0",ExhaustLvl:"0",GearboxLvl:"0",SuspensionLvl:"0",TiresLvl:"0",TurboLvl:"0",PaintId:h.defaultPaintID,DecalId:"0",RimsId:"0",PlatesId:"0",WindshieldId:"0",Pr:h.basePr};a=[{ItemId:b.carId,CatalogVersion:"CarCards",CustomData:q},{ItemId:b.carId,CatalogVersion:"CarsProgress",
CustomData:d}];0==e&&(d={},d[h.defaultPaintID]="Owned",a.push({ItemId:"PaintJobs",CatalogVersion:"Customization",CustomData:d}));h={};d={Inventory:a};void 0!=m&&(h[m.VirtualCurrency]=m.Balance,d.VirtualCurrency=h);h={Result:"OK",Message:"InventoryUpdateNewCar",InventoryChange:d}}return h;case "partUpgrade":log.debug("Upgrading Part: "+b.partId+" on Car: "+b.carId);log.debug("Checking to see if car exists in catalog");q=server.GetCatalogItems({CatalogVersion:"CarsProgress"});n=!1;for(d=0;d<q.Catalog.length;d++)if(q.Catalog[d].ItemId==
b.carId){n=!0;break}if(0==n)return log.error("invalid car ID"),h={Result:"Error",Message:"car with ID: "+b.carId+" not found in catalog."};log.debug("Checking to see if part exists in catalog");q=server.GetCatalogItems({CatalogVersion:"PartCards"});n=!1;for(d=0;d<q.Catalog.length;d++)if(q.Catalog[d].ItemId==b.partId){h=JSON.parse(q.Catalog[d].CustomData);n=!0;break}if(0==n)return log.error("invalid part ID"),h={Result:"Error",Message:"part with ID: "+b.partId+" not found in catalog."};log.debug("Checking to see if user has car: "+
b.carId);k=!1;for(d=0;d<a.Inventory.length;d++)if(a.Inventory[d].ItemId==b.carId&&"CarsProgress"==a.Inventory[d].CatalogVersion){k=!0;log.debug("car is in user's inventory!");g=a.Inventory[d];break}if(0==k)return generateFailObj("car with ID: "+b.carId+" not found in user inventory.");log.debug("Checking to see if user has part and or has enough parts");n=!1;for(d=0;d<a.Inventory.length;d++)if(a.Inventory[d].ItemId==b.partId&&"PartCards"==a.Inventory[d].CatalogVersion){n=!0;log.debug("part is in user's inventory!");
f={};k={Exhaust:"ExhaustLvl",Engine:"EngineLvl",Gearbox:"GearboxLvl",Suspension:"SuspensionLvl",Tires:"TiresLvl",Turbo:"TurboLvl"};log.debug("calculating "+b.partId+" cost and modifying "+k[b.partId]);t=parseInt(h.baseCardCost,10)+parseInt(g.CustomData[k[b.partId]],10)*parseInt(h.cardCostPerLvl,10);var v=parseInt(g.CustomData[k[b.partId]])+1,r=Number(h.baseCurrCost)+v*Number(h.currCostPerLvl);f[k[b.partId]]=v;g.CustomData[k[b.partId]]=v;log.debug("we need: "+t+" cards and "+r+" money => base: "+parseInt(h.baseCurrCost)+
" lvls: "+parseInt(g.CustomData[k[b.partId]])+" perLvlCost: "+parseInt(h.currCostPerLvl)+" equalling: "+parseInt(g.CustomData[k[b.partId]],10)*parseInt(h.currCostPerLvl,10));e=checkBalance(h.currType,r,c,e);if("OK"!=e)return e;log.debug("consuming part instance: "+a.Inventory[d].ItemInstanceId);try{if(void 0!=a.Inventory[d].CustomData&&void 0!=a.Inventory[d].CustomData.Amount&&a.Inventory[d].CustomData.Amount>=t)a.Inventory[d].CustomData.Amount-=t,p={Amount:a.Inventory[d].CustomData.Amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:a.Inventory[d].ItemInstanceId,Data:p});else return generateFailObj("Insufficient cards")}catch(u){return log.debug("itemConsumptionResult.errorCode "+u),generateFailObj("Insufficient cards")}break}if(0==n)return generateFailObj("Part not found");0<r&&(m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:h.currType,Amount:r}));a=recalculateCarPr(g.CustomData,g.ItemId,void 0,q);f.Pr=a;server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:g.ItemInstanceId,
Data:f});a=[{ItemId:b.partId,CatalogVersion:"PartCards",CustomData:p},{ItemId:b.carId,CatalogVersion:"CarsProgress",CustomData:f}];log.debug("succesfully upgraded part!");h={};d={Inventory:a};void 0!=m&&(h[m.VirtualCurrency]=m.Balance,d.VirtualCurrency=h);return h={Result:"OK",Message:"InventoryUpdatePart",InventoryChange:d};case "custPurchase":log.debug("Purchasing Customization: "+b.custId+" with val: "+b.custVal);log.debug("Checking to see if customization exists in catalog");g=server.GetCatalogItems({CatalogVersion:"Customization"});
h=0;m="SC";for(d=0;d<g.Catalog.length;d++)if(g.Catalog[d].ItemId==b.custId){v=g.Catalog[d];h=JSON.parse(g.Catalog[d].CustomData);d=b.custVal+",Cost";m=h[b.custVal+",Curr"];h=h[d];e=checkBalance(m,h,c,e);if("OK"!=e)return e;log.debug("custCurr: "+m);log.debug("custPrice: "+h);break}if(void 0==v)return log.error("Customization does not exist in catalog"),h={Result:"Error",Message:"Customization does not exist in catalog."};log.debug("Checking to see if user has said customization");for(var w,d=0;d<
a.Inventory.length;d++)if(a.Inventory[d].ItemId==b.custId){log.debug("user has customization category!");w=a.Inventory[d];k=a.Inventory[d].ItemInstanceId;if(void 0!=w.CustomData&&String(b.custVal)in w.CustomData)return generateFailObj("User already has this customization.");break}if(void 0==w){log.info("user doesn't have customization category. Granting ... ");d=[];d.push(b.custId);a=server.GrantItemsToUser({CatalogVersion:"Customization",PlayFabId:currentPlayerId,ItemIds:d});if(0==a.ItemGrantResults[0].Result)return log.error("something went wrong while granting user customization class object"),
h={Result:"Error",Message:"something went wrong while granting user customization class object."};k=a.ItemGrantResults[0].ItemInstanceId}a={};a[String(b.custVal)]="Owned";server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:k,Data:a});a=[{ItemId:b.custId,CatalogVersion:"Customization",CustomData:a}];0<h?(m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:m,Amount:h}),h={},h[m.VirtualCurrency]=m.Balance,d={Inventory:a,VirtualCurrency:h}):d=
{Inventory:a};return h={Result:"OK",Message:"InventoryUpdateNewCustomization",InventoryChange:d};case "softCurrencyPurchase":log.debug("Purchasing pack: "+b.packId);log.debug("Checking to see if pack exists in catalog");m=server.GetCatalogItems({CatalogVersion:"SoftCurrencyStore"});a=!1;for(d=c=0;d<m.Catalog.length;d++)if(m.Catalog[d].ItemId==b.packId){c=m.Catalog[d].VirtualCurrencyPrices.HC;h=JSON.parse(m.Catalog[d].CustomData);a=!0;break}if(0==a)return h={Result:"Error",Message:"pack with ID: "+
b.packId+" not found in catalog."};if(0>=c)return h={Result:"Error",Message:"pack with ID: "+b.packId+" shouldn't have negative cost."};if(c>e)return generateFailObj("Not enough HC.");m=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:c});a=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:h.quantity});h={};h[a.VirtualCurrency]=a.Balance;h[m.VirtualCurrency]=m.Balance;return h={Result:"OK",Message:"SoftCurrencyPurchased",
InventoryChange:{VirtualCurrency:h}};default:log.debug("invalid purchase parameter")}};handlers.giveMoney=function(b){b=server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.amount});var l={};l[b.VirtualCurrency]=b.Balance;return{Result:"OK",Message:"CurrencyChanged",InventoryChange:{VirtualCurrency:l}}};
handlers.grantItems=function(b){for(var l=server.GetUserInventory({PlayFabId:currentPlayerId}),a,c=!1,e=0;e<l.Inventory.length;e++)if(l.Inventory[e].ItemId==b.itemId&&l.Inventory[e].CatalogVersion==b.catalogId){log.debug("adding amount to: "+l.Inventory[e].ItemInstanceId);a=void 0==l.Inventory[e].CustomData?b.amount:void 0==l.Inventory[e].CustomData.Amount?b.amount:isNaN(Number(l.Inventory[e].CustomData.Amount))?b.amount:Number(l.Inventory[e].CustomData.Amount)+b.amount;a={Amount:a};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,
ItemInstanceId:l.Inventory[e].ItemInstanceId,Data:a});c=!0;break}0==c&&(l=[],l.push(b.itemId),l=server.GrantItemsToUser({CatalogVersion:b.catalogId,PlayFabId:currentPlayerId,ItemIds:l}),a={Amount:b.amount},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:l.ItemGrantResults[0].ItemInstanceId,Data:a}));return{Result:"OK",Message:"InventoryUpdated",InventoryChange:{Inventory:[{ItemId:b.itemId,CatalogVersion:b.catalogId,CustomData:a}]}}};
handlers.openChest=function(b,l){var a=server.GetUserInventory({PlayFabId:currentPlayerId});if(0<b.currCost){if("OK"!=checkBalance(b.currType,b.currCost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.currType,Amount:b.currCost})}for(var c in b.currencyReq)0<b.currencyReq[c]&&server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:c,Amount:b.currencyReq[c]});var e;
for(c in b.carCardsRequest)if(log.debug(c+" : "+b.carCardsRequest[c]),b.carCardsRequest.hasOwnProperty(c)){e=!1;log.debug("looking for: "+c);for(var f=0;f<a.Inventory.length;f++)if(a.Inventory[f].ItemId==c&&"CarCards"==a.Inventory[f].CatalogVersion){log.debug("adding amount to: "+a.Inventory[f].ItemInstanceId);e=void 0==a.Inventory[f].CustomData?Number(b.carCardsRequest[c]):void 0==a.Inventory[f].CustomData.Amount?Number(b.carCardsRequest[c]):isNaN(Number(a.Inventory[f].CustomData.Amount))?Number(b.carCardsRequest[c]):
Number(a.Inventory[f].CustomData.Amount)+Number(b.carCardsRequest[c]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[f].ItemInstanceId,Data:e});e=!0;break}0==e&&(f=[c],f=server.GrantItemsToUser({CatalogVersion:"CarCards",PlayFabId:currentPlayerId,ItemIds:f}),e={Amount:b.carCardsRequest[c]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:e}))}for(c in b.partCardsRequest)if(log.debug(c+
" : "+b.partCardsRequest[c]),b.partCardsRequest.hasOwnProperty(c)){e=!1;log.debug("looking for: "+c);for(f=0;f<a.Inventory.length;f++)if(a.Inventory[f].ItemId==c&&"PartCards"==a.Inventory[f].CatalogVersion){log.debug("adding amount to: "+a.Inventory[f].ItemInstanceId);e=void 0==a.Inventory[f].CustomData?Number(b.partCardsRequest[c]):void 0==a.Inventory[f].CustomData.Amount?Number(b.partCardsRequest[c]):isNaN(Number(a.Inventory[f].CustomData.Amount))?Number(b.partCardsRequest[c]):Number(a.Inventory[f].CustomData.Amount)+
Number(b.partCardsRequest[c]);e={Amount:e};server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:a.Inventory[f].ItemInstanceId,Data:e});e=!0;break}0==e&&(f=[c],f=server.GrantItemsToUser({CatalogVersion:"PartCards",PlayFabId:currentPlayerId,ItemIds:f}),e={Amount:b.partCardsRequest[c]},server.UpdateUserInventoryItemCustomData({PlayFabId:currentPlayerId,ItemInstanceId:f.ItemGrantResults[0].ItemInstanceId,Data:e}))}return{Result:"OK",Message:"InventoryUpdated",InventoryChange:server.GetUserInventory({PlayFabId:currentPlayerId})}};
handlers.buyChest=function(b,l){var a=server.GetUserInventory({PlayFabId:currentPlayerId});if("OK"!=checkBalance(b.curr,b.cost,a.VirtualCurrency.SC,a.VirtualCurrency.HC))return generateFailObj("not enough money");var a=server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:b.curr,Amount:b.cost}),c={};c[a.VirtualCurrency]=a.Balance;return{Result:"OK",Message:"ChestBought",InventoryChange:{VirtualCurrency:c}}};handlers.getServerTime=function(b,l){return{time:new Date}};
